
NTI_Control_DC_Motor_by_EXTI_Task_day12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  00004a7e  00004b12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001bc  008001bc  00004c6e  2**0
                  ALLOC
  3 .stab         00003150  00000000  00000000  00004c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016f4  00000000  00000000  00007dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000094b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d0  00000000  00000000  00009634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b67  00000000  00000000  00009804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001266  00000000  00000000  0000c36b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001231  00000000  00000000  0000d5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000e804  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031d  00000000  00000000  0000e9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000020f4  00000000  00000000  0000ecc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00010db5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__vector_1>
       8:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__vector_2>
       c:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 87 23 	call	0x470e	; 0x470e <main>
      8a:	0c 94 3d 25 	jmp	0x4a7a	; 0x4a7a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__subsf3>
      be:	0e 94 8e 10 	call	0x211c	; 0x211c <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 8e 10 	call	0x211c	; 0x211c <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__udivdi3>:
      ea:	ae e5       	ldi	r26, 0x5E	; 94
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__prologue_saves__>
      f6:	a8 e0       	ldi	r26, 0x08	; 8
      f8:	4e 01       	movw	r8, r28
      fa:	08 94       	sec
      fc:	81 1c       	adc	r8, r1
      fe:	91 1c       	adc	r9, r1
     100:	f4 01       	movw	r30, r8
     102:	6a 2e       	mov	r6, r26
     104:	11 92       	st	Z+, r1
     106:	6a 94       	dec	r6
     108:	e9 f7       	brne	.-6      	; 0x104 <__udivdi3+0x1a>
     10a:	29 83       	std	Y+1, r18	; 0x01
     10c:	3a 83       	std	Y+2, r19	; 0x02
     10e:	4b 83       	std	Y+3, r20	; 0x03
     110:	5c 83       	std	Y+4, r21	; 0x04
     112:	6d 83       	std	Y+5, r22	; 0x05
     114:	7e 83       	std	Y+6, r23	; 0x06
     116:	8f 83       	std	Y+7, r24	; 0x07
     118:	98 87       	std	Y+8, r25	; 0x08
     11a:	ce 01       	movw	r24, r28
     11c:	09 96       	adiw	r24, 0x09	; 9
     11e:	fc 01       	movw	r30, r24
     120:	11 92       	st	Z+, r1
     122:	aa 95       	dec	r26
     124:	e9 f7       	brne	.-6      	; 0x120 <__udivdi3+0x36>
     126:	a9 86       	std	Y+9, r10	; 0x09
     128:	ba 86       	std	Y+10, r11	; 0x0a
     12a:	cb 86       	std	Y+11, r12	; 0x0b
     12c:	dc 86       	std	Y+12, r13	; 0x0c
     12e:	ed 86       	std	Y+13, r14	; 0x0d
     130:	fe 86       	std	Y+14, r15	; 0x0e
     132:	0f 87       	std	Y+15, r16	; 0x0f
     134:	18 8b       	std	Y+16, r17	; 0x10
     136:	29 84       	ldd	r2, Y+9	; 0x09
     138:	3a 84       	ldd	r3, Y+10	; 0x0a
     13a:	4b 84       	ldd	r4, Y+11	; 0x0b
     13c:	5c 84       	ldd	r5, Y+12	; 0x0c
     13e:	ed 84       	ldd	r14, Y+13	; 0x0d
     140:	fe 84       	ldd	r15, Y+14	; 0x0e
     142:	0f 85       	ldd	r16, Y+15	; 0x0f
     144:	18 89       	ldd	r17, Y+16	; 0x10
     146:	69 80       	ldd	r6, Y+1	; 0x01
     148:	7a 80       	ldd	r7, Y+2	; 0x02
     14a:	8b 80       	ldd	r8, Y+3	; 0x03
     14c:	9c 80       	ldd	r9, Y+4	; 0x04
     14e:	6d a6       	std	Y+45, r6	; 0x2d
     150:	7e a6       	std	Y+46, r7	; 0x2e
     152:	8f a6       	std	Y+47, r8	; 0x2f
     154:	98 aa       	std	Y+48, r9	; 0x30
     156:	6d 80       	ldd	r6, Y+5	; 0x05
     158:	7e 80       	ldd	r7, Y+6	; 0x06
     15a:	8f 80       	ldd	r8, Y+7	; 0x07
     15c:	98 84       	ldd	r9, Y+8	; 0x08
     15e:	e1 14       	cp	r14, r1
     160:	f1 04       	cpc	r15, r1
     162:	01 05       	cpc	r16, r1
     164:	11 05       	cpc	r17, r1
     166:	09 f0       	breq	.+2      	; 0x16a <__udivdi3+0x80>
     168:	b3 c3       	rjmp	.+1894   	; 0x8d0 <__stack+0x71>
     16a:	62 14       	cp	r6, r2
     16c:	73 04       	cpc	r7, r3
     16e:	84 04       	cpc	r8, r4
     170:	95 04       	cpc	r9, r5
     172:	08 f0       	brcs	.+2      	; 0x176 <__udivdi3+0x8c>
     174:	3d c1       	rjmp	.+634    	; 0x3f0 <__udivdi3+0x306>
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	20 16       	cp	r2, r16
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	30 06       	cpc	r3, r16
     17e:	01 e0       	ldi	r16, 0x01	; 1
     180:	40 06       	cpc	r4, r16
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	50 06       	cpc	r5, r16
     186:	88 f4       	brcc	.+34     	; 0x1aa <__udivdi3+0xc0>
     188:	1f ef       	ldi	r17, 0xFF	; 255
     18a:	21 16       	cp	r2, r17
     18c:	31 04       	cpc	r3, r1
     18e:	41 04       	cpc	r4, r1
     190:	51 04       	cpc	r5, r1
     192:	39 f0       	breq	.+14     	; 0x1a2 <__udivdi3+0xb8>
     194:	30 f0       	brcs	.+12     	; 0x1a2 <__udivdi3+0xb8>
     196:	48 e0       	ldi	r20, 0x08	; 8
     198:	e4 2e       	mov	r14, r20
     19a:	f1 2c       	mov	r15, r1
     19c:	01 2d       	mov	r16, r1
     19e:	11 2d       	mov	r17, r1
     1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <__udivdi3+0xe8>
     1a2:	ee 24       	eor	r14, r14
     1a4:	ff 24       	eor	r15, r15
     1a6:	87 01       	movw	r16, r14
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <__udivdi3+0xe8>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	22 16       	cp	r2, r18
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	32 06       	cpc	r3, r18
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	42 06       	cpc	r4, r18
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	52 06       	cpc	r5, r18
     1ba:	30 f0       	brcs	.+12     	; 0x1c8 <__udivdi3+0xde>
     1bc:	38 e1       	ldi	r19, 0x18	; 24
     1be:	e3 2e       	mov	r14, r19
     1c0:	f1 2c       	mov	r15, r1
     1c2:	01 2d       	mov	r16, r1
     1c4:	11 2d       	mov	r17, r1
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <__udivdi3+0xe8>
     1c8:	20 e1       	ldi	r18, 0x10	; 16
     1ca:	e2 2e       	mov	r14, r18
     1cc:	f1 2c       	mov	r15, r1
     1ce:	01 2d       	mov	r16, r1
     1d0:	11 2d       	mov	r17, r1
     1d2:	d2 01       	movw	r26, r4
     1d4:	c1 01       	movw	r24, r2
     1d6:	0e 2c       	mov	r0, r14
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__udivdi3+0xf8>
     1da:	b6 95       	lsr	r27
     1dc:	a7 95       	ror	r26
     1de:	97 95       	ror	r25
     1e0:	87 95       	ror	r24
     1e2:	0a 94       	dec	r0
     1e4:	d2 f7       	brpl	.-12     	; 0x1da <__udivdi3+0xf0>
     1e6:	85 58       	subi	r24, 0x85	; 133
     1e8:	9f 4f       	sbci	r25, 0xFF	; 255
     1ea:	dc 01       	movw	r26, r24
     1ec:	2c 91       	ld	r18, X
     1ee:	80 e2       	ldi	r24, 0x20	; 32
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	8e 19       	sub	r24, r14
     1f8:	9f 09       	sbc	r25, r15
     1fa:	a0 0b       	sbc	r26, r16
     1fc:	b1 0b       	sbc	r27, r17
     1fe:	7c 01       	movw	r14, r24
     200:	8d 01       	movw	r16, r26
     202:	e2 1a       	sub	r14, r18
     204:	f1 08       	sbc	r15, r1
     206:	01 09       	sbc	r16, r1
     208:	11 09       	sbc	r17, r1
     20a:	e1 14       	cp	r14, r1
     20c:	f1 04       	cpc	r15, r1
     20e:	01 05       	cpc	r16, r1
     210:	11 05       	cpc	r17, r1
     212:	a1 f1       	breq	.+104    	; 0x27c <__udivdi3+0x192>
     214:	0e 2c       	mov	r0, r14
     216:	04 c0       	rjmp	.+8      	; 0x220 <__udivdi3+0x136>
     218:	22 0c       	add	r2, r2
     21a:	33 1c       	adc	r3, r3
     21c:	44 1c       	adc	r4, r4
     21e:	55 1c       	adc	r5, r5
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <__udivdi3+0x12e>
     224:	a4 01       	movw	r20, r8
     226:	93 01       	movw	r18, r6
     228:	0e 2c       	mov	r0, r14
     22a:	04 c0       	rjmp	.+8      	; 0x234 <__udivdi3+0x14a>
     22c:	22 0f       	add	r18, r18
     22e:	33 1f       	adc	r19, r19
     230:	44 1f       	adc	r20, r20
     232:	55 1f       	adc	r21, r21
     234:	0a 94       	dec	r0
     236:	d2 f7       	brpl	.-12     	; 0x22c <__udivdi3+0x142>
     238:	80 e2       	ldi	r24, 0x20	; 32
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	8e 19       	sub	r24, r14
     23e:	9f 09       	sbc	r25, r15
     240:	6d a4       	ldd	r6, Y+45	; 0x2d
     242:	7e a4       	ldd	r7, Y+46	; 0x2e
     244:	8f a4       	ldd	r8, Y+47	; 0x2f
     246:	98 a8       	ldd	r9, Y+48	; 0x30
     248:	04 c0       	rjmp	.+8      	; 0x252 <__udivdi3+0x168>
     24a:	96 94       	lsr	r9
     24c:	87 94       	ror	r8
     24e:	77 94       	ror	r7
     250:	67 94       	ror	r6
     252:	8a 95       	dec	r24
     254:	d2 f7       	brpl	.-12     	; 0x24a <__udivdi3+0x160>
     256:	62 2a       	or	r6, r18
     258:	73 2a       	or	r7, r19
     25a:	84 2a       	or	r8, r20
     25c:	95 2a       	or	r9, r21
     25e:	ad a4       	ldd	r10, Y+45	; 0x2d
     260:	be a4       	ldd	r11, Y+46	; 0x2e
     262:	cf a4       	ldd	r12, Y+47	; 0x2f
     264:	d8 a8       	ldd	r13, Y+48	; 0x30
     266:	04 c0       	rjmp	.+8      	; 0x270 <__udivdi3+0x186>
     268:	aa 0c       	add	r10, r10
     26a:	bb 1c       	adc	r11, r11
     26c:	cc 1c       	adc	r12, r12
     26e:	dd 1c       	adc	r13, r13
     270:	ea 94       	dec	r14
     272:	d2 f7       	brpl	.-12     	; 0x268 <__udivdi3+0x17e>
     274:	ad a6       	std	Y+45, r10	; 0x2d
     276:	be a6       	std	Y+46, r11	; 0x2e
     278:	cf a6       	std	Y+47, r12	; 0x2f
     27a:	d8 aa       	std	Y+48, r13	; 0x30
     27c:	62 01       	movw	r12, r4
     27e:	ee 24       	eor	r14, r14
     280:	ff 24       	eor	r15, r15
     282:	cd aa       	std	Y+53, r12	; 0x35
     284:	de aa       	std	Y+54, r13	; 0x36
     286:	ef aa       	std	Y+55, r14	; 0x37
     288:	f8 ae       	std	Y+56, r15	; 0x38
     28a:	92 01       	movw	r18, r4
     28c:	81 01       	movw	r16, r2
     28e:	20 70       	andi	r18, 0x00	; 0
     290:	30 70       	andi	r19, 0x00	; 0
     292:	09 af       	std	Y+57, r16	; 0x39
     294:	1a af       	std	Y+58, r17	; 0x3a
     296:	2b af       	std	Y+59, r18	; 0x3b
     298:	3c af       	std	Y+60, r19	; 0x3c
     29a:	c4 01       	movw	r24, r8
     29c:	b3 01       	movw	r22, r6
     29e:	a7 01       	movw	r20, r14
     2a0:	96 01       	movw	r18, r12
     2a2:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     2a6:	7b 01       	movw	r14, r22
     2a8:	8c 01       	movw	r16, r24
     2aa:	c4 01       	movw	r24, r8
     2ac:	b3 01       	movw	r22, r6
     2ae:	2d a9       	ldd	r18, Y+53	; 0x35
     2b0:	3e a9       	ldd	r19, Y+54	; 0x36
     2b2:	4f a9       	ldd	r20, Y+55	; 0x37
     2b4:	58 ad       	ldd	r21, Y+56	; 0x38
     2b6:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     2ba:	c9 01       	movw	r24, r18
     2bc:	da 01       	movw	r26, r20
     2be:	3c 01       	movw	r6, r24
     2c0:	4d 01       	movw	r8, r26
     2c2:	c4 01       	movw	r24, r8
     2c4:	b3 01       	movw	r22, r6
     2c6:	29 ad       	ldd	r18, Y+57	; 0x39
     2c8:	3a ad       	ldd	r19, Y+58	; 0x3a
     2ca:	4b ad       	ldd	r20, Y+59	; 0x3b
     2cc:	5c ad       	ldd	r21, Y+60	; 0x3c
     2ce:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	87 01       	movw	r16, r14
     2d8:	ff 24       	eor	r15, r15
     2da:	ee 24       	eor	r14, r14
     2dc:	ad a4       	ldd	r10, Y+45	; 0x2d
     2de:	be a4       	ldd	r11, Y+46	; 0x2e
     2e0:	cf a4       	ldd	r12, Y+47	; 0x2f
     2e2:	d8 a8       	ldd	r13, Y+48	; 0x30
     2e4:	c6 01       	movw	r24, r12
     2e6:	aa 27       	eor	r26, r26
     2e8:	bb 27       	eor	r27, r27
     2ea:	57 01       	movw	r10, r14
     2ec:	68 01       	movw	r12, r16
     2ee:	a8 2a       	or	r10, r24
     2f0:	b9 2a       	or	r11, r25
     2f2:	ca 2a       	or	r12, r26
     2f4:	db 2a       	or	r13, r27
     2f6:	a2 16       	cp	r10, r18
     2f8:	b3 06       	cpc	r11, r19
     2fa:	c4 06       	cpc	r12, r20
     2fc:	d5 06       	cpc	r13, r21
     2fe:	e0 f4       	brcc	.+56     	; 0x338 <__udivdi3+0x24e>
     300:	08 94       	sec
     302:	61 08       	sbc	r6, r1
     304:	71 08       	sbc	r7, r1
     306:	81 08       	sbc	r8, r1
     308:	91 08       	sbc	r9, r1
     30a:	a2 0c       	add	r10, r2
     30c:	b3 1c       	adc	r11, r3
     30e:	c4 1c       	adc	r12, r4
     310:	d5 1c       	adc	r13, r5
     312:	a2 14       	cp	r10, r2
     314:	b3 04       	cpc	r11, r3
     316:	c4 04       	cpc	r12, r4
     318:	d5 04       	cpc	r13, r5
     31a:	70 f0       	brcs	.+28     	; 0x338 <__udivdi3+0x24e>
     31c:	a2 16       	cp	r10, r18
     31e:	b3 06       	cpc	r11, r19
     320:	c4 06       	cpc	r12, r20
     322:	d5 06       	cpc	r13, r21
     324:	48 f4       	brcc	.+18     	; 0x338 <__udivdi3+0x24e>
     326:	08 94       	sec
     328:	61 08       	sbc	r6, r1
     32a:	71 08       	sbc	r7, r1
     32c:	81 08       	sbc	r8, r1
     32e:	91 08       	sbc	r9, r1
     330:	a2 0c       	add	r10, r2
     332:	b3 1c       	adc	r11, r3
     334:	c4 1c       	adc	r12, r4
     336:	d5 1c       	adc	r13, r5
     338:	a2 1a       	sub	r10, r18
     33a:	b3 0a       	sbc	r11, r19
     33c:	c4 0a       	sbc	r12, r20
     33e:	d5 0a       	sbc	r13, r21
     340:	c6 01       	movw	r24, r12
     342:	b5 01       	movw	r22, r10
     344:	2d a9       	ldd	r18, Y+53	; 0x35
     346:	3e a9       	ldd	r19, Y+54	; 0x36
     348:	4f a9       	ldd	r20, Y+55	; 0x37
     34a:	58 ad       	ldd	r21, Y+56	; 0x38
     34c:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     350:	7b 01       	movw	r14, r22
     352:	8c 01       	movw	r16, r24
     354:	c6 01       	movw	r24, r12
     356:	b5 01       	movw	r22, r10
     358:	2d a9       	ldd	r18, Y+53	; 0x35
     35a:	3e a9       	ldd	r19, Y+54	; 0x36
     35c:	4f a9       	ldd	r20, Y+55	; 0x37
     35e:	58 ad       	ldd	r21, Y+56	; 0x38
     360:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     364:	c9 01       	movw	r24, r18
     366:	da 01       	movw	r26, r20
     368:	5c 01       	movw	r10, r24
     36a:	6d 01       	movw	r12, r26
     36c:	c6 01       	movw	r24, r12
     36e:	b5 01       	movw	r22, r10
     370:	29 ad       	ldd	r18, Y+57	; 0x39
     372:	3a ad       	ldd	r19, Y+58	; 0x3a
     374:	4b ad       	ldd	r20, Y+59	; 0x3b
     376:	5c ad       	ldd	r21, Y+60	; 0x3c
     378:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     37c:	9b 01       	movw	r18, r22
     37e:	ac 01       	movw	r20, r24
     380:	87 01       	movw	r16, r14
     382:	ff 24       	eor	r15, r15
     384:	ee 24       	eor	r14, r14
     386:	8d a5       	ldd	r24, Y+45	; 0x2d
     388:	9e a5       	ldd	r25, Y+46	; 0x2e
     38a:	af a5       	ldd	r26, Y+47	; 0x2f
     38c:	b8 a9       	ldd	r27, Y+48	; 0x30
     38e:	a0 70       	andi	r26, 0x00	; 0
     390:	b0 70       	andi	r27, 0x00	; 0
     392:	e8 2a       	or	r14, r24
     394:	f9 2a       	or	r15, r25
     396:	0a 2b       	or	r16, r26
     398:	1b 2b       	or	r17, r27
     39a:	e2 16       	cp	r14, r18
     39c:	f3 06       	cpc	r15, r19
     39e:	04 07       	cpc	r16, r20
     3a0:	15 07       	cpc	r17, r21
     3a2:	c0 f4       	brcc	.+48     	; 0x3d4 <__udivdi3+0x2ea>
     3a4:	08 94       	sec
     3a6:	a1 08       	sbc	r10, r1
     3a8:	b1 08       	sbc	r11, r1
     3aa:	c1 08       	sbc	r12, r1
     3ac:	d1 08       	sbc	r13, r1
     3ae:	e2 0c       	add	r14, r2
     3b0:	f3 1c       	adc	r15, r3
     3b2:	04 1d       	adc	r16, r4
     3b4:	15 1d       	adc	r17, r5
     3b6:	e2 14       	cp	r14, r2
     3b8:	f3 04       	cpc	r15, r3
     3ba:	04 05       	cpc	r16, r4
     3bc:	15 05       	cpc	r17, r5
     3be:	50 f0       	brcs	.+20     	; 0x3d4 <__udivdi3+0x2ea>
     3c0:	e2 16       	cp	r14, r18
     3c2:	f3 06       	cpc	r15, r19
     3c4:	04 07       	cpc	r16, r20
     3c6:	15 07       	cpc	r17, r21
     3c8:	28 f4       	brcc	.+10     	; 0x3d4 <__udivdi3+0x2ea>
     3ca:	08 94       	sec
     3cc:	a1 08       	sbc	r10, r1
     3ce:	b1 08       	sbc	r11, r1
     3d0:	c1 08       	sbc	r12, r1
     3d2:	d1 08       	sbc	r13, r1
     3d4:	d3 01       	movw	r26, r6
     3d6:	99 27       	eor	r25, r25
     3d8:	88 27       	eor	r24, r24
     3da:	86 01       	movw	r16, r12
     3dc:	75 01       	movw	r14, r10
     3de:	e8 2a       	or	r14, r24
     3e0:	f9 2a       	or	r15, r25
     3e2:	0a 2b       	or	r16, r26
     3e4:	1b 2b       	or	r17, r27
     3e6:	e9 aa       	std	Y+49, r14	; 0x31
     3e8:	fa aa       	std	Y+50, r15	; 0x32
     3ea:	0b ab       	std	Y+51, r16	; 0x33
     3ec:	1c ab       	std	Y+52, r17	; 0x34
     3ee:	cf c4       	rjmp	.+2462   	; 0xd8e <__stack+0x52f>
     3f0:	21 14       	cp	r2, r1
     3f2:	31 04       	cpc	r3, r1
     3f4:	41 04       	cpc	r4, r1
     3f6:	51 04       	cpc	r5, r1
     3f8:	71 f4       	brne	.+28     	; 0x416 <__udivdi3+0x32c>
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     40e:	c9 01       	movw	r24, r18
     410:	da 01       	movw	r26, r20
     412:	1c 01       	movw	r2, r24
     414:	2d 01       	movw	r4, r26
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	20 16       	cp	r2, r16
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	30 06       	cpc	r3, r16
     41e:	01 e0       	ldi	r16, 0x01	; 1
     420:	40 06       	cpc	r4, r16
     422:	00 e0       	ldi	r16, 0x00	; 0
     424:	50 06       	cpc	r5, r16
     426:	88 f4       	brcc	.+34     	; 0x44a <__udivdi3+0x360>
     428:	1f ef       	ldi	r17, 0xFF	; 255
     42a:	21 16       	cp	r2, r17
     42c:	31 04       	cpc	r3, r1
     42e:	41 04       	cpc	r4, r1
     430:	51 04       	cpc	r5, r1
     432:	31 f0       	breq	.+12     	; 0x440 <__udivdi3+0x356>
     434:	28 f0       	brcs	.+10     	; 0x440 <__udivdi3+0x356>
     436:	48 e0       	ldi	r20, 0x08	; 8
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	17 c0       	rjmp	.+46     	; 0x46e <__udivdi3+0x384>
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	12 c0       	rjmp	.+36     	; 0x46e <__udivdi3+0x384>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	22 16       	cp	r2, r18
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	32 06       	cpc	r3, r18
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	42 06       	cpc	r4, r18
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	52 06       	cpc	r5, r18
     45a:	28 f0       	brcs	.+10     	; 0x466 <__udivdi3+0x37c>
     45c:	48 e1       	ldi	r20, 0x18	; 24
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__udivdi3+0x384>
     466:	40 e1       	ldi	r20, 0x10	; 16
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	d2 01       	movw	r26, r4
     470:	c1 01       	movw	r24, r2
     472:	04 2e       	mov	r0, r20
     474:	04 c0       	rjmp	.+8      	; 0x47e <__udivdi3+0x394>
     476:	b6 95       	lsr	r27
     478:	a7 95       	ror	r26
     47a:	97 95       	ror	r25
     47c:	87 95       	ror	r24
     47e:	0a 94       	dec	r0
     480:	d2 f7       	brpl	.-12     	; 0x476 <__udivdi3+0x38c>
     482:	85 58       	subi	r24, 0x85	; 133
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	dc 01       	movw	r26, r24
     488:	2c 91       	ld	r18, X
     48a:	e0 e2       	ldi	r30, 0x20	; 32
     48c:	ee 2e       	mov	r14, r30
     48e:	f1 2c       	mov	r15, r1
     490:	01 2d       	mov	r16, r1
     492:	11 2d       	mov	r17, r1
     494:	d8 01       	movw	r26, r16
     496:	c7 01       	movw	r24, r14
     498:	84 1b       	sub	r24, r20
     49a:	95 0b       	sbc	r25, r21
     49c:	a6 0b       	sbc	r26, r22
     49e:	b7 0b       	sbc	r27, r23
     4a0:	82 1b       	sub	r24, r18
     4a2:	91 09       	sbc	r25, r1
     4a4:	a1 09       	sbc	r26, r1
     4a6:	b1 09       	sbc	r27, r1
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	61 f4       	brne	.+24     	; 0x4c8 <__udivdi3+0x3de>
     4b0:	64 01       	movw	r12, r8
     4b2:	53 01       	movw	r10, r6
     4b4:	a2 18       	sub	r10, r2
     4b6:	b3 08       	sbc	r11, r3
     4b8:	c4 08       	sbc	r12, r4
     4ba:	d5 08       	sbc	r13, r5
     4bc:	31 e0       	ldi	r19, 0x01	; 1
     4be:	63 2e       	mov	r6, r19
     4c0:	71 2c       	mov	r7, r1
     4c2:	81 2c       	mov	r8, r1
     4c4:	91 2c       	mov	r9, r1
     4c6:	1e c1       	rjmp	.+572    	; 0x704 <__udivdi3+0x61a>
     4c8:	6f 96       	adiw	r28, 0x1f	; 31
     4ca:	8f af       	std	Y+63, r24	; 0x3f
     4cc:	6f 97       	sbiw	r28, 0x1f	; 31
     4ce:	08 2e       	mov	r0, r24
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__udivdi3+0x3f0>
     4d2:	22 0c       	add	r2, r2
     4d4:	33 1c       	adc	r3, r3
     4d6:	44 1c       	adc	r4, r4
     4d8:	55 1c       	adc	r5, r5
     4da:	0a 94       	dec	r0
     4dc:	d2 f7       	brpl	.-12     	; 0x4d2 <__udivdi3+0x3e8>
     4de:	ee 2d       	mov	r30, r14
     4e0:	e8 1b       	sub	r30, r24
     4e2:	64 01       	movw	r12, r8
     4e4:	53 01       	movw	r10, r6
     4e6:	0e 2e       	mov	r0, r30
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__udivdi3+0x408>
     4ea:	d6 94       	lsr	r13
     4ec:	c7 94       	ror	r12
     4ee:	b7 94       	ror	r11
     4f0:	a7 94       	ror	r10
     4f2:	0a 94       	dec	r0
     4f4:	d2 f7       	brpl	.-12     	; 0x4ea <__udivdi3+0x400>
     4f6:	a4 01       	movw	r20, r8
     4f8:	93 01       	movw	r18, r6
     4fa:	6f 96       	adiw	r28, 0x1f	; 31
     4fc:	0f ac       	ldd	r0, Y+63	; 0x3f
     4fe:	6f 97       	sbiw	r28, 0x1f	; 31
     500:	04 c0       	rjmp	.+8      	; 0x50a <__udivdi3+0x420>
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	44 1f       	adc	r20, r20
     508:	55 1f       	adc	r21, r21
     50a:	0a 94       	dec	r0
     50c:	d2 f7       	brpl	.-12     	; 0x502 <__udivdi3+0x418>
     50e:	6d a4       	ldd	r6, Y+45	; 0x2d
     510:	7e a4       	ldd	r7, Y+46	; 0x2e
     512:	8f a4       	ldd	r8, Y+47	; 0x2f
     514:	98 a8       	ldd	r9, Y+48	; 0x30
     516:	0e 2e       	mov	r0, r30
     518:	04 c0       	rjmp	.+8      	; 0x522 <__udivdi3+0x438>
     51a:	96 94       	lsr	r9
     51c:	87 94       	ror	r8
     51e:	77 94       	ror	r7
     520:	67 94       	ror	r6
     522:	0a 94       	dec	r0
     524:	d2 f7       	brpl	.-12     	; 0x51a <__udivdi3+0x430>
     526:	84 01       	movw	r16, r8
     528:	73 01       	movw	r14, r6
     52a:	e2 2a       	or	r14, r18
     52c:	f3 2a       	or	r15, r19
     52e:	04 2b       	or	r16, r20
     530:	15 2b       	or	r17, r21
     532:	e9 a6       	std	Y+41, r14	; 0x29
     534:	fa a6       	std	Y+42, r15	; 0x2a
     536:	0b a7       	std	Y+43, r16	; 0x2b
     538:	1c a7       	std	Y+44, r17	; 0x2c
     53a:	32 01       	movw	r6, r4
     53c:	88 24       	eor	r8, r8
     53e:	99 24       	eor	r9, r9
     540:	92 01       	movw	r18, r4
     542:	81 01       	movw	r16, r2
     544:	20 70       	andi	r18, 0x00	; 0
     546:	30 70       	andi	r19, 0x00	; 0
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	0c af       	std	Y+60, r16	; 0x3c
     54c:	1d af       	std	Y+61, r17	; 0x3d
     54e:	2e af       	std	Y+62, r18	; 0x3e
     550:	3f af       	std	Y+63, r19	; 0x3f
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	c6 01       	movw	r24, r12
     556:	b5 01       	movw	r22, r10
     558:	a4 01       	movw	r20, r8
     55a:	93 01       	movw	r18, r6
     55c:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     560:	7b 01       	movw	r14, r22
     562:	8c 01       	movw	r16, r24
     564:	c6 01       	movw	r24, r12
     566:	b5 01       	movw	r22, r10
     568:	a4 01       	movw	r20, r8
     56a:	93 01       	movw	r18, r6
     56c:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     570:	c9 01       	movw	r24, r18
     572:	da 01       	movw	r26, r20
     574:	25 96       	adiw	r28, 0x05	; 5
     576:	8c af       	std	Y+60, r24	; 0x3c
     578:	9d af       	std	Y+61, r25	; 0x3d
     57a:	ae af       	std	Y+62, r26	; 0x3e
     57c:	bf af       	std	Y+63, r27	; 0x3f
     57e:	25 97       	sbiw	r28, 0x05	; 5
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	2c ad       	ldd	r18, Y+60	; 0x3c
     588:	3d ad       	ldd	r19, Y+61	; 0x3d
     58a:	4e ad       	ldd	r20, Y+62	; 0x3e
     58c:	5f ad       	ldd	r21, Y+63	; 0x3f
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     594:	9b 01       	movw	r18, r22
     596:	ac 01       	movw	r20, r24
     598:	87 01       	movw	r16, r14
     59a:	ff 24       	eor	r15, r15
     59c:	ee 24       	eor	r14, r14
     59e:	a9 a4       	ldd	r10, Y+41	; 0x29
     5a0:	ba a4       	ldd	r11, Y+42	; 0x2a
     5a2:	cb a4       	ldd	r12, Y+43	; 0x2b
     5a4:	dc a4       	ldd	r13, Y+44	; 0x2c
     5a6:	c6 01       	movw	r24, r12
     5a8:	aa 27       	eor	r26, r26
     5aa:	bb 27       	eor	r27, r27
     5ac:	5c 01       	movw	r10, r24
     5ae:	6d 01       	movw	r12, r26
     5b0:	ae 28       	or	r10, r14
     5b2:	bf 28       	or	r11, r15
     5b4:	c0 2a       	or	r12, r16
     5b6:	d1 2a       	or	r13, r17
     5b8:	a2 16       	cp	r10, r18
     5ba:	b3 06       	cpc	r11, r19
     5bc:	c4 06       	cpc	r12, r20
     5be:	d5 06       	cpc	r13, r21
     5c0:	60 f5       	brcc	.+88     	; 0x61a <__udivdi3+0x530>
     5c2:	25 96       	adiw	r28, 0x05	; 5
     5c4:	6c ad       	ldd	r22, Y+60	; 0x3c
     5c6:	7d ad       	ldd	r23, Y+61	; 0x3d
     5c8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ca:	9f ad       	ldd	r25, Y+63	; 0x3f
     5cc:	25 97       	sbiw	r28, 0x05	; 5
     5ce:	61 50       	subi	r22, 0x01	; 1
     5d0:	70 40       	sbci	r23, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	25 96       	adiw	r28, 0x05	; 5
     5d8:	6c af       	std	Y+60, r22	; 0x3c
     5da:	7d af       	std	Y+61, r23	; 0x3d
     5dc:	8e af       	std	Y+62, r24	; 0x3e
     5de:	9f af       	std	Y+63, r25	; 0x3f
     5e0:	25 97       	sbiw	r28, 0x05	; 5
     5e2:	a2 0c       	add	r10, r2
     5e4:	b3 1c       	adc	r11, r3
     5e6:	c4 1c       	adc	r12, r4
     5e8:	d5 1c       	adc	r13, r5
     5ea:	a2 14       	cp	r10, r2
     5ec:	b3 04       	cpc	r11, r3
     5ee:	c4 04       	cpc	r12, r4
     5f0:	d5 04       	cpc	r13, r5
     5f2:	98 f0       	brcs	.+38     	; 0x61a <__udivdi3+0x530>
     5f4:	a2 16       	cp	r10, r18
     5f6:	b3 06       	cpc	r11, r19
     5f8:	c4 06       	cpc	r12, r20
     5fa:	d5 06       	cpc	r13, r21
     5fc:	70 f4       	brcc	.+28     	; 0x61a <__udivdi3+0x530>
     5fe:	61 50       	subi	r22, 0x01	; 1
     600:	70 40       	sbci	r23, 0x00	; 0
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	25 96       	adiw	r28, 0x05	; 5
     608:	6c af       	std	Y+60, r22	; 0x3c
     60a:	7d af       	std	Y+61, r23	; 0x3d
     60c:	8e af       	std	Y+62, r24	; 0x3e
     60e:	9f af       	std	Y+63, r25	; 0x3f
     610:	25 97       	sbiw	r28, 0x05	; 5
     612:	a2 0c       	add	r10, r2
     614:	b3 1c       	adc	r11, r3
     616:	c4 1c       	adc	r12, r4
     618:	d5 1c       	adc	r13, r5
     61a:	a2 1a       	sub	r10, r18
     61c:	b3 0a       	sbc	r11, r19
     61e:	c4 0a       	sbc	r12, r20
     620:	d5 0a       	sbc	r13, r21
     622:	c6 01       	movw	r24, r12
     624:	b5 01       	movw	r22, r10
     626:	a4 01       	movw	r20, r8
     628:	93 01       	movw	r18, r6
     62a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     62e:	7b 01       	movw	r14, r22
     630:	8c 01       	movw	r16, r24
     632:	c6 01       	movw	r24, r12
     634:	b5 01       	movw	r22, r10
     636:	a4 01       	movw	r20, r8
     638:	93 01       	movw	r18, r6
     63a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     63e:	c9 01       	movw	r24, r18
     640:	da 01       	movw	r26, r20
     642:	3c 01       	movw	r6, r24
     644:	4d 01       	movw	r8, r26
     646:	c4 01       	movw	r24, r8
     648:	b3 01       	movw	r22, r6
     64a:	21 96       	adiw	r28, 0x01	; 1
     64c:	2c ad       	ldd	r18, Y+60	; 0x3c
     64e:	3d ad       	ldd	r19, Y+61	; 0x3d
     650:	4e ad       	ldd	r20, Y+62	; 0x3e
     652:	5f ad       	ldd	r21, Y+63	; 0x3f
     654:	21 97       	sbiw	r28, 0x01	; 1
     656:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	87 01       	movw	r16, r14
     660:	ff 24       	eor	r15, r15
     662:	ee 24       	eor	r14, r14
     664:	89 a5       	ldd	r24, Y+41	; 0x29
     666:	9a a5       	ldd	r25, Y+42	; 0x2a
     668:	ab a5       	ldd	r26, Y+43	; 0x2b
     66a:	bc a5       	ldd	r27, Y+44	; 0x2c
     66c:	a0 70       	andi	r26, 0x00	; 0
     66e:	b0 70       	andi	r27, 0x00	; 0
     670:	57 01       	movw	r10, r14
     672:	68 01       	movw	r12, r16
     674:	a8 2a       	or	r10, r24
     676:	b9 2a       	or	r11, r25
     678:	ca 2a       	or	r12, r26
     67a:	db 2a       	or	r13, r27
     67c:	a2 16       	cp	r10, r18
     67e:	b3 06       	cpc	r11, r19
     680:	c4 06       	cpc	r12, r20
     682:	d5 06       	cpc	r13, r21
     684:	e0 f4       	brcc	.+56     	; 0x6be <__udivdi3+0x5d4>
     686:	08 94       	sec
     688:	61 08       	sbc	r6, r1
     68a:	71 08       	sbc	r7, r1
     68c:	81 08       	sbc	r8, r1
     68e:	91 08       	sbc	r9, r1
     690:	a2 0c       	add	r10, r2
     692:	b3 1c       	adc	r11, r3
     694:	c4 1c       	adc	r12, r4
     696:	d5 1c       	adc	r13, r5
     698:	a2 14       	cp	r10, r2
     69a:	b3 04       	cpc	r11, r3
     69c:	c4 04       	cpc	r12, r4
     69e:	d5 04       	cpc	r13, r5
     6a0:	70 f0       	brcs	.+28     	; 0x6be <__udivdi3+0x5d4>
     6a2:	a2 16       	cp	r10, r18
     6a4:	b3 06       	cpc	r11, r19
     6a6:	c4 06       	cpc	r12, r20
     6a8:	d5 06       	cpc	r13, r21
     6aa:	48 f4       	brcc	.+18     	; 0x6be <__udivdi3+0x5d4>
     6ac:	08 94       	sec
     6ae:	61 08       	sbc	r6, r1
     6b0:	71 08       	sbc	r7, r1
     6b2:	81 08       	sbc	r8, r1
     6b4:	91 08       	sbc	r9, r1
     6b6:	a2 0c       	add	r10, r2
     6b8:	b3 1c       	adc	r11, r3
     6ba:	c4 1c       	adc	r12, r4
     6bc:	d5 1c       	adc	r13, r5
     6be:	8d a5       	ldd	r24, Y+45	; 0x2d
     6c0:	9e a5       	ldd	r25, Y+46	; 0x2e
     6c2:	af a5       	ldd	r26, Y+47	; 0x2f
     6c4:	b8 a9       	ldd	r27, Y+48	; 0x30
     6c6:	6f 96       	adiw	r28, 0x1f	; 31
     6c8:	0f ac       	ldd	r0, Y+63	; 0x3f
     6ca:	6f 97       	sbiw	r28, 0x1f	; 31
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__udivdi3+0x5ec>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	aa 1f       	adc	r26, r26
     6d4:	bb 1f       	adc	r27, r27
     6d6:	0a 94       	dec	r0
     6d8:	d2 f7       	brpl	.-12     	; 0x6ce <__udivdi3+0x5e4>
     6da:	8d a7       	std	Y+45, r24	; 0x2d
     6dc:	9e a7       	std	Y+46, r25	; 0x2e
     6de:	af a7       	std	Y+47, r26	; 0x2f
     6e0:	b8 ab       	std	Y+48, r27	; 0x30
     6e2:	a2 1a       	sub	r10, r18
     6e4:	b3 0a       	sbc	r11, r19
     6e6:	c4 0a       	sbc	r12, r20
     6e8:	d5 0a       	sbc	r13, r21
     6ea:	25 96       	adiw	r28, 0x05	; 5
     6ec:	ec ac       	ldd	r14, Y+60	; 0x3c
     6ee:	fd ac       	ldd	r15, Y+61	; 0x3d
     6f0:	0e ad       	ldd	r16, Y+62	; 0x3e
     6f2:	1f ad       	ldd	r17, Y+63	; 0x3f
     6f4:	25 97       	sbiw	r28, 0x05	; 5
     6f6:	d7 01       	movw	r26, r14
     6f8:	99 27       	eor	r25, r25
     6fa:	88 27       	eor	r24, r24
     6fc:	68 2a       	or	r6, r24
     6fe:	79 2a       	or	r7, r25
     700:	8a 2a       	or	r8, r26
     702:	9b 2a       	or	r9, r27
     704:	82 01       	movw	r16, r4
     706:	22 27       	eor	r18, r18
     708:	33 27       	eor	r19, r19
     70a:	29 96       	adiw	r28, 0x09	; 9
     70c:	0c af       	std	Y+60, r16	; 0x3c
     70e:	1d af       	std	Y+61, r17	; 0x3d
     710:	2e af       	std	Y+62, r18	; 0x3e
     712:	3f af       	std	Y+63, r19	; 0x3f
     714:	29 97       	sbiw	r28, 0x09	; 9
     716:	a2 01       	movw	r20, r4
     718:	91 01       	movw	r18, r2
     71a:	40 70       	andi	r20, 0x00	; 0
     71c:	50 70       	andi	r21, 0x00	; 0
     71e:	2d 96       	adiw	r28, 0x0d	; 13
     720:	2c af       	std	Y+60, r18	; 0x3c
     722:	3d af       	std	Y+61, r19	; 0x3d
     724:	4e af       	std	Y+62, r20	; 0x3e
     726:	5f af       	std	Y+63, r21	; 0x3f
     728:	2d 97       	sbiw	r28, 0x0d	; 13
     72a:	c6 01       	movw	r24, r12
     72c:	b5 01       	movw	r22, r10
     72e:	29 96       	adiw	r28, 0x09	; 9
     730:	2c ad       	ldd	r18, Y+60	; 0x3c
     732:	3d ad       	ldd	r19, Y+61	; 0x3d
     734:	4e ad       	ldd	r20, Y+62	; 0x3e
     736:	5f ad       	ldd	r21, Y+63	; 0x3f
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     73e:	7b 01       	movw	r14, r22
     740:	8c 01       	movw	r16, r24
     742:	c6 01       	movw	r24, r12
     744:	b5 01       	movw	r22, r10
     746:	29 96       	adiw	r28, 0x09	; 9
     748:	2c ad       	ldd	r18, Y+60	; 0x3c
     74a:	3d ad       	ldd	r19, Y+61	; 0x3d
     74c:	4e ad       	ldd	r20, Y+62	; 0x3e
     74e:	5f ad       	ldd	r21, Y+63	; 0x3f
     750:	29 97       	sbiw	r28, 0x09	; 9
     752:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     756:	c9 01       	movw	r24, r18
     758:	da 01       	movw	r26, r20
     75a:	61 96       	adiw	r28, 0x11	; 17
     75c:	8c af       	std	Y+60, r24	; 0x3c
     75e:	9d af       	std	Y+61, r25	; 0x3d
     760:	ae af       	std	Y+62, r26	; 0x3e
     762:	bf af       	std	Y+63, r27	; 0x3f
     764:	61 97       	sbiw	r28, 0x11	; 17
     766:	bc 01       	movw	r22, r24
     768:	cd 01       	movw	r24, r26
     76a:	2d 96       	adiw	r28, 0x0d	; 13
     76c:	2c ad       	ldd	r18, Y+60	; 0x3c
     76e:	3d ad       	ldd	r19, Y+61	; 0x3d
     770:	4e ad       	ldd	r20, Y+62	; 0x3e
     772:	5f ad       	ldd	r21, Y+63	; 0x3f
     774:	2d 97       	sbiw	r28, 0x0d	; 13
     776:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	87 01       	movw	r16, r14
     780:	ff 24       	eor	r15, r15
     782:	ee 24       	eor	r14, r14
     784:	ad a4       	ldd	r10, Y+45	; 0x2d
     786:	be a4       	ldd	r11, Y+46	; 0x2e
     788:	cf a4       	ldd	r12, Y+47	; 0x2f
     78a:	d8 a8       	ldd	r13, Y+48	; 0x30
     78c:	c6 01       	movw	r24, r12
     78e:	aa 27       	eor	r26, r26
     790:	bb 27       	eor	r27, r27
     792:	57 01       	movw	r10, r14
     794:	68 01       	movw	r12, r16
     796:	a8 2a       	or	r10, r24
     798:	b9 2a       	or	r11, r25
     79a:	ca 2a       	or	r12, r26
     79c:	db 2a       	or	r13, r27
     79e:	a2 16       	cp	r10, r18
     7a0:	b3 06       	cpc	r11, r19
     7a2:	c4 06       	cpc	r12, r20
     7a4:	d5 06       	cpc	r13, r21
     7a6:	60 f5       	brcc	.+88     	; 0x800 <__udivdi3+0x716>
     7a8:	61 96       	adiw	r28, 0x11	; 17
     7aa:	6c ad       	ldd	r22, Y+60	; 0x3c
     7ac:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ae:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7b2:	61 97       	sbiw	r28, 0x11	; 17
     7b4:	61 50       	subi	r22, 0x01	; 1
     7b6:	70 40       	sbci	r23, 0x00	; 0
     7b8:	80 40       	sbci	r24, 0x00	; 0
     7ba:	90 40       	sbci	r25, 0x00	; 0
     7bc:	61 96       	adiw	r28, 0x11	; 17
     7be:	6c af       	std	Y+60, r22	; 0x3c
     7c0:	7d af       	std	Y+61, r23	; 0x3d
     7c2:	8e af       	std	Y+62, r24	; 0x3e
     7c4:	9f af       	std	Y+63, r25	; 0x3f
     7c6:	61 97       	sbiw	r28, 0x11	; 17
     7c8:	a2 0c       	add	r10, r2
     7ca:	b3 1c       	adc	r11, r3
     7cc:	c4 1c       	adc	r12, r4
     7ce:	d5 1c       	adc	r13, r5
     7d0:	a2 14       	cp	r10, r2
     7d2:	b3 04       	cpc	r11, r3
     7d4:	c4 04       	cpc	r12, r4
     7d6:	d5 04       	cpc	r13, r5
     7d8:	98 f0       	brcs	.+38     	; 0x800 <__udivdi3+0x716>
     7da:	a2 16       	cp	r10, r18
     7dc:	b3 06       	cpc	r11, r19
     7de:	c4 06       	cpc	r12, r20
     7e0:	d5 06       	cpc	r13, r21
     7e2:	70 f4       	brcc	.+28     	; 0x800 <__udivdi3+0x716>
     7e4:	61 50       	subi	r22, 0x01	; 1
     7e6:	70 40       	sbci	r23, 0x00	; 0
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	90 40       	sbci	r25, 0x00	; 0
     7ec:	61 96       	adiw	r28, 0x11	; 17
     7ee:	6c af       	std	Y+60, r22	; 0x3c
     7f0:	7d af       	std	Y+61, r23	; 0x3d
     7f2:	8e af       	std	Y+62, r24	; 0x3e
     7f4:	9f af       	std	Y+63, r25	; 0x3f
     7f6:	61 97       	sbiw	r28, 0x11	; 17
     7f8:	a2 0c       	add	r10, r2
     7fa:	b3 1c       	adc	r11, r3
     7fc:	c4 1c       	adc	r12, r4
     7fe:	d5 1c       	adc	r13, r5
     800:	a2 1a       	sub	r10, r18
     802:	b3 0a       	sbc	r11, r19
     804:	c4 0a       	sbc	r12, r20
     806:	d5 0a       	sbc	r13, r21
     808:	c6 01       	movw	r24, r12
     80a:	b5 01       	movw	r22, r10
     80c:	29 96       	adiw	r28, 0x09	; 9
     80e:	2c ad       	ldd	r18, Y+60	; 0x3c
     810:	3d ad       	ldd	r19, Y+61	; 0x3d
     812:	4e ad       	ldd	r20, Y+62	; 0x3e
     814:	5f ad       	ldd	r21, Y+63	; 0x3f
     816:	29 97       	sbiw	r28, 0x09	; 9
     818:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     81c:	7b 01       	movw	r14, r22
     81e:	8c 01       	movw	r16, r24
     820:	c6 01       	movw	r24, r12
     822:	b5 01       	movw	r22, r10
     824:	29 96       	adiw	r28, 0x09	; 9
     826:	2c ad       	ldd	r18, Y+60	; 0x3c
     828:	3d ad       	ldd	r19, Y+61	; 0x3d
     82a:	4e ad       	ldd	r20, Y+62	; 0x3e
     82c:	5f ad       	ldd	r21, Y+63	; 0x3f
     82e:	29 97       	sbiw	r28, 0x09	; 9
     830:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     834:	c9 01       	movw	r24, r18
     836:	da 01       	movw	r26, r20
     838:	5c 01       	movw	r10, r24
     83a:	6d 01       	movw	r12, r26
     83c:	c6 01       	movw	r24, r12
     83e:	b5 01       	movw	r22, r10
     840:	2d 96       	adiw	r28, 0x0d	; 13
     842:	2c ad       	ldd	r18, Y+60	; 0x3c
     844:	3d ad       	ldd	r19, Y+61	; 0x3d
     846:	4e ad       	ldd	r20, Y+62	; 0x3e
     848:	5f ad       	ldd	r21, Y+63	; 0x3f
     84a:	2d 97       	sbiw	r28, 0x0d	; 13
     84c:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	87 01       	movw	r16, r14
     856:	ff 24       	eor	r15, r15
     858:	ee 24       	eor	r14, r14
     85a:	8d a5       	ldd	r24, Y+45	; 0x2d
     85c:	9e a5       	ldd	r25, Y+46	; 0x2e
     85e:	af a5       	ldd	r26, Y+47	; 0x2f
     860:	b8 a9       	ldd	r27, Y+48	; 0x30
     862:	a0 70       	andi	r26, 0x00	; 0
     864:	b0 70       	andi	r27, 0x00	; 0
     866:	e8 2a       	or	r14, r24
     868:	f9 2a       	or	r15, r25
     86a:	0a 2b       	or	r16, r26
     86c:	1b 2b       	or	r17, r27
     86e:	e2 16       	cp	r14, r18
     870:	f3 06       	cpc	r15, r19
     872:	04 07       	cpc	r16, r20
     874:	15 07       	cpc	r17, r21
     876:	c0 f4       	brcc	.+48     	; 0x8a8 <__stack+0x49>
     878:	08 94       	sec
     87a:	a1 08       	sbc	r10, r1
     87c:	b1 08       	sbc	r11, r1
     87e:	c1 08       	sbc	r12, r1
     880:	d1 08       	sbc	r13, r1
     882:	e2 0c       	add	r14, r2
     884:	f3 1c       	adc	r15, r3
     886:	04 1d       	adc	r16, r4
     888:	15 1d       	adc	r17, r5
     88a:	e2 14       	cp	r14, r2
     88c:	f3 04       	cpc	r15, r3
     88e:	04 05       	cpc	r16, r4
     890:	15 05       	cpc	r17, r5
     892:	50 f0       	brcs	.+20     	; 0x8a8 <__stack+0x49>
     894:	e2 16       	cp	r14, r18
     896:	f3 06       	cpc	r15, r19
     898:	04 07       	cpc	r16, r20
     89a:	15 07       	cpc	r17, r21
     89c:	28 f4       	brcc	.+10     	; 0x8a8 <__stack+0x49>
     89e:	08 94       	sec
     8a0:	a1 08       	sbc	r10, r1
     8a2:	b1 08       	sbc	r11, r1
     8a4:	c1 08       	sbc	r12, r1
     8a6:	d1 08       	sbc	r13, r1
     8a8:	61 96       	adiw	r28, 0x11	; 17
     8aa:	ec ac       	ldd	r14, Y+60	; 0x3c
     8ac:	fd ac       	ldd	r15, Y+61	; 0x3d
     8ae:	0e ad       	ldd	r16, Y+62	; 0x3e
     8b0:	1f ad       	ldd	r17, Y+63	; 0x3f
     8b2:	61 97       	sbiw	r28, 0x11	; 17
     8b4:	d7 01       	movw	r26, r14
     8b6:	99 27       	eor	r25, r25
     8b8:	88 27       	eor	r24, r24
     8ba:	96 01       	movw	r18, r12
     8bc:	85 01       	movw	r16, r10
     8be:	08 2b       	or	r16, r24
     8c0:	19 2b       	or	r17, r25
     8c2:	2a 2b       	or	r18, r26
     8c4:	3b 2b       	or	r19, r27
     8c6:	09 ab       	std	Y+49, r16	; 0x31
     8c8:	1a ab       	std	Y+50, r17	; 0x32
     8ca:	2b ab       	std	Y+51, r18	; 0x33
     8cc:	3c ab       	std	Y+52, r19	; 0x34
     8ce:	62 c2       	rjmp	.+1220   	; 0xd94 <__stack+0x535>
     8d0:	6e 14       	cp	r6, r14
     8d2:	7f 04       	cpc	r7, r15
     8d4:	80 06       	cpc	r8, r16
     8d6:	91 06       	cpc	r9, r17
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <__stack+0x7d>
     8da:	51 c2       	rjmp	.+1186   	; 0xd7e <__stack+0x51f>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	e2 16       	cp	r14, r18
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	f2 06       	cpc	r15, r18
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	02 07       	cpc	r16, r18
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	12 07       	cpc	r17, r18
     8ec:	88 f4       	brcc	.+34     	; 0x910 <__stack+0xb1>
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	e3 16       	cp	r14, r19
     8f2:	f1 04       	cpc	r15, r1
     8f4:	01 05       	cpc	r16, r1
     8f6:	11 05       	cpc	r17, r1
     8f8:	31 f0       	breq	.+12     	; 0x906 <__stack+0xa7>
     8fa:	28 f0       	brcs	.+10     	; 0x906 <__stack+0xa7>
     8fc:	48 e0       	ldi	r20, 0x08	; 8
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	17 c0       	rjmp	.+46     	; 0x934 <__stack+0xd5>
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	12 c0       	rjmp	.+36     	; 0x934 <__stack+0xd5>
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	e4 16       	cp	r14, r20
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	f4 06       	cpc	r15, r20
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	04 07       	cpc	r16, r20
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	14 07       	cpc	r17, r20
     920:	28 f0       	brcs	.+10     	; 0x92c <__stack+0xcd>
     922:	48 e1       	ldi	r20, 0x18	; 24
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0xd5>
     92c:	40 e1       	ldi	r20, 0x10	; 16
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	d8 01       	movw	r26, r16
     936:	c7 01       	movw	r24, r14
     938:	04 2e       	mov	r0, r20
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0xe5>
     93c:	b6 95       	lsr	r27
     93e:	a7 95       	ror	r26
     940:	97 95       	ror	r25
     942:	87 95       	ror	r24
     944:	0a 94       	dec	r0
     946:	d2 f7       	brpl	.-12     	; 0x93c <__stack+0xdd>
     948:	85 58       	subi	r24, 0x85	; 133
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	dc 01       	movw	r26, r24
     94e:	2c 91       	ld	r18, X
     950:	30 e2       	ldi	r19, 0x20	; 32
     952:	a3 2e       	mov	r10, r19
     954:	b1 2c       	mov	r11, r1
     956:	c1 2c       	mov	r12, r1
     958:	d1 2c       	mov	r13, r1
     95a:	d6 01       	movw	r26, r12
     95c:	c5 01       	movw	r24, r10
     95e:	84 1b       	sub	r24, r20
     960:	95 0b       	sbc	r25, r21
     962:	a6 0b       	sbc	r26, r22
     964:	b7 0b       	sbc	r27, r23
     966:	82 1b       	sub	r24, r18
     968:	91 09       	sbc	r25, r1
     96a:	a1 09       	sbc	r26, r1
     96c:	b1 09       	sbc	r27, r1
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	a1 05       	cpc	r26, r1
     972:	b1 05       	cpc	r27, r1
     974:	89 f4       	brne	.+34     	; 0x998 <__stack+0x139>
     976:	e6 14       	cp	r14, r6
     978:	f7 04       	cpc	r15, r7
     97a:	08 05       	cpc	r16, r8
     97c:	19 05       	cpc	r17, r9
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	f2 c1       	rjmp	.+996    	; 0xd66 <__stack+0x507>
     982:	6d a4       	ldd	r6, Y+45	; 0x2d
     984:	7e a4       	ldd	r7, Y+46	; 0x2e
     986:	8f a4       	ldd	r8, Y+47	; 0x2f
     988:	98 a8       	ldd	r9, Y+48	; 0x30
     98a:	62 14       	cp	r6, r2
     98c:	73 04       	cpc	r7, r3
     98e:	84 04       	cpc	r8, r4
     990:	95 04       	cpc	r9, r5
     992:	08 f0       	brcs	.+2      	; 0x996 <__stack+0x137>
     994:	e8 c1       	rjmp	.+976    	; 0xd66 <__stack+0x507>
     996:	f3 c1       	rjmp	.+998    	; 0xd7e <__stack+0x51f>
     998:	6e 96       	adiw	r28, 0x1e	; 30
     99a:	8f af       	std	Y+63, r24	; 0x3f
     99c:	6e 97       	sbiw	r28, 0x1e	; 30
     99e:	08 2e       	mov	r0, r24
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__stack+0x14b>
     9a2:	ee 0c       	add	r14, r14
     9a4:	ff 1c       	adc	r15, r15
     9a6:	00 1f       	adc	r16, r16
     9a8:	11 1f       	adc	r17, r17
     9aa:	0a 94       	dec	r0
     9ac:	d2 f7       	brpl	.-12     	; 0x9a2 <__stack+0x143>
     9ae:	6a 2d       	mov	r22, r10
     9b0:	68 1b       	sub	r22, r24
     9b2:	d2 01       	movw	r26, r4
     9b4:	c1 01       	movw	r24, r2
     9b6:	06 2e       	mov	r0, r22
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__stack+0x163>
     9ba:	b6 95       	lsr	r27
     9bc:	a7 95       	ror	r26
     9be:	97 95       	ror	r25
     9c0:	87 95       	ror	r24
     9c2:	0a 94       	dec	r0
     9c4:	d2 f7       	brpl	.-12     	; 0x9ba <__stack+0x15b>
     9c6:	5c 01       	movw	r10, r24
     9c8:	6d 01       	movw	r12, r26
     9ca:	ae 28       	or	r10, r14
     9cc:	bf 28       	or	r11, r15
     9ce:	c0 2a       	or	r12, r16
     9d0:	d1 2a       	or	r13, r17
     9d2:	ad a2       	std	Y+37, r10	; 0x25
     9d4:	be a2       	std	Y+38, r11	; 0x26
     9d6:	cf a2       	std	Y+39, r12	; 0x27
     9d8:	d8 a6       	std	Y+40, r13	; 0x28
     9da:	72 01       	movw	r14, r4
     9dc:	61 01       	movw	r12, r2
     9de:	6e 96       	adiw	r28, 0x1e	; 30
     9e0:	0f ac       	ldd	r0, Y+63	; 0x3f
     9e2:	6e 97       	sbiw	r28, 0x1e	; 30
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__stack+0x18f>
     9e6:	cc 0c       	add	r12, r12
     9e8:	dd 1c       	adc	r13, r13
     9ea:	ee 1c       	adc	r14, r14
     9ec:	ff 1c       	adc	r15, r15
     9ee:	0a 94       	dec	r0
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__stack+0x187>
     9f2:	c9 a2       	std	Y+33, r12	; 0x21
     9f4:	da a2       	std	Y+34, r13	; 0x22
     9f6:	eb a2       	std	Y+35, r14	; 0x23
     9f8:	fc a2       	std	Y+36, r15	; 0x24
     9fa:	64 01       	movw	r12, r8
     9fc:	53 01       	movw	r10, r6
     9fe:	06 2e       	mov	r0, r22
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__stack+0x1ab>
     a02:	d6 94       	lsr	r13
     a04:	c7 94       	ror	r12
     a06:	b7 94       	ror	r11
     a08:	a7 94       	ror	r10
     a0a:	0a 94       	dec	r0
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__stack+0x1a3>
     a0e:	d4 01       	movw	r26, r8
     a10:	c3 01       	movw	r24, r6
     a12:	6e 96       	adiw	r28, 0x1e	; 30
     a14:	0f ac       	ldd	r0, Y+63	; 0x3f
     a16:	6e 97       	sbiw	r28, 0x1e	; 30
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <__stack+0x1c3>
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	aa 1f       	adc	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	0a 94       	dec	r0
     a24:	d2 f7       	brpl	.-12     	; 0xa1a <__stack+0x1bb>
     a26:	ed a4       	ldd	r14, Y+45	; 0x2d
     a28:	fe a4       	ldd	r15, Y+46	; 0x2e
     a2a:	0f a5       	ldd	r16, Y+47	; 0x2f
     a2c:	18 a9       	ldd	r17, Y+48	; 0x30
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__stack+0x1d9>
     a30:	16 95       	lsr	r17
     a32:	07 95       	ror	r16
     a34:	f7 94       	ror	r15
     a36:	e7 94       	ror	r14
     a38:	6a 95       	dec	r22
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__stack+0x1d1>
     a3c:	37 01       	movw	r6, r14
     a3e:	48 01       	movw	r8, r16
     a40:	68 2a       	or	r6, r24
     a42:	79 2a       	or	r7, r25
     a44:	8a 2a       	or	r8, r26
     a46:	9b 2a       	or	r9, r27
     a48:	6d 8e       	std	Y+29, r6	; 0x1d
     a4a:	7e 8e       	std	Y+30, r7	; 0x1e
     a4c:	8f 8e       	std	Y+31, r8	; 0x1f
     a4e:	98 a2       	std	Y+32, r9	; 0x20
     a50:	ed a0       	ldd	r14, Y+37	; 0x25
     a52:	fe a0       	ldd	r15, Y+38	; 0x26
     a54:	0f a1       	ldd	r16, Y+39	; 0x27
     a56:	18 a5       	ldd	r17, Y+40	; 0x28
     a58:	38 01       	movw	r6, r16
     a5a:	88 24       	eor	r8, r8
     a5c:	99 24       	eor	r9, r9
     a5e:	98 01       	movw	r18, r16
     a60:	87 01       	movw	r16, r14
     a62:	20 70       	andi	r18, 0x00	; 0
     a64:	30 70       	andi	r19, 0x00	; 0
     a66:	65 96       	adiw	r28, 0x15	; 21
     a68:	0c af       	std	Y+60, r16	; 0x3c
     a6a:	1d af       	std	Y+61, r17	; 0x3d
     a6c:	2e af       	std	Y+62, r18	; 0x3e
     a6e:	3f af       	std	Y+63, r19	; 0x3f
     a70:	65 97       	sbiw	r28, 0x15	; 21
     a72:	c6 01       	movw	r24, r12
     a74:	b5 01       	movw	r22, r10
     a76:	a4 01       	movw	r20, r8
     a78:	93 01       	movw	r18, r6
     a7a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     a7e:	7b 01       	movw	r14, r22
     a80:	8c 01       	movw	r16, r24
     a82:	c6 01       	movw	r24, r12
     a84:	b5 01       	movw	r22, r10
     a86:	a4 01       	movw	r20, r8
     a88:	93 01       	movw	r18, r6
     a8a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     a8e:	c9 01       	movw	r24, r18
     a90:	da 01       	movw	r26, r20
     a92:	1c 01       	movw	r2, r24
     a94:	2d 01       	movw	r4, r26
     a96:	c2 01       	movw	r24, r4
     a98:	b1 01       	movw	r22, r2
     a9a:	65 96       	adiw	r28, 0x15	; 21
     a9c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9e:	3d ad       	ldd	r19, Y+61	; 0x3d
     aa0:	4e ad       	ldd	r20, Y+62	; 0x3e
     aa2:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa4:	65 97       	sbiw	r28, 0x15	; 21
     aa6:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	87 01       	movw	r16, r14
     ab0:	ff 24       	eor	r15, r15
     ab2:	ee 24       	eor	r14, r14
     ab4:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ab6:	be 8c       	ldd	r11, Y+30	; 0x1e
     ab8:	cf 8c       	ldd	r12, Y+31	; 0x1f
     aba:	d8 a0       	ldd	r13, Y+32	; 0x20
     abc:	c6 01       	movw	r24, r12
     abe:	aa 27       	eor	r26, r26
     ac0:	bb 27       	eor	r27, r27
     ac2:	57 01       	movw	r10, r14
     ac4:	68 01       	movw	r12, r16
     ac6:	a8 2a       	or	r10, r24
     ac8:	b9 2a       	or	r11, r25
     aca:	ca 2a       	or	r12, r26
     acc:	db 2a       	or	r13, r27
     ace:	a2 16       	cp	r10, r18
     ad0:	b3 06       	cpc	r11, r19
     ad2:	c4 06       	cpc	r12, r20
     ad4:	d5 06       	cpc	r13, r21
     ad6:	00 f5       	brcc	.+64     	; 0xb18 <__stack+0x2b9>
     ad8:	08 94       	sec
     ada:	21 08       	sbc	r2, r1
     adc:	31 08       	sbc	r3, r1
     ade:	41 08       	sbc	r4, r1
     ae0:	51 08       	sbc	r5, r1
     ae2:	ed a0       	ldd	r14, Y+37	; 0x25
     ae4:	fe a0       	ldd	r15, Y+38	; 0x26
     ae6:	0f a1       	ldd	r16, Y+39	; 0x27
     ae8:	18 a5       	ldd	r17, Y+40	; 0x28
     aea:	ae 0c       	add	r10, r14
     aec:	bf 1c       	adc	r11, r15
     aee:	c0 1e       	adc	r12, r16
     af0:	d1 1e       	adc	r13, r17
     af2:	ae 14       	cp	r10, r14
     af4:	bf 04       	cpc	r11, r15
     af6:	c0 06       	cpc	r12, r16
     af8:	d1 06       	cpc	r13, r17
     afa:	70 f0       	brcs	.+28     	; 0xb18 <__stack+0x2b9>
     afc:	a2 16       	cp	r10, r18
     afe:	b3 06       	cpc	r11, r19
     b00:	c4 06       	cpc	r12, r20
     b02:	d5 06       	cpc	r13, r21
     b04:	48 f4       	brcc	.+18     	; 0xb18 <__stack+0x2b9>
     b06:	08 94       	sec
     b08:	21 08       	sbc	r2, r1
     b0a:	31 08       	sbc	r3, r1
     b0c:	41 08       	sbc	r4, r1
     b0e:	51 08       	sbc	r5, r1
     b10:	ae 0c       	add	r10, r14
     b12:	bf 1c       	adc	r11, r15
     b14:	c0 1e       	adc	r12, r16
     b16:	d1 1e       	adc	r13, r17
     b18:	a2 1a       	sub	r10, r18
     b1a:	b3 0a       	sbc	r11, r19
     b1c:	c4 0a       	sbc	r12, r20
     b1e:	d5 0a       	sbc	r13, r21
     b20:	c6 01       	movw	r24, r12
     b22:	b5 01       	movw	r22, r10
     b24:	a4 01       	movw	r20, r8
     b26:	93 01       	movw	r18, r6
     b28:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     b2c:	7b 01       	movw	r14, r22
     b2e:	8c 01       	movw	r16, r24
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	a4 01       	movw	r20, r8
     b36:	93 01       	movw	r18, r6
     b38:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     b3c:	c9 01       	movw	r24, r18
     b3e:	da 01       	movw	r26, r20
     b40:	3c 01       	movw	r6, r24
     b42:	4d 01       	movw	r8, r26
     b44:	c4 01       	movw	r24, r8
     b46:	b3 01       	movw	r22, r6
     b48:	65 96       	adiw	r28, 0x15	; 21
     b4a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b4c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b4e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b50:	5f ad       	ldd	r21, Y+63	; 0x3f
     b52:	65 97       	sbiw	r28, 0x15	; 21
     b54:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	87 01       	movw	r16, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	ee 24       	eor	r14, r14
     b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b66:	af 8d       	ldd	r26, Y+31	; 0x1f
     b68:	b8 a1       	ldd	r27, Y+32	; 0x20
     b6a:	a0 70       	andi	r26, 0x00	; 0
     b6c:	b0 70       	andi	r27, 0x00	; 0
     b6e:	57 01       	movw	r10, r14
     b70:	68 01       	movw	r12, r16
     b72:	a8 2a       	or	r10, r24
     b74:	b9 2a       	or	r11, r25
     b76:	ca 2a       	or	r12, r26
     b78:	db 2a       	or	r13, r27
     b7a:	a2 16       	cp	r10, r18
     b7c:	b3 06       	cpc	r11, r19
     b7e:	c4 06       	cpc	r12, r20
     b80:	d5 06       	cpc	r13, r21
     b82:	00 f5       	brcc	.+64     	; 0xbc4 <__stack+0x365>
     b84:	08 94       	sec
     b86:	61 08       	sbc	r6, r1
     b88:	71 08       	sbc	r7, r1
     b8a:	81 08       	sbc	r8, r1
     b8c:	91 08       	sbc	r9, r1
     b8e:	6d a1       	ldd	r22, Y+37	; 0x25
     b90:	7e a1       	ldd	r23, Y+38	; 0x26
     b92:	8f a1       	ldd	r24, Y+39	; 0x27
     b94:	98 a5       	ldd	r25, Y+40	; 0x28
     b96:	a6 0e       	add	r10, r22
     b98:	b7 1e       	adc	r11, r23
     b9a:	c8 1e       	adc	r12, r24
     b9c:	d9 1e       	adc	r13, r25
     b9e:	a6 16       	cp	r10, r22
     ba0:	b7 06       	cpc	r11, r23
     ba2:	c8 06       	cpc	r12, r24
     ba4:	d9 06       	cpc	r13, r25
     ba6:	70 f0       	brcs	.+28     	; 0xbc4 <__stack+0x365>
     ba8:	a2 16       	cp	r10, r18
     baa:	b3 06       	cpc	r11, r19
     bac:	c4 06       	cpc	r12, r20
     bae:	d5 06       	cpc	r13, r21
     bb0:	48 f4       	brcc	.+18     	; 0xbc4 <__stack+0x365>
     bb2:	08 94       	sec
     bb4:	61 08       	sbc	r6, r1
     bb6:	71 08       	sbc	r7, r1
     bb8:	81 08       	sbc	r8, r1
     bba:	91 08       	sbc	r9, r1
     bbc:	a6 0e       	add	r10, r22
     bbe:	b7 1e       	adc	r11, r23
     bc0:	c8 1e       	adc	r12, r24
     bc2:	d9 1e       	adc	r13, r25
     bc4:	d6 01       	movw	r26, r12
     bc6:	c5 01       	movw	r24, r10
     bc8:	82 1b       	sub	r24, r18
     bca:	93 0b       	sbc	r25, r19
     bcc:	a4 0b       	sbc	r26, r20
     bce:	b5 0b       	sbc	r27, r21
     bd0:	89 8f       	std	Y+25, r24	; 0x19
     bd2:	9a 8f       	std	Y+26, r25	; 0x1a
     bd4:	ab 8f       	std	Y+27, r26	; 0x1b
     bd6:	bc 8f       	std	Y+28, r27	; 0x1c
     bd8:	d1 01       	movw	r26, r2
     bda:	99 27       	eor	r25, r25
     bdc:	88 27       	eor	r24, r24
     bde:	64 01       	movw	r12, r8
     be0:	53 01       	movw	r10, r6
     be2:	a8 2a       	or	r10, r24
     be4:	b9 2a       	or	r11, r25
     be6:	ca 2a       	or	r12, r26
     be8:	db 2a       	or	r13, r27
     bea:	a9 aa       	std	Y+49, r10	; 0x31
     bec:	ba aa       	std	Y+50, r11	; 0x32
     bee:	cb aa       	std	Y+51, r12	; 0x33
     bf0:	dc aa       	std	Y+52, r13	; 0x34
     bf2:	86 01       	movw	r16, r12
     bf4:	75 01       	movw	r14, r10
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	e2 22       	and	r14, r18
     c00:	f3 22       	and	r15, r19
     c02:	04 23       	and	r16, r20
     c04:	15 23       	and	r17, r21
     c06:	a6 01       	movw	r20, r12
     c08:	66 27       	eor	r22, r22
     c0a:	77 27       	eor	r23, r23
     c0c:	6d 96       	adiw	r28, 0x1d	; 29
     c0e:	4c af       	std	Y+60, r20	; 0x3c
     c10:	5d af       	std	Y+61, r21	; 0x3d
     c12:	6e af       	std	Y+62, r22	; 0x3e
     c14:	7f af       	std	Y+63, r23	; 0x3f
     c16:	6d 97       	sbiw	r28, 0x1d	; 29
     c18:	a9 a0       	ldd	r10, Y+33	; 0x21
     c1a:	ba a0       	ldd	r11, Y+34	; 0x22
     c1c:	cb a0       	ldd	r12, Y+35	; 0x23
     c1e:	dc a0       	ldd	r13, Y+36	; 0x24
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a6 22       	and	r10, r22
     c2a:	b7 22       	and	r11, r23
     c2c:	c8 22       	and	r12, r24
     c2e:	d9 22       	and	r13, r25
     c30:	89 a1       	ldd	r24, Y+33	; 0x21
     c32:	9a a1       	ldd	r25, Y+34	; 0x22
     c34:	ab a1       	ldd	r26, Y+35	; 0x23
     c36:	bc a1       	ldd	r27, Y+36	; 0x24
     c38:	1d 01       	movw	r2, r26
     c3a:	44 24       	eor	r4, r4
     c3c:	55 24       	eor	r5, r5
     c3e:	c8 01       	movw	r24, r16
     c40:	b7 01       	movw	r22, r14
     c42:	a6 01       	movw	r20, r12
     c44:	95 01       	movw	r18, r10
     c46:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     c4a:	69 96       	adiw	r28, 0x19	; 25
     c4c:	6c af       	std	Y+60, r22	; 0x3c
     c4e:	7d af       	std	Y+61, r23	; 0x3d
     c50:	8e af       	std	Y+62, r24	; 0x3e
     c52:	9f af       	std	Y+63, r25	; 0x3f
     c54:	69 97       	sbiw	r28, 0x19	; 25
     c56:	c8 01       	movw	r24, r16
     c58:	b7 01       	movw	r22, r14
     c5a:	a2 01       	movw	r20, r4
     c5c:	91 01       	movw	r18, r2
     c5e:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     c62:	3b 01       	movw	r6, r22
     c64:	4c 01       	movw	r8, r24
     c66:	6d 96       	adiw	r28, 0x1d	; 29
     c68:	6c ad       	ldd	r22, Y+60	; 0x3c
     c6a:	7d ad       	ldd	r23, Y+61	; 0x3d
     c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c70:	6d 97       	sbiw	r28, 0x1d	; 29
     c72:	a6 01       	movw	r20, r12
     c74:	95 01       	movw	r18, r10
     c76:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     c7a:	7b 01       	movw	r14, r22
     c7c:	8c 01       	movw	r16, r24
     c7e:	6d 96       	adiw	r28, 0x1d	; 29
     c80:	6c ad       	ldd	r22, Y+60	; 0x3c
     c82:	7d ad       	ldd	r23, Y+61	; 0x3d
     c84:	8e ad       	ldd	r24, Y+62	; 0x3e
     c86:	9f ad       	ldd	r25, Y+63	; 0x3f
     c88:	6d 97       	sbiw	r28, 0x1d	; 29
     c8a:	a2 01       	movw	r20, r4
     c8c:	91 01       	movw	r18, r2
     c8e:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
     c92:	5b 01       	movw	r10, r22
     c94:	6c 01       	movw	r12, r24
     c96:	a8 01       	movw	r20, r16
     c98:	97 01       	movw	r18, r14
     c9a:	26 0d       	add	r18, r6
     c9c:	37 1d       	adc	r19, r7
     c9e:	48 1d       	adc	r20, r8
     ca0:	59 1d       	adc	r21, r9
     ca2:	69 96       	adiw	r28, 0x19	; 25
     ca4:	6c ac       	ldd	r6, Y+60	; 0x3c
     ca6:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca8:	8e ac       	ldd	r8, Y+62	; 0x3e
     caa:	9f ac       	ldd	r9, Y+63	; 0x3f
     cac:	69 97       	sbiw	r28, 0x19	; 25
     cae:	c4 01       	movw	r24, r8
     cb0:	aa 27       	eor	r26, r26
     cb2:	bb 27       	eor	r27, r27
     cb4:	28 0f       	add	r18, r24
     cb6:	39 1f       	adc	r19, r25
     cb8:	4a 1f       	adc	r20, r26
     cba:	5b 1f       	adc	r21, r27
     cbc:	2e 15       	cp	r18, r14
     cbe:	3f 05       	cpc	r19, r15
     cc0:	40 07       	cpc	r20, r16
     cc2:	51 07       	cpc	r21, r17
     cc4:	48 f4       	brcc	.+18     	; 0xcd8 <__stack+0x479>
     cc6:	e1 2c       	mov	r14, r1
     cc8:	f1 2c       	mov	r15, r1
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	06 2f       	mov	r16, r22
     cce:	11 2d       	mov	r17, r1
     cd0:	ae 0c       	add	r10, r14
     cd2:	bf 1c       	adc	r11, r15
     cd4:	c0 1e       	adc	r12, r16
     cd6:	d1 1e       	adc	r13, r17
     cd8:	ca 01       	movw	r24, r20
     cda:	aa 27       	eor	r26, r26
     cdc:	bb 27       	eor	r27, r27
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	6a 0d       	add	r22, r10
     ce4:	7b 1d       	adc	r23, r11
     ce6:	8c 1d       	adc	r24, r12
     ce8:	9d 1d       	adc	r25, r13
     cea:	69 8c       	ldd	r6, Y+25	; 0x19
     cec:	7a 8c       	ldd	r7, Y+26	; 0x1a
     cee:	8b 8c       	ldd	r8, Y+27	; 0x1b
     cf0:	9c 8c       	ldd	r9, Y+28	; 0x1c
     cf2:	66 16       	cp	r6, r22
     cf4:	77 06       	cpc	r7, r23
     cf6:	88 06       	cpc	r8, r24
     cf8:	99 06       	cpc	r9, r25
     cfa:	40 f1       	brcs	.+80     	; 0xd4c <__stack+0x4ed>
     cfc:	66 15       	cp	r22, r6
     cfe:	77 05       	cpc	r23, r7
     d00:	88 05       	cpc	r24, r8
     d02:	99 05       	cpc	r25, r9
     d04:	09 f0       	breq	.+2      	; 0xd08 <__stack+0x4a9>
     d06:	43 c0       	rjmp	.+134    	; 0xd8e <__stack+0x52f>
     d08:	d9 01       	movw	r26, r18
     d0a:	99 27       	eor	r25, r25
     d0c:	88 27       	eor	r24, r24
     d0e:	69 96       	adiw	r28, 0x19	; 25
     d10:	2c ad       	ldd	r18, Y+60	; 0x3c
     d12:	3d ad       	ldd	r19, Y+61	; 0x3d
     d14:	4e ad       	ldd	r20, Y+62	; 0x3e
     d16:	5f ad       	ldd	r21, Y+63	; 0x3f
     d18:	69 97       	sbiw	r28, 0x19	; 25
     d1a:	40 70       	andi	r20, 0x00	; 0
     d1c:	50 70       	andi	r21, 0x00	; 0
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	a4 1f       	adc	r26, r20
     d24:	b5 1f       	adc	r27, r21
     d26:	2d a5       	ldd	r18, Y+45	; 0x2d
     d28:	3e a5       	ldd	r19, Y+46	; 0x2e
     d2a:	4f a5       	ldd	r20, Y+47	; 0x2f
     d2c:	58 a9       	ldd	r21, Y+48	; 0x30
     d2e:	6e 96       	adiw	r28, 0x1e	; 30
     d30:	0f ac       	ldd	r0, Y+63	; 0x3f
     d32:	6e 97       	sbiw	r28, 0x1e	; 30
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <__stack+0x4df>
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	44 1f       	adc	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	0a 94       	dec	r0
     d40:	d2 f7       	brpl	.-12     	; 0xd36 <__stack+0x4d7>
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	4a 07       	cpc	r20, r26
     d48:	5b 07       	cpc	r21, r27
     d4a:	08 f5       	brcc	.+66     	; 0xd8e <__stack+0x52f>
     d4c:	09 a9       	ldd	r16, Y+49	; 0x31
     d4e:	1a a9       	ldd	r17, Y+50	; 0x32
     d50:	2b a9       	ldd	r18, Y+51	; 0x33
     d52:	3c a9       	ldd	r19, Y+52	; 0x34
     d54:	01 50       	subi	r16, 0x01	; 1
     d56:	10 40       	sbci	r17, 0x00	; 0
     d58:	20 40       	sbci	r18, 0x00	; 0
     d5a:	30 40       	sbci	r19, 0x00	; 0
     d5c:	09 ab       	std	Y+49, r16	; 0x31
     d5e:	1a ab       	std	Y+50, r17	; 0x32
     d60:	2b ab       	std	Y+51, r18	; 0x33
     d62:	3c ab       	std	Y+52, r19	; 0x34
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <__stack+0x52f>
     d66:	66 24       	eor	r6, r6
     d68:	77 24       	eor	r7, r7
     d6a:	43 01       	movw	r8, r6
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	29 ab       	std	Y+49, r18	; 0x31
     d76:	3a ab       	std	Y+50, r19	; 0x32
     d78:	4b ab       	std	Y+51, r20	; 0x33
     d7a:	5c ab       	std	Y+52, r21	; 0x34
     d7c:	0b c0       	rjmp	.+22     	; 0xd94 <__stack+0x535>
     d7e:	66 24       	eor	r6, r6
     d80:	77 24       	eor	r7, r7
     d82:	43 01       	movw	r8, r6
     d84:	19 aa       	std	Y+49, r1	; 0x31
     d86:	1a aa       	std	Y+50, r1	; 0x32
     d88:	1b aa       	std	Y+51, r1	; 0x33
     d8a:	1c aa       	std	Y+52, r1	; 0x34
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <__stack+0x535>
     d8e:	66 24       	eor	r6, r6
     d90:	77 24       	eor	r7, r7
     d92:	43 01       	movw	r8, r6
     d94:	fe 01       	movw	r30, r28
     d96:	71 96       	adiw	r30, 0x11	; 17
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	df 01       	movw	r26, r30
     d9c:	1d 92       	st	X+, r1
     d9e:	8a 95       	dec	r24
     da0:	e9 f7       	brne	.-6      	; 0xd9c <__stack+0x53d>
     da2:	a9 a8       	ldd	r10, Y+49	; 0x31
     da4:	ba a8       	ldd	r11, Y+50	; 0x32
     da6:	cb a8       	ldd	r12, Y+51	; 0x33
     da8:	dc a8       	ldd	r13, Y+52	; 0x34
     daa:	a9 8a       	std	Y+17, r10	; 0x11
     dac:	ba 8a       	std	Y+18, r11	; 0x12
     dae:	cb 8a       	std	Y+19, r12	; 0x13
     db0:	dc 8a       	std	Y+20, r13	; 0x14
     db2:	6d 8a       	std	Y+21, r6	; 0x15
     db4:	7e 8a       	std	Y+22, r7	; 0x16
     db6:	8f 8a       	std	Y+23, r8	; 0x17
     db8:	98 8e       	std	Y+24, r9	; 0x18
     dba:	29 a9       	ldd	r18, Y+49	; 0x31
     dbc:	3a 89       	ldd	r19, Y+18	; 0x12
     dbe:	4b 89       	ldd	r20, Y+19	; 0x13
     dc0:	5c 89       	ldd	r21, Y+20	; 0x14
     dc2:	66 2d       	mov	r22, r6
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	c2 5a       	subi	r28, 0xA2	; 162
     dcc:	df 4f       	sbci	r29, 0xFF	; 255
     dce:	e2 e1       	ldi	r30, 0x12	; 18
     dd0:	0c 94 22 25 	jmp	0x4a44	; 0x4a44 <__epilogue_restores__>

00000dd4 <__umoddi3>:
     dd4:	ab e5       	ldi	r26, 0x5B	; 91
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 ef       	ldi	r30, 0xF0	; 240
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__prologue_saves__>
     de0:	a8 e0       	ldi	r26, 0x08	; 8
     de2:	4e 01       	movw	r8, r28
     de4:	08 94       	sec
     de6:	81 1c       	adc	r8, r1
     de8:	91 1c       	adc	r9, r1
     dea:	f4 01       	movw	r30, r8
     dec:	6a 2e       	mov	r6, r26
     dee:	11 92       	st	Z+, r1
     df0:	6a 94       	dec	r6
     df2:	e9 f7       	brne	.-6      	; 0xdee <__umoddi3+0x1a>
     df4:	29 83       	std	Y+1, r18	; 0x01
     df6:	3a 83       	std	Y+2, r19	; 0x02
     df8:	4b 83       	std	Y+3, r20	; 0x03
     dfa:	5c 83       	std	Y+4, r21	; 0x04
     dfc:	6d 83       	std	Y+5, r22	; 0x05
     dfe:	7e 83       	std	Y+6, r23	; 0x06
     e00:	8f 83       	std	Y+7, r24	; 0x07
     e02:	98 87       	std	Y+8, r25	; 0x08
     e04:	ce 01       	movw	r24, r28
     e06:	09 96       	adiw	r24, 0x09	; 9
     e08:	fc 01       	movw	r30, r24
     e0a:	11 92       	st	Z+, r1
     e0c:	aa 95       	dec	r26
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <__umoddi3+0x36>
     e10:	a9 86       	std	Y+9, r10	; 0x09
     e12:	ba 86       	std	Y+10, r11	; 0x0a
     e14:	cb 86       	std	Y+11, r12	; 0x0b
     e16:	dc 86       	std	Y+12, r13	; 0x0c
     e18:	ed 86       	std	Y+13, r14	; 0x0d
     e1a:	fe 86       	std	Y+14, r15	; 0x0e
     e1c:	0f 87       	std	Y+15, r16	; 0x0f
     e1e:	18 8b       	std	Y+16, r17	; 0x10
     e20:	29 84       	ldd	r2, Y+9	; 0x09
     e22:	3a 84       	ldd	r3, Y+10	; 0x0a
     e24:	4b 84       	ldd	r4, Y+11	; 0x0b
     e26:	5c 84       	ldd	r5, Y+12	; 0x0c
     e28:	ad 84       	ldd	r10, Y+13	; 0x0d
     e2a:	be 84       	ldd	r11, Y+14	; 0x0e
     e2c:	cf 84       	ldd	r12, Y+15	; 0x0f
     e2e:	d8 88       	ldd	r13, Y+16	; 0x10
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	4b 81       	ldd	r20, Y+3	; 0x03
     e36:	5c 81       	ldd	r21, Y+4	; 0x04
     e38:	69 96       	adiw	r28, 0x19	; 25
     e3a:	2f af       	std	Y+63, r18	; 0x3f
     e3c:	69 97       	sbiw	r28, 0x19	; 25
     e3e:	6a 96       	adiw	r28, 0x1a	; 26
     e40:	3f af       	std	Y+63, r19	; 0x3f
     e42:	6a 97       	sbiw	r28, 0x1a	; 26
     e44:	6b 96       	adiw	r28, 0x1b	; 27
     e46:	4f af       	std	Y+63, r20	; 0x3f
     e48:	6b 97       	sbiw	r28, 0x1b	; 27
     e4a:	6c 96       	adiw	r28, 0x1c	; 28
     e4c:	5f af       	std	Y+63, r21	; 0x3f
     e4e:	6c 97       	sbiw	r28, 0x1c	; 28
     e50:	6c 96       	adiw	r28, 0x1c	; 28
     e52:	6c ac       	ldd	r6, Y+60	; 0x3c
     e54:	7d ac       	ldd	r7, Y+61	; 0x3d
     e56:	8e ac       	ldd	r8, Y+62	; 0x3e
     e58:	9f ac       	ldd	r9, Y+63	; 0x3f
     e5a:	6c 97       	sbiw	r28, 0x1c	; 28
     e5c:	69 aa       	std	Y+49, r6	; 0x31
     e5e:	7a aa       	std	Y+50, r7	; 0x32
     e60:	8b aa       	std	Y+51, r8	; 0x33
     e62:	9c aa       	std	Y+52, r9	; 0x34
     e64:	6d 81       	ldd	r22, Y+5	; 0x05
     e66:	7e 81       	ldd	r23, Y+6	; 0x06
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	98 85       	ldd	r25, Y+8	; 0x08
     e6c:	3b 01       	movw	r6, r22
     e6e:	4c 01       	movw	r8, r24
     e70:	6d aa       	std	Y+53, r6	; 0x35
     e72:	7e aa       	std	Y+54, r7	; 0x36
     e74:	8f aa       	std	Y+55, r8	; 0x37
     e76:	98 ae       	std	Y+56, r9	; 0x38
     e78:	a1 14       	cp	r10, r1
     e7a:	b1 04       	cpc	r11, r1
     e7c:	c1 04       	cpc	r12, r1
     e7e:	d1 04       	cpc	r13, r1
     e80:	09 f0       	breq	.+2      	; 0xe84 <__umoddi3+0xb0>
     e82:	04 c3       	rjmp	.+1544   	; 0x148c <__umoddi3+0x6b8>
     e84:	62 14       	cp	r6, r2
     e86:	73 04       	cpc	r7, r3
     e88:	84 04       	cpc	r8, r4
     e8a:	95 04       	cpc	r9, r5
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__umoddi3+0xbc>
     e8e:	00 c1       	rjmp	.+512    	; 0x1090 <__umoddi3+0x2bc>
     e90:	00 e0       	ldi	r16, 0x00	; 0
     e92:	20 16       	cp	r2, r16
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	30 06       	cpc	r3, r16
     e98:	01 e0       	ldi	r16, 0x01	; 1
     e9a:	40 06       	cpc	r4, r16
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	50 06       	cpc	r5, r16
     ea0:	88 f4       	brcc	.+34     	; 0xec4 <__umoddi3+0xf0>
     ea2:	1f ef       	ldi	r17, 0xFF	; 255
     ea4:	21 16       	cp	r2, r17
     ea6:	31 04       	cpc	r3, r1
     ea8:	41 04       	cpc	r4, r1
     eaa:	51 04       	cpc	r5, r1
     eac:	39 f0       	breq	.+14     	; 0xebc <__umoddi3+0xe8>
     eae:	30 f0       	brcs	.+12     	; 0xebc <__umoddi3+0xe8>
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	e8 2e       	mov	r14, r24
     eb4:	f1 2c       	mov	r15, r1
     eb6:	01 2d       	mov	r16, r1
     eb8:	11 2d       	mov	r17, r1
     eba:	18 c0       	rjmp	.+48     	; 0xeec <__umoddi3+0x118>
     ebc:	ee 24       	eor	r14, r14
     ebe:	ff 24       	eor	r15, r15
     ec0:	87 01       	movw	r16, r14
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <__umoddi3+0x118>
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	24 16       	cp	r2, r20
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	34 06       	cpc	r3, r20
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	44 06       	cpc	r4, r20
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	54 06       	cpc	r5, r20
     ed4:	30 f0       	brcs	.+12     	; 0xee2 <__umoddi3+0x10e>
     ed6:	b8 e1       	ldi	r27, 0x18	; 24
     ed8:	eb 2e       	mov	r14, r27
     eda:	f1 2c       	mov	r15, r1
     edc:	01 2d       	mov	r16, r1
     ede:	11 2d       	mov	r17, r1
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__umoddi3+0x118>
     ee2:	a0 e1       	ldi	r26, 0x10	; 16
     ee4:	ea 2e       	mov	r14, r26
     ee6:	f1 2c       	mov	r15, r1
     ee8:	01 2d       	mov	r16, r1
     eea:	11 2d       	mov	r17, r1
     eec:	d2 01       	movw	r26, r4
     eee:	c1 01       	movw	r24, r2
     ef0:	0e 2c       	mov	r0, r14
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__umoddi3+0x128>
     ef4:	b6 95       	lsr	r27
     ef6:	a7 95       	ror	r26
     ef8:	97 95       	ror	r25
     efa:	87 95       	ror	r24
     efc:	0a 94       	dec	r0
     efe:	d2 f7       	brpl	.-12     	; 0xef4 <__umoddi3+0x120>
     f00:	85 58       	subi	r24, 0x85	; 133
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	dc 01       	movw	r26, r24
     f06:	2c 91       	ld	r18, X
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	8e 19       	sub	r24, r14
     f12:	9f 09       	sbc	r25, r15
     f14:	a0 0b       	sbc	r26, r16
     f16:	b1 0b       	sbc	r27, r17
     f18:	5c 01       	movw	r10, r24
     f1a:	6d 01       	movw	r12, r26
     f1c:	a2 1a       	sub	r10, r18
     f1e:	b1 08       	sbc	r11, r1
     f20:	c1 08       	sbc	r12, r1
     f22:	d1 08       	sbc	r13, r1
     f24:	a9 ae       	std	Y+57, r10	; 0x39
     f26:	ba ae       	std	Y+58, r11	; 0x3a
     f28:	cb ae       	std	Y+59, r12	; 0x3b
     f2a:	dc ae       	std	Y+60, r13	; 0x3c
     f2c:	a1 14       	cp	r10, r1
     f2e:	b1 04       	cpc	r11, r1
     f30:	c1 04       	cpc	r12, r1
     f32:	d1 04       	cpc	r13, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <__umoddi3+0x164>
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <__umoddi3+0x1e2>
     f38:	69 ad       	ldd	r22, Y+57	; 0x39
     f3a:	06 2e       	mov	r0, r22
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__umoddi3+0x172>
     f3e:	22 0c       	add	r2, r2
     f40:	33 1c       	adc	r3, r3
     f42:	44 1c       	adc	r4, r4
     f44:	55 1c       	adc	r5, r5
     f46:	0a 94       	dec	r0
     f48:	d2 f7       	brpl	.-12     	; 0xf3e <__umoddi3+0x16a>
     f4a:	a4 01       	movw	r20, r8
     f4c:	93 01       	movw	r18, r6
     f4e:	06 2e       	mov	r0, r22
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__umoddi3+0x186>
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	44 1f       	adc	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__umoddi3+0x17e>
     f5e:	80 e2       	ldi	r24, 0x20	; 32
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	8a 19       	sub	r24, r10
     f64:	9b 09       	sbc	r25, r11
     f66:	6c 96       	adiw	r28, 0x1c	; 28
     f68:	cc ac       	ldd	r12, Y+60	; 0x3c
     f6a:	dd ac       	ldd	r13, Y+61	; 0x3d
     f6c:	ee ac       	ldd	r14, Y+62	; 0x3e
     f6e:	ff ac       	ldd	r15, Y+63	; 0x3f
     f70:	6c 97       	sbiw	r28, 0x1c	; 28
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <__umoddi3+0x1a8>
     f74:	f6 94       	lsr	r15
     f76:	e7 94       	ror	r14
     f78:	d7 94       	ror	r13
     f7a:	c7 94       	ror	r12
     f7c:	8a 95       	dec	r24
     f7e:	d2 f7       	brpl	.-12     	; 0xf74 <__umoddi3+0x1a0>
     f80:	87 01       	movw	r16, r14
     f82:	76 01       	movw	r14, r12
     f84:	e2 2a       	or	r14, r18
     f86:	f3 2a       	or	r15, r19
     f88:	04 2b       	or	r16, r20
     f8a:	15 2b       	or	r17, r21
     f8c:	ed aa       	std	Y+53, r14	; 0x35
     f8e:	fe aa       	std	Y+54, r15	; 0x36
     f90:	0f ab       	std	Y+55, r16	; 0x37
     f92:	18 af       	std	Y+56, r17	; 0x38
     f94:	6c 96       	adiw	r28, 0x1c	; 28
     f96:	8c ad       	ldd	r24, Y+60	; 0x3c
     f98:	9d ad       	ldd	r25, Y+61	; 0x3d
     f9a:	ae ad       	ldd	r26, Y+62	; 0x3e
     f9c:	bf ad       	ldd	r27, Y+63	; 0x3f
     f9e:	6c 97       	sbiw	r28, 0x1c	; 28
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <__umoddi3+0x1d6>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	aa 1f       	adc	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	6a 95       	dec	r22
     fac:	d2 f7       	brpl	.-12     	; 0xfa2 <__umoddi3+0x1ce>
     fae:	89 ab       	std	Y+49, r24	; 0x31
     fb0:	9a ab       	std	Y+50, r25	; 0x32
     fb2:	ab ab       	std	Y+51, r26	; 0x33
     fb4:	bc ab       	std	Y+52, r27	; 0x34
     fb6:	32 01       	movw	r6, r4
     fb8:	88 24       	eor	r8, r8
     fba:	99 24       	eor	r9, r9
     fbc:	b2 01       	movw	r22, r4
     fbe:	a1 01       	movw	r20, r2
     fc0:	60 70       	andi	r22, 0x00	; 0
     fc2:	70 70       	andi	r23, 0x00	; 0
     fc4:	21 96       	adiw	r28, 0x01	; 1
     fc6:	4c af       	std	Y+60, r20	; 0x3c
     fc8:	5d af       	std	Y+61, r21	; 0x3d
     fca:	6e af       	std	Y+62, r22	; 0x3e
     fcc:	7f af       	std	Y+63, r23	; 0x3f
     fce:	21 97       	sbiw	r28, 0x01	; 1
     fd0:	6d a9       	ldd	r22, Y+53	; 0x35
     fd2:	7e a9       	ldd	r23, Y+54	; 0x36
     fd4:	8f a9       	ldd	r24, Y+55	; 0x37
     fd6:	98 ad       	ldd	r25, Y+56	; 0x38
     fd8:	a4 01       	movw	r20, r8
     fda:	93 01       	movw	r18, r6
     fdc:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     fe0:	7b 01       	movw	r14, r22
     fe2:	8c 01       	movw	r16, r24
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	a4 01       	movw	r20, r8
     fee:	93 01       	movw	r18, r6
     ff0:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
     ff4:	ca 01       	movw	r24, r20
     ff6:	b9 01       	movw	r22, r18
     ff8:	21 96       	adiw	r28, 0x01	; 1
     ffa:	2c ad       	ldd	r18, Y+60	; 0x3c
     ffc:	3d ad       	ldd	r19, Y+61	; 0x3d
     ffe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1000:	5f ad       	ldd	r21, Y+63	; 0x3f
    1002:	21 97       	sbiw	r28, 0x01	; 1
    1004:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	87 01       	movw	r16, r14
    100e:	ff 24       	eor	r15, r15
    1010:	ee 24       	eor	r14, r14
    1012:	a9 a8       	ldd	r10, Y+49	; 0x31
    1014:	ba a8       	ldd	r11, Y+50	; 0x32
    1016:	cb a8       	ldd	r12, Y+51	; 0x33
    1018:	dc a8       	ldd	r13, Y+52	; 0x34
    101a:	c6 01       	movw	r24, r12
    101c:	aa 27       	eor	r26, r26
    101e:	bb 27       	eor	r27, r27
    1020:	57 01       	movw	r10, r14
    1022:	68 01       	movw	r12, r16
    1024:	a8 2a       	or	r10, r24
    1026:	b9 2a       	or	r11, r25
    1028:	ca 2a       	or	r12, r26
    102a:	db 2a       	or	r13, r27
    102c:	a2 16       	cp	r10, r18
    102e:	b3 06       	cpc	r11, r19
    1030:	c4 06       	cpc	r12, r20
    1032:	d5 06       	cpc	r13, r21
    1034:	90 f4       	brcc	.+36     	; 0x105a <__umoddi3+0x286>
    1036:	a2 0c       	add	r10, r2
    1038:	b3 1c       	adc	r11, r3
    103a:	c4 1c       	adc	r12, r4
    103c:	d5 1c       	adc	r13, r5
    103e:	a2 14       	cp	r10, r2
    1040:	b3 04       	cpc	r11, r3
    1042:	c4 04       	cpc	r12, r4
    1044:	d5 04       	cpc	r13, r5
    1046:	48 f0       	brcs	.+18     	; 0x105a <__umoddi3+0x286>
    1048:	a2 16       	cp	r10, r18
    104a:	b3 06       	cpc	r11, r19
    104c:	c4 06       	cpc	r12, r20
    104e:	d5 06       	cpc	r13, r21
    1050:	20 f4       	brcc	.+8      	; 0x105a <__umoddi3+0x286>
    1052:	a2 0c       	add	r10, r2
    1054:	b3 1c       	adc	r11, r3
    1056:	c4 1c       	adc	r12, r4
    1058:	d5 1c       	adc	r13, r5
    105a:	a2 1a       	sub	r10, r18
    105c:	b3 0a       	sbc	r11, r19
    105e:	c4 0a       	sbc	r12, r20
    1060:	d5 0a       	sbc	r13, r21
    1062:	c6 01       	movw	r24, r12
    1064:	b5 01       	movw	r22, r10
    1066:	a4 01       	movw	r20, r8
    1068:	93 01       	movw	r18, r6
    106a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    106e:	7b 01       	movw	r14, r22
    1070:	8c 01       	movw	r16, r24
    1072:	c6 01       	movw	r24, r12
    1074:	b5 01       	movw	r22, r10
    1076:	a4 01       	movw	r20, r8
    1078:	93 01       	movw	r18, r6
    107a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	21 96       	adiw	r28, 0x01	; 1
    1084:	2c ad       	ldd	r18, Y+60	; 0x3c
    1086:	3d ad       	ldd	r19, Y+61	; 0x3d
    1088:	4e ad       	ldd	r20, Y+62	; 0x3e
    108a:	5f ad       	ldd	r21, Y+63	; 0x3f
    108c:	21 97       	sbiw	r28, 0x01	; 1
    108e:	ba c1       	rjmp	.+884    	; 0x1404 <__umoddi3+0x630>
    1090:	21 14       	cp	r2, r1
    1092:	31 04       	cpc	r3, r1
    1094:	41 04       	cpc	r4, r1
    1096:	51 04       	cpc	r5, r1
    1098:	71 f4       	brne	.+28     	; 0x10b6 <__umoddi3+0x2e2>
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    10ae:	c9 01       	movw	r24, r18
    10b0:	da 01       	movw	r26, r20
    10b2:	1c 01       	movw	r2, r24
    10b4:	2d 01       	movw	r4, r26
    10b6:	00 e0       	ldi	r16, 0x00	; 0
    10b8:	20 16       	cp	r2, r16
    10ba:	00 e0       	ldi	r16, 0x00	; 0
    10bc:	30 06       	cpc	r3, r16
    10be:	01 e0       	ldi	r16, 0x01	; 1
    10c0:	40 06       	cpc	r4, r16
    10c2:	00 e0       	ldi	r16, 0x00	; 0
    10c4:	50 06       	cpc	r5, r16
    10c6:	88 f4       	brcc	.+34     	; 0x10ea <__umoddi3+0x316>
    10c8:	1f ef       	ldi	r17, 0xFF	; 255
    10ca:	21 16       	cp	r2, r17
    10cc:	31 04       	cpc	r3, r1
    10ce:	41 04       	cpc	r4, r1
    10d0:	51 04       	cpc	r5, r1
    10d2:	39 f0       	breq	.+14     	; 0x10e2 <__umoddi3+0x30e>
    10d4:	30 f0       	brcs	.+12     	; 0x10e2 <__umoddi3+0x30e>
    10d6:	68 e0       	ldi	r22, 0x08	; 8
    10d8:	e6 2e       	mov	r14, r22
    10da:	f1 2c       	mov	r15, r1
    10dc:	01 2d       	mov	r16, r1
    10de:	11 2d       	mov	r17, r1
    10e0:	18 c0       	rjmp	.+48     	; 0x1112 <__umoddi3+0x33e>
    10e2:	ee 24       	eor	r14, r14
    10e4:	ff 24       	eor	r15, r15
    10e6:	87 01       	movw	r16, r14
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <__umoddi3+0x33e>
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	24 16       	cp	r2, r20
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	34 06       	cpc	r3, r20
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	44 06       	cpc	r4, r20
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    10f8:	54 06       	cpc	r5, r20
    10fa:	30 f0       	brcs	.+12     	; 0x1108 <__umoddi3+0x334>
    10fc:	58 e1       	ldi	r21, 0x18	; 24
    10fe:	e5 2e       	mov	r14, r21
    1100:	f1 2c       	mov	r15, r1
    1102:	01 2d       	mov	r16, r1
    1104:	11 2d       	mov	r17, r1
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <__umoddi3+0x33e>
    1108:	40 e1       	ldi	r20, 0x10	; 16
    110a:	e4 2e       	mov	r14, r20
    110c:	f1 2c       	mov	r15, r1
    110e:	01 2d       	mov	r16, r1
    1110:	11 2d       	mov	r17, r1
    1112:	d2 01       	movw	r26, r4
    1114:	c1 01       	movw	r24, r2
    1116:	0e 2c       	mov	r0, r14
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <__umoddi3+0x34e>
    111a:	b6 95       	lsr	r27
    111c:	a7 95       	ror	r26
    111e:	97 95       	ror	r25
    1120:	87 95       	ror	r24
    1122:	0a 94       	dec	r0
    1124:	d2 f7       	brpl	.-12     	; 0x111a <__umoddi3+0x346>
    1126:	85 58       	subi	r24, 0x85	; 133
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	dc 01       	movw	r26, r24
    112c:	2c 91       	ld	r18, X
    112e:	30 e2       	ldi	r19, 0x20	; 32
    1130:	a3 2e       	mov	r10, r19
    1132:	b1 2c       	mov	r11, r1
    1134:	c1 2c       	mov	r12, r1
    1136:	d1 2c       	mov	r13, r1
    1138:	d6 01       	movw	r26, r12
    113a:	c5 01       	movw	r24, r10
    113c:	8e 19       	sub	r24, r14
    113e:	9f 09       	sbc	r25, r15
    1140:	a0 0b       	sbc	r26, r16
    1142:	b1 0b       	sbc	r27, r17
    1144:	7c 01       	movw	r14, r24
    1146:	8d 01       	movw	r16, r26
    1148:	e2 1a       	sub	r14, r18
    114a:	f1 08       	sbc	r15, r1
    114c:	01 09       	sbc	r16, r1
    114e:	11 09       	sbc	r17, r1
    1150:	e9 ae       	std	Y+57, r14	; 0x39
    1152:	fa ae       	std	Y+58, r15	; 0x3a
    1154:	0b af       	std	Y+59, r16	; 0x3b
    1156:	1c af       	std	Y+60, r17	; 0x3c
    1158:	e1 14       	cp	r14, r1
    115a:	f1 04       	cpc	r15, r1
    115c:	01 05       	cpc	r16, r1
    115e:	11 05       	cpc	r17, r1
    1160:	39 f4       	brne	.+14     	; 0x1170 <__umoddi3+0x39c>
    1162:	64 01       	movw	r12, r8
    1164:	53 01       	movw	r10, r6
    1166:	a2 18       	sub	r10, r2
    1168:	b3 08       	sbc	r11, r3
    116a:	c4 08       	sbc	r12, r4
    116c:	d5 08       	sbc	r13, r5
    116e:	e2 c0       	rjmp	.+452    	; 0x1334 <__umoddi3+0x560>
    1170:	f9 ac       	ldd	r15, Y+57	; 0x39
    1172:	68 96       	adiw	r28, 0x18	; 24
    1174:	ff ae       	std	Y+63, r15	; 0x3f
    1176:	68 97       	sbiw	r28, 0x18	; 24
    1178:	0f 2c       	mov	r0, r15
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__umoddi3+0x3b0>
    117c:	22 0c       	add	r2, r2
    117e:	33 1c       	adc	r3, r3
    1180:	44 1c       	adc	r4, r4
    1182:	55 1c       	adc	r5, r5
    1184:	0a 94       	dec	r0
    1186:	d2 f7       	brpl	.-12     	; 0x117c <__umoddi3+0x3a8>
    1188:	8a 2d       	mov	r24, r10
    118a:	8f 19       	sub	r24, r15
    118c:	64 01       	movw	r12, r8
    118e:	53 01       	movw	r10, r6
    1190:	08 2e       	mov	r0, r24
    1192:	04 c0       	rjmp	.+8      	; 0x119c <__umoddi3+0x3c8>
    1194:	d6 94       	lsr	r13
    1196:	c7 94       	ror	r12
    1198:	b7 94       	ror	r11
    119a:	a7 94       	ror	r10
    119c:	0a 94       	dec	r0
    119e:	d2 f7       	brpl	.-12     	; 0x1194 <__umoddi3+0x3c0>
    11a0:	a4 01       	movw	r20, r8
    11a2:	93 01       	movw	r18, r6
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__umoddi3+0x3da>
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	fa 94       	dec	r15
    11b0:	d2 f7       	brpl	.-12     	; 0x11a6 <__umoddi3+0x3d2>
    11b2:	6c 96       	adiw	r28, 0x1c	; 28
    11b4:	6c ac       	ldd	r6, Y+60	; 0x3c
    11b6:	7d ac       	ldd	r7, Y+61	; 0x3d
    11b8:	8e ac       	ldd	r8, Y+62	; 0x3e
    11ba:	9f ac       	ldd	r9, Y+63	; 0x3f
    11bc:	6c 97       	sbiw	r28, 0x1c	; 28
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x3f4>
    11c0:	96 94       	lsr	r9
    11c2:	87 94       	ror	r8
    11c4:	77 94       	ror	r7
    11c6:	67 94       	ror	r6
    11c8:	8a 95       	dec	r24
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x3ec>
    11cc:	84 01       	movw	r16, r8
    11ce:	73 01       	movw	r14, r6
    11d0:	e2 2a       	or	r14, r18
    11d2:	f3 2a       	or	r15, r19
    11d4:	04 2b       	or	r16, r20
    11d6:	15 2b       	or	r17, r21
    11d8:	ed a6       	std	Y+45, r14	; 0x2d
    11da:	fe a6       	std	Y+46, r15	; 0x2e
    11dc:	0f a7       	std	Y+47, r16	; 0x2f
    11de:	18 ab       	std	Y+48, r17	; 0x30
    11e0:	32 01       	movw	r6, r4
    11e2:	88 24       	eor	r8, r8
    11e4:	99 24       	eor	r9, r9
    11e6:	b2 01       	movw	r22, r4
    11e8:	a1 01       	movw	r20, r2
    11ea:	60 70       	andi	r22, 0x00	; 0
    11ec:	70 70       	andi	r23, 0x00	; 0
    11ee:	25 96       	adiw	r28, 0x05	; 5
    11f0:	4c af       	std	Y+60, r20	; 0x3c
    11f2:	5d af       	std	Y+61, r21	; 0x3d
    11f4:	6e af       	std	Y+62, r22	; 0x3e
    11f6:	7f af       	std	Y+63, r23	; 0x3f
    11f8:	25 97       	sbiw	r28, 0x05	; 5
    11fa:	c6 01       	movw	r24, r12
    11fc:	b5 01       	movw	r22, r10
    11fe:	a4 01       	movw	r20, r8
    1200:	93 01       	movw	r18, r6
    1202:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    1206:	7b 01       	movw	r14, r22
    1208:	8c 01       	movw	r16, r24
    120a:	c6 01       	movw	r24, r12
    120c:	b5 01       	movw	r22, r10
    120e:	a4 01       	movw	r20, r8
    1210:	93 01       	movw	r18, r6
    1212:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    1216:	ca 01       	movw	r24, r20
    1218:	b9 01       	movw	r22, r18
    121a:	25 96       	adiw	r28, 0x05	; 5
    121c:	2c ad       	ldd	r18, Y+60	; 0x3c
    121e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1220:	4e ad       	ldd	r20, Y+62	; 0x3e
    1222:	5f ad       	ldd	r21, Y+63	; 0x3f
    1224:	25 97       	sbiw	r28, 0x05	; 5
    1226:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	87 01       	movw	r16, r14
    1230:	ff 24       	eor	r15, r15
    1232:	ee 24       	eor	r14, r14
    1234:	ad a4       	ldd	r10, Y+45	; 0x2d
    1236:	be a4       	ldd	r11, Y+46	; 0x2e
    1238:	cf a4       	ldd	r12, Y+47	; 0x2f
    123a:	d8 a8       	ldd	r13, Y+48	; 0x30
    123c:	c6 01       	movw	r24, r12
    123e:	aa 27       	eor	r26, r26
    1240:	bb 27       	eor	r27, r27
    1242:	5c 01       	movw	r10, r24
    1244:	6d 01       	movw	r12, r26
    1246:	ae 28       	or	r10, r14
    1248:	bf 28       	or	r11, r15
    124a:	c0 2a       	or	r12, r16
    124c:	d1 2a       	or	r13, r17
    124e:	a2 16       	cp	r10, r18
    1250:	b3 06       	cpc	r11, r19
    1252:	c4 06       	cpc	r12, r20
    1254:	d5 06       	cpc	r13, r21
    1256:	90 f4       	brcc	.+36     	; 0x127c <__umoddi3+0x4a8>
    1258:	a2 0c       	add	r10, r2
    125a:	b3 1c       	adc	r11, r3
    125c:	c4 1c       	adc	r12, r4
    125e:	d5 1c       	adc	r13, r5
    1260:	a2 14       	cp	r10, r2
    1262:	b3 04       	cpc	r11, r3
    1264:	c4 04       	cpc	r12, r4
    1266:	d5 04       	cpc	r13, r5
    1268:	48 f0       	brcs	.+18     	; 0x127c <__umoddi3+0x4a8>
    126a:	a2 16       	cp	r10, r18
    126c:	b3 06       	cpc	r11, r19
    126e:	c4 06       	cpc	r12, r20
    1270:	d5 06       	cpc	r13, r21
    1272:	20 f4       	brcc	.+8      	; 0x127c <__umoddi3+0x4a8>
    1274:	a2 0c       	add	r10, r2
    1276:	b3 1c       	adc	r11, r3
    1278:	c4 1c       	adc	r12, r4
    127a:	d5 1c       	adc	r13, r5
    127c:	a2 1a       	sub	r10, r18
    127e:	b3 0a       	sbc	r11, r19
    1280:	c4 0a       	sbc	r12, r20
    1282:	d5 0a       	sbc	r13, r21
    1284:	c6 01       	movw	r24, r12
    1286:	b5 01       	movw	r22, r10
    1288:	a4 01       	movw	r20, r8
    128a:	93 01       	movw	r18, r6
    128c:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    1290:	7b 01       	movw	r14, r22
    1292:	8c 01       	movw	r16, r24
    1294:	c6 01       	movw	r24, r12
    1296:	b5 01       	movw	r22, r10
    1298:	a4 01       	movw	r20, r8
    129a:	93 01       	movw	r18, r6
    129c:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    12a0:	ca 01       	movw	r24, r20
    12a2:	b9 01       	movw	r22, r18
    12a4:	25 96       	adiw	r28, 0x05	; 5
    12a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    12a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    12aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    12ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ae:	25 97       	sbiw	r28, 0x05	; 5
    12b0:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	87 01       	movw	r16, r14
    12ba:	ff 24       	eor	r15, r15
    12bc:	ee 24       	eor	r14, r14
    12be:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c2:	af a5       	ldd	r26, Y+47	; 0x2f
    12c4:	b8 a9       	ldd	r27, Y+48	; 0x30
    12c6:	a0 70       	andi	r26, 0x00	; 0
    12c8:	b0 70       	andi	r27, 0x00	; 0
    12ca:	57 01       	movw	r10, r14
    12cc:	68 01       	movw	r12, r16
    12ce:	a8 2a       	or	r10, r24
    12d0:	b9 2a       	or	r11, r25
    12d2:	ca 2a       	or	r12, r26
    12d4:	db 2a       	or	r13, r27
    12d6:	a2 16       	cp	r10, r18
    12d8:	b3 06       	cpc	r11, r19
    12da:	c4 06       	cpc	r12, r20
    12dc:	d5 06       	cpc	r13, r21
    12de:	90 f4       	brcc	.+36     	; 0x1304 <__umoddi3+0x530>
    12e0:	a2 0c       	add	r10, r2
    12e2:	b3 1c       	adc	r11, r3
    12e4:	c4 1c       	adc	r12, r4
    12e6:	d5 1c       	adc	r13, r5
    12e8:	a2 14       	cp	r10, r2
    12ea:	b3 04       	cpc	r11, r3
    12ec:	c4 04       	cpc	r12, r4
    12ee:	d5 04       	cpc	r13, r5
    12f0:	48 f0       	brcs	.+18     	; 0x1304 <__umoddi3+0x530>
    12f2:	a2 16       	cp	r10, r18
    12f4:	b3 06       	cpc	r11, r19
    12f6:	c4 06       	cpc	r12, r20
    12f8:	d5 06       	cpc	r13, r21
    12fa:	20 f4       	brcc	.+8      	; 0x1304 <__umoddi3+0x530>
    12fc:	a2 0c       	add	r10, r2
    12fe:	b3 1c       	adc	r11, r3
    1300:	c4 1c       	adc	r12, r4
    1302:	d5 1c       	adc	r13, r5
    1304:	6c 96       	adiw	r28, 0x1c	; 28
    1306:	ec ac       	ldd	r14, Y+60	; 0x3c
    1308:	fd ac       	ldd	r15, Y+61	; 0x3d
    130a:	0e ad       	ldd	r16, Y+62	; 0x3e
    130c:	1f ad       	ldd	r17, Y+63	; 0x3f
    130e:	6c 97       	sbiw	r28, 0x1c	; 28
    1310:	68 96       	adiw	r28, 0x18	; 24
    1312:	0f ac       	ldd	r0, Y+63	; 0x3f
    1314:	68 97       	sbiw	r28, 0x18	; 24
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <__umoddi3+0x54c>
    1318:	ee 0c       	add	r14, r14
    131a:	ff 1c       	adc	r15, r15
    131c:	00 1f       	adc	r16, r16
    131e:	11 1f       	adc	r17, r17
    1320:	0a 94       	dec	r0
    1322:	d2 f7       	brpl	.-12     	; 0x1318 <__umoddi3+0x544>
    1324:	e9 aa       	std	Y+49, r14	; 0x31
    1326:	fa aa       	std	Y+50, r15	; 0x32
    1328:	0b ab       	std	Y+51, r16	; 0x33
    132a:	1c ab       	std	Y+52, r17	; 0x34
    132c:	a2 1a       	sub	r10, r18
    132e:	b3 0a       	sbc	r11, r19
    1330:	c4 0a       	sbc	r12, r20
    1332:	d5 0a       	sbc	r13, r21
    1334:	32 01       	movw	r6, r4
    1336:	88 24       	eor	r8, r8
    1338:	99 24       	eor	r9, r9
    133a:	b2 01       	movw	r22, r4
    133c:	a1 01       	movw	r20, r2
    133e:	60 70       	andi	r22, 0x00	; 0
    1340:	70 70       	andi	r23, 0x00	; 0
    1342:	29 96       	adiw	r28, 0x09	; 9
    1344:	4c af       	std	Y+60, r20	; 0x3c
    1346:	5d af       	std	Y+61, r21	; 0x3d
    1348:	6e af       	std	Y+62, r22	; 0x3e
    134a:	7f af       	std	Y+63, r23	; 0x3f
    134c:	29 97       	sbiw	r28, 0x09	; 9
    134e:	c6 01       	movw	r24, r12
    1350:	b5 01       	movw	r22, r10
    1352:	a4 01       	movw	r20, r8
    1354:	93 01       	movw	r18, r6
    1356:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    135a:	7b 01       	movw	r14, r22
    135c:	8c 01       	movw	r16, r24
    135e:	c6 01       	movw	r24, r12
    1360:	b5 01       	movw	r22, r10
    1362:	a4 01       	movw	r20, r8
    1364:	93 01       	movw	r18, r6
    1366:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    136a:	ca 01       	movw	r24, r20
    136c:	b9 01       	movw	r22, r18
    136e:	29 96       	adiw	r28, 0x09	; 9
    1370:	2c ad       	ldd	r18, Y+60	; 0x3c
    1372:	3d ad       	ldd	r19, Y+61	; 0x3d
    1374:	4e ad       	ldd	r20, Y+62	; 0x3e
    1376:	5f ad       	ldd	r21, Y+63	; 0x3f
    1378:	29 97       	sbiw	r28, 0x09	; 9
    137a:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	87 01       	movw	r16, r14
    1384:	ff 24       	eor	r15, r15
    1386:	ee 24       	eor	r14, r14
    1388:	a9 a8       	ldd	r10, Y+49	; 0x31
    138a:	ba a8       	ldd	r11, Y+50	; 0x32
    138c:	cb a8       	ldd	r12, Y+51	; 0x33
    138e:	dc a8       	ldd	r13, Y+52	; 0x34
    1390:	c6 01       	movw	r24, r12
    1392:	aa 27       	eor	r26, r26
    1394:	bb 27       	eor	r27, r27
    1396:	57 01       	movw	r10, r14
    1398:	68 01       	movw	r12, r16
    139a:	a8 2a       	or	r10, r24
    139c:	b9 2a       	or	r11, r25
    139e:	ca 2a       	or	r12, r26
    13a0:	db 2a       	or	r13, r27
    13a2:	a2 16       	cp	r10, r18
    13a4:	b3 06       	cpc	r11, r19
    13a6:	c4 06       	cpc	r12, r20
    13a8:	d5 06       	cpc	r13, r21
    13aa:	90 f4       	brcc	.+36     	; 0x13d0 <__umoddi3+0x5fc>
    13ac:	a2 0c       	add	r10, r2
    13ae:	b3 1c       	adc	r11, r3
    13b0:	c4 1c       	adc	r12, r4
    13b2:	d5 1c       	adc	r13, r5
    13b4:	a2 14       	cp	r10, r2
    13b6:	b3 04       	cpc	r11, r3
    13b8:	c4 04       	cpc	r12, r4
    13ba:	d5 04       	cpc	r13, r5
    13bc:	48 f0       	brcs	.+18     	; 0x13d0 <__umoddi3+0x5fc>
    13be:	a2 16       	cp	r10, r18
    13c0:	b3 06       	cpc	r11, r19
    13c2:	c4 06       	cpc	r12, r20
    13c4:	d5 06       	cpc	r13, r21
    13c6:	20 f4       	brcc	.+8      	; 0x13d0 <__umoddi3+0x5fc>
    13c8:	a2 0c       	add	r10, r2
    13ca:	b3 1c       	adc	r11, r3
    13cc:	c4 1c       	adc	r12, r4
    13ce:	d5 1c       	adc	r13, r5
    13d0:	a2 1a       	sub	r10, r18
    13d2:	b3 0a       	sbc	r11, r19
    13d4:	c4 0a       	sbc	r12, r20
    13d6:	d5 0a       	sbc	r13, r21
    13d8:	c6 01       	movw	r24, r12
    13da:	b5 01       	movw	r22, r10
    13dc:	a4 01       	movw	r20, r8
    13de:	93 01       	movw	r18, r6
    13e0:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    13e4:	7b 01       	movw	r14, r22
    13e6:	8c 01       	movw	r16, r24
    13e8:	c6 01       	movw	r24, r12
    13ea:	b5 01       	movw	r22, r10
    13ec:	a4 01       	movw	r20, r8
    13ee:	93 01       	movw	r18, r6
    13f0:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    13f4:	ca 01       	movw	r24, r20
    13f6:	b9 01       	movw	r22, r18
    13f8:	29 96       	adiw	r28, 0x09	; 9
    13fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    13fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    13fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1400:	5f ad       	ldd	r21, Y+63	; 0x3f
    1402:	29 97       	sbiw	r28, 0x09	; 9
    1404:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    1408:	9b 01       	movw	r18, r22
    140a:	ac 01       	movw	r20, r24
    140c:	87 01       	movw	r16, r14
    140e:	ff 24       	eor	r15, r15
    1410:	ee 24       	eor	r14, r14
    1412:	89 a9       	ldd	r24, Y+49	; 0x31
    1414:	9a a9       	ldd	r25, Y+50	; 0x32
    1416:	ab a9       	ldd	r26, Y+51	; 0x33
    1418:	bc a9       	ldd	r27, Y+52	; 0x34
    141a:	a0 70       	andi	r26, 0x00	; 0
    141c:	b0 70       	andi	r27, 0x00	; 0
    141e:	e8 2a       	or	r14, r24
    1420:	f9 2a       	or	r15, r25
    1422:	0a 2b       	or	r16, r26
    1424:	1b 2b       	or	r17, r27
    1426:	e2 16       	cp	r14, r18
    1428:	f3 06       	cpc	r15, r19
    142a:	04 07       	cpc	r16, r20
    142c:	15 07       	cpc	r17, r21
    142e:	90 f4       	brcc	.+36     	; 0x1454 <__umoddi3+0x680>
    1430:	e2 0c       	add	r14, r2
    1432:	f3 1c       	adc	r15, r3
    1434:	04 1d       	adc	r16, r4
    1436:	15 1d       	adc	r17, r5
    1438:	e2 14       	cp	r14, r2
    143a:	f3 04       	cpc	r15, r3
    143c:	04 05       	cpc	r16, r4
    143e:	15 05       	cpc	r17, r5
    1440:	48 f0       	brcs	.+18     	; 0x1454 <__umoddi3+0x680>
    1442:	e2 16       	cp	r14, r18
    1444:	f3 06       	cpc	r15, r19
    1446:	04 07       	cpc	r16, r20
    1448:	15 07       	cpc	r17, r21
    144a:	20 f4       	brcc	.+8      	; 0x1454 <__umoddi3+0x680>
    144c:	e2 0c       	add	r14, r2
    144e:	f3 1c       	adc	r15, r3
    1450:	04 1d       	adc	r16, r4
    1452:	15 1d       	adc	r17, r5
    1454:	e2 1a       	sub	r14, r18
    1456:	f3 0a       	sbc	r15, r19
    1458:	04 0b       	sbc	r16, r20
    145a:	15 0b       	sbc	r17, r21
    145c:	d8 01       	movw	r26, r16
    145e:	c7 01       	movw	r24, r14
    1460:	09 ac       	ldd	r0, Y+57	; 0x39
    1462:	04 c0       	rjmp	.+8      	; 0x146c <__umoddi3+0x698>
    1464:	b6 95       	lsr	r27
    1466:	a7 95       	ror	r26
    1468:	97 95       	ror	r25
    146a:	87 95       	ror	r24
    146c:	0a 94       	dec	r0
    146e:	d2 f7       	brpl	.-12     	; 0x1464 <__umoddi3+0x690>
    1470:	89 8b       	std	Y+17, r24	; 0x11
    1472:	9a 8b       	std	Y+18, r25	; 0x12
    1474:	ab 8b       	std	Y+19, r26	; 0x13
    1476:	bc 8b       	std	Y+20, r27	; 0x14
    1478:	1d 8a       	std	Y+21, r1	; 0x15
    147a:	1e 8a       	std	Y+22, r1	; 0x16
    147c:	1f 8a       	std	Y+23, r1	; 0x17
    147e:	18 8e       	std	Y+24, r1	; 0x18
    1480:	28 2f       	mov	r18, r24
    1482:	3a 89       	ldd	r19, Y+18	; 0x12
    1484:	4b 89       	ldd	r20, Y+19	; 0x13
    1486:	5c 89       	ldd	r21, Y+20	; 0x14
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	0c c3       	rjmp	.+1560   	; 0x1aa4 <__umoddi3+0xcd0>
    148c:	6a 14       	cp	r6, r10
    148e:	7b 04       	cpc	r7, r11
    1490:	8c 04       	cpc	r8, r12
    1492:	9d 04       	cpc	r9, r13
    1494:	08 f4       	brcc	.+2      	; 0x1498 <__umoddi3+0x6c4>
    1496:	09 c3       	rjmp	.+1554   	; 0x1aaa <__umoddi3+0xcd6>
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	a0 16       	cp	r10, r16
    149c:	00 e0       	ldi	r16, 0x00	; 0
    149e:	b0 06       	cpc	r11, r16
    14a0:	01 e0       	ldi	r16, 0x01	; 1
    14a2:	c0 06       	cpc	r12, r16
    14a4:	00 e0       	ldi	r16, 0x00	; 0
    14a6:	d0 06       	cpc	r13, r16
    14a8:	88 f4       	brcc	.+34     	; 0x14cc <__umoddi3+0x6f8>
    14aa:	1f ef       	ldi	r17, 0xFF	; 255
    14ac:	a1 16       	cp	r10, r17
    14ae:	b1 04       	cpc	r11, r1
    14b0:	c1 04       	cpc	r12, r1
    14b2:	d1 04       	cpc	r13, r1
    14b4:	39 f0       	breq	.+14     	; 0x14c4 <__umoddi3+0x6f0>
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <__umoddi3+0x6f0>
    14b8:	28 e0       	ldi	r18, 0x08	; 8
    14ba:	e2 2e       	mov	r14, r18
    14bc:	f1 2c       	mov	r15, r1
    14be:	01 2d       	mov	r16, r1
    14c0:	11 2d       	mov	r17, r1
    14c2:	18 c0       	rjmp	.+48     	; 0x14f4 <__umoddi3+0x720>
    14c4:	ee 24       	eor	r14, r14
    14c6:	ff 24       	eor	r15, r15
    14c8:	87 01       	movw	r16, r14
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <__umoddi3+0x720>
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	a4 16       	cp	r10, r20
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	b4 06       	cpc	r11, r20
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	c4 06       	cpc	r12, r20
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	d4 06       	cpc	r13, r20
    14dc:	30 f0       	brcs	.+12     	; 0x14ea <__umoddi3+0x716>
    14de:	98 e1       	ldi	r25, 0x18	; 24
    14e0:	e9 2e       	mov	r14, r25
    14e2:	f1 2c       	mov	r15, r1
    14e4:	01 2d       	mov	r16, r1
    14e6:	11 2d       	mov	r17, r1
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <__umoddi3+0x720>
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	e8 2e       	mov	r14, r24
    14ee:	f1 2c       	mov	r15, r1
    14f0:	01 2d       	mov	r16, r1
    14f2:	11 2d       	mov	r17, r1
    14f4:	d6 01       	movw	r26, r12
    14f6:	c5 01       	movw	r24, r10
    14f8:	0e 2c       	mov	r0, r14
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__umoddi3+0x730>
    14fc:	b6 95       	lsr	r27
    14fe:	a7 95       	ror	r26
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	0a 94       	dec	r0
    1506:	d2 f7       	brpl	.-12     	; 0x14fc <__umoddi3+0x728>
    1508:	85 58       	subi	r24, 0x85	; 133
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	dc 01       	movw	r26, r24
    150e:	2c 91       	ld	r18, X
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	8e 19       	sub	r24, r14
    151a:	9f 09       	sbc	r25, r15
    151c:	a0 0b       	sbc	r26, r16
    151e:	b1 0b       	sbc	r27, r17
    1520:	82 1b       	sub	r24, r18
    1522:	91 09       	sbc	r25, r1
    1524:	a1 09       	sbc	r26, r1
    1526:	b1 09       	sbc	r27, r1
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	a1 05       	cpc	r26, r1
    152c:	b1 05       	cpc	r27, r1
    152e:	09 f0       	breq	.+2      	; 0x1532 <__umoddi3+0x75e>
    1530:	4f c0       	rjmp	.+158    	; 0x15d0 <__umoddi3+0x7fc>
    1532:	a6 14       	cp	r10, r6
    1534:	b7 04       	cpc	r11, r7
    1536:	c8 04       	cpc	r12, r8
    1538:	d9 04       	cpc	r13, r9
    153a:	58 f0       	brcs	.+22     	; 0x1552 <__umoddi3+0x77e>
    153c:	6c 96       	adiw	r28, 0x1c	; 28
    153e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1540:	fd ac       	ldd	r15, Y+61	; 0x3d
    1542:	0e ad       	ldd	r16, Y+62	; 0x3e
    1544:	1f ad       	ldd	r17, Y+63	; 0x3f
    1546:	6c 97       	sbiw	r28, 0x1c	; 28
    1548:	e2 14       	cp	r14, r2
    154a:	f3 04       	cpc	r15, r3
    154c:	04 05       	cpc	r16, r4
    154e:	15 05       	cpc	r17, r5
    1550:	68 f1       	brcs	.+90     	; 0x15ac <__umoddi3+0x7d8>
    1552:	6c 96       	adiw	r28, 0x1c	; 28
    1554:	ec ac       	ldd	r14, Y+60	; 0x3c
    1556:	fd ac       	ldd	r15, Y+61	; 0x3d
    1558:	0e ad       	ldd	r16, Y+62	; 0x3e
    155a:	1f ad       	ldd	r17, Y+63	; 0x3f
    155c:	6c 97       	sbiw	r28, 0x1c	; 28
    155e:	e2 18       	sub	r14, r2
    1560:	f3 08       	sbc	r15, r3
    1562:	04 09       	sbc	r16, r4
    1564:	15 09       	sbc	r17, r5
    1566:	a4 01       	movw	r20, r8
    1568:	93 01       	movw	r18, r6
    156a:	2a 19       	sub	r18, r10
    156c:	3b 09       	sbc	r19, r11
    156e:	4c 09       	sbc	r20, r12
    1570:	5d 09       	sbc	r21, r13
    1572:	aa 24       	eor	r10, r10
    1574:	bb 24       	eor	r11, r11
    1576:	65 01       	movw	r12, r10
    1578:	6c 96       	adiw	r28, 0x1c	; 28
    157a:	6c ad       	ldd	r22, Y+60	; 0x3c
    157c:	7d ad       	ldd	r23, Y+61	; 0x3d
    157e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1580:	9f ad       	ldd	r25, Y+63	; 0x3f
    1582:	6c 97       	sbiw	r28, 0x1c	; 28
    1584:	6e 15       	cp	r22, r14
    1586:	7f 05       	cpc	r23, r15
    1588:	80 07       	cpc	r24, r16
    158a:	91 07       	cpc	r25, r17
    158c:	28 f4       	brcc	.+10     	; 0x1598 <__umoddi3+0x7c4>
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	ab 2e       	mov	r10, r27
    1592:	b1 2c       	mov	r11, r1
    1594:	c1 2c       	mov	r12, r1
    1596:	d1 2c       	mov	r13, r1
    1598:	da 01       	movw	r26, r20
    159a:	c9 01       	movw	r24, r18
    159c:	8a 19       	sub	r24, r10
    159e:	9b 09       	sbc	r25, r11
    15a0:	ac 09       	sbc	r26, r12
    15a2:	bd 09       	sbc	r27, r13
    15a4:	8d ab       	std	Y+53, r24	; 0x35
    15a6:	9e ab       	std	Y+54, r25	; 0x36
    15a8:	af ab       	std	Y+55, r26	; 0x37
    15aa:	b8 af       	std	Y+56, r27	; 0x38
    15ac:	e9 8a       	std	Y+17, r14	; 0x11
    15ae:	fa 8a       	std	Y+18, r15	; 0x12
    15b0:	0b 8b       	std	Y+19, r16	; 0x13
    15b2:	1c 8b       	std	Y+20, r17	; 0x14
    15b4:	6d a8       	ldd	r6, Y+53	; 0x35
    15b6:	7e a8       	ldd	r7, Y+54	; 0x36
    15b8:	8f a8       	ldd	r8, Y+55	; 0x37
    15ba:	98 ac       	ldd	r9, Y+56	; 0x38
    15bc:	6d 8a       	std	Y+21, r6	; 0x15
    15be:	7e 8a       	std	Y+22, r7	; 0x16
    15c0:	8f 8a       	std	Y+23, r8	; 0x17
    15c2:	98 8e       	std	Y+24, r9	; 0x18
    15c4:	2e 2d       	mov	r18, r14
    15c6:	3a 89       	ldd	r19, Y+18	; 0x12
    15c8:	4b 89       	ldd	r20, Y+19	; 0x13
    15ca:	5c 89       	ldd	r21, Y+20	; 0x14
    15cc:	6d a9       	ldd	r22, Y+53	; 0x35
    15ce:	6a c2       	rjmp	.+1236   	; 0x1aa4 <__umoddi3+0xcd0>
    15d0:	67 96       	adiw	r28, 0x17	; 23
    15d2:	8f af       	std	Y+63, r24	; 0x3f
    15d4:	67 97       	sbiw	r28, 0x17	; 23
    15d6:	a6 01       	movw	r20, r12
    15d8:	95 01       	movw	r18, r10
    15da:	08 2e       	mov	r0, r24
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <__umoddi3+0x812>
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	44 1f       	adc	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	0a 94       	dec	r0
    15e8:	d2 f7       	brpl	.-12     	; 0x15de <__umoddi3+0x80a>
    15ea:	a0 e2       	ldi	r26, 0x20	; 32
    15ec:	aa 2e       	mov	r10, r26
    15ee:	a8 1a       	sub	r10, r24
    15f0:	66 96       	adiw	r28, 0x16	; 22
    15f2:	af ae       	std	Y+63, r10	; 0x3f
    15f4:	66 97       	sbiw	r28, 0x16	; 22
    15f6:	d2 01       	movw	r26, r4
    15f8:	c1 01       	movw	r24, r2
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <__umoddi3+0x830>
    15fc:	b6 95       	lsr	r27
    15fe:	a7 95       	ror	r26
    1600:	97 95       	ror	r25
    1602:	87 95       	ror	r24
    1604:	aa 94       	dec	r10
    1606:	d2 f7       	brpl	.-12     	; 0x15fc <__umoddi3+0x828>
    1608:	6c 01       	movw	r12, r24
    160a:	7d 01       	movw	r14, r26
    160c:	c2 2a       	or	r12, r18
    160e:	d3 2a       	or	r13, r19
    1610:	e4 2a       	or	r14, r20
    1612:	f5 2a       	or	r15, r21
    1614:	c9 a6       	std	Y+41, r12	; 0x29
    1616:	da a6       	std	Y+42, r13	; 0x2a
    1618:	eb a6       	std	Y+43, r14	; 0x2b
    161a:	fc a6       	std	Y+44, r15	; 0x2c
    161c:	82 01       	movw	r16, r4
    161e:	71 01       	movw	r14, r2
    1620:	67 96       	adiw	r28, 0x17	; 23
    1622:	0f ac       	ldd	r0, Y+63	; 0x3f
    1624:	67 97       	sbiw	r28, 0x17	; 23
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <__umoddi3+0x85c>
    1628:	ee 0c       	add	r14, r14
    162a:	ff 1c       	adc	r15, r15
    162c:	00 1f       	adc	r16, r16
    162e:	11 1f       	adc	r17, r17
    1630:	0a 94       	dec	r0
    1632:	d2 f7       	brpl	.-12     	; 0x1628 <__umoddi3+0x854>
    1634:	ed a2       	std	Y+37, r14	; 0x25
    1636:	fe a2       	std	Y+38, r15	; 0x26
    1638:	0f a3       	std	Y+39, r16	; 0x27
    163a:	18 a7       	std	Y+40, r17	; 0x28
    163c:	64 01       	movw	r12, r8
    163e:	53 01       	movw	r10, r6
    1640:	66 96       	adiw	r28, 0x16	; 22
    1642:	0f ac       	ldd	r0, Y+63	; 0x3f
    1644:	66 97       	sbiw	r28, 0x16	; 22
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <__umoddi3+0x87c>
    1648:	d6 94       	lsr	r13
    164a:	c7 94       	ror	r12
    164c:	b7 94       	ror	r11
    164e:	a7 94       	ror	r10
    1650:	0a 94       	dec	r0
    1652:	d2 f7       	brpl	.-12     	; 0x1648 <__umoddi3+0x874>
    1654:	a4 01       	movw	r20, r8
    1656:	93 01       	movw	r18, r6
    1658:	67 96       	adiw	r28, 0x17	; 23
    165a:	0f ac       	ldd	r0, Y+63	; 0x3f
    165c:	67 97       	sbiw	r28, 0x17	; 23
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__umoddi3+0x894>
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	44 1f       	adc	r20, r20
    1666:	55 1f       	adc	r21, r21
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__umoddi3+0x88c>
    166c:	6c 96       	adiw	r28, 0x1c	; 28
    166e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1670:	9d ad       	ldd	r25, Y+61	; 0x3d
    1672:	ae ad       	ldd	r26, Y+62	; 0x3e
    1674:	bf ad       	ldd	r27, Y+63	; 0x3f
    1676:	6c 97       	sbiw	r28, 0x1c	; 28
    1678:	66 96       	adiw	r28, 0x16	; 22
    167a:	0f ac       	ldd	r0, Y+63	; 0x3f
    167c:	66 97       	sbiw	r28, 0x16	; 22
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <__umoddi3+0x8b4>
    1680:	b6 95       	lsr	r27
    1682:	a7 95       	ror	r26
    1684:	97 95       	ror	r25
    1686:	87 95       	ror	r24
    1688:	0a 94       	dec	r0
    168a:	d2 f7       	brpl	.-12     	; 0x1680 <__umoddi3+0x8ac>
    168c:	3c 01       	movw	r6, r24
    168e:	4d 01       	movw	r8, r26
    1690:	62 2a       	or	r6, r18
    1692:	73 2a       	or	r7, r19
    1694:	84 2a       	or	r8, r20
    1696:	95 2a       	or	r9, r21
    1698:	69 a2       	std	Y+33, r6	; 0x21
    169a:	7a a2       	std	Y+34, r7	; 0x22
    169c:	8b a2       	std	Y+35, r8	; 0x23
    169e:	9c a2       	std	Y+36, r9	; 0x24
    16a0:	6c 96       	adiw	r28, 0x1c	; 28
    16a2:	ec ac       	ldd	r14, Y+60	; 0x3c
    16a4:	fd ac       	ldd	r15, Y+61	; 0x3d
    16a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    16a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    16aa:	6c 97       	sbiw	r28, 0x1c	; 28
    16ac:	67 96       	adiw	r28, 0x17	; 23
    16ae:	0f ac       	ldd	r0, Y+63	; 0x3f
    16b0:	67 97       	sbiw	r28, 0x17	; 23
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <__umoddi3+0x8e8>
    16b4:	ee 0c       	add	r14, r14
    16b6:	ff 1c       	adc	r15, r15
    16b8:	00 1f       	adc	r16, r16
    16ba:	11 1f       	adc	r17, r17
    16bc:	0a 94       	dec	r0
    16be:	d2 f7       	brpl	.-12     	; 0x16b4 <__umoddi3+0x8e0>
    16c0:	ed 8e       	std	Y+29, r14	; 0x1d
    16c2:	fe 8e       	std	Y+30, r15	; 0x1e
    16c4:	0f 8f       	std	Y+31, r16	; 0x1f
    16c6:	18 a3       	std	Y+32, r17	; 0x20
    16c8:	49 a5       	ldd	r20, Y+41	; 0x29
    16ca:	5a a5       	ldd	r21, Y+42	; 0x2a
    16cc:	6b a5       	ldd	r22, Y+43	; 0x2b
    16ce:	7c a5       	ldd	r23, Y+44	; 0x2c
    16d0:	3b 01       	movw	r6, r22
    16d2:	88 24       	eor	r8, r8
    16d4:	99 24       	eor	r9, r9
    16d6:	60 70       	andi	r22, 0x00	; 0
    16d8:	70 70       	andi	r23, 0x00	; 0
    16da:	2d 96       	adiw	r28, 0x0d	; 13
    16dc:	4c af       	std	Y+60, r20	; 0x3c
    16de:	5d af       	std	Y+61, r21	; 0x3d
    16e0:	6e af       	std	Y+62, r22	; 0x3e
    16e2:	7f af       	std	Y+63, r23	; 0x3f
    16e4:	2d 97       	sbiw	r28, 0x0d	; 13
    16e6:	c6 01       	movw	r24, r12
    16e8:	b5 01       	movw	r22, r10
    16ea:	a4 01       	movw	r20, r8
    16ec:	93 01       	movw	r18, r6
    16ee:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    16f2:	7b 01       	movw	r14, r22
    16f4:	8c 01       	movw	r16, r24
    16f6:	c6 01       	movw	r24, r12
    16f8:	b5 01       	movw	r22, r10
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    1702:	c9 01       	movw	r24, r18
    1704:	da 01       	movw	r26, r20
    1706:	1c 01       	movw	r2, r24
    1708:	2d 01       	movw	r4, r26
    170a:	c2 01       	movw	r24, r4
    170c:	b1 01       	movw	r22, r2
    170e:	2d 96       	adiw	r28, 0x0d	; 13
    1710:	2c ad       	ldd	r18, Y+60	; 0x3c
    1712:	3d ad       	ldd	r19, Y+61	; 0x3d
    1714:	4e ad       	ldd	r20, Y+62	; 0x3e
    1716:	5f ad       	ldd	r21, Y+63	; 0x3f
    1718:	2d 97       	sbiw	r28, 0x0d	; 13
    171a:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	87 01       	movw	r16, r14
    1724:	ff 24       	eor	r15, r15
    1726:	ee 24       	eor	r14, r14
    1728:	a9 a0       	ldd	r10, Y+33	; 0x21
    172a:	ba a0       	ldd	r11, Y+34	; 0x22
    172c:	cb a0       	ldd	r12, Y+35	; 0x23
    172e:	dc a0       	ldd	r13, Y+36	; 0x24
    1730:	c6 01       	movw	r24, r12
    1732:	aa 27       	eor	r26, r26
    1734:	bb 27       	eor	r27, r27
    1736:	57 01       	movw	r10, r14
    1738:	68 01       	movw	r12, r16
    173a:	a8 2a       	or	r10, r24
    173c:	b9 2a       	or	r11, r25
    173e:	ca 2a       	or	r12, r26
    1740:	db 2a       	or	r13, r27
    1742:	a2 16       	cp	r10, r18
    1744:	b3 06       	cpc	r11, r19
    1746:	c4 06       	cpc	r12, r20
    1748:	d5 06       	cpc	r13, r21
    174a:	00 f5       	brcc	.+64     	; 0x178c <__umoddi3+0x9b8>
    174c:	08 94       	sec
    174e:	21 08       	sbc	r2, r1
    1750:	31 08       	sbc	r3, r1
    1752:	41 08       	sbc	r4, r1
    1754:	51 08       	sbc	r5, r1
    1756:	e9 a4       	ldd	r14, Y+41	; 0x29
    1758:	fa a4       	ldd	r15, Y+42	; 0x2a
    175a:	0b a5       	ldd	r16, Y+43	; 0x2b
    175c:	1c a5       	ldd	r17, Y+44	; 0x2c
    175e:	ae 0c       	add	r10, r14
    1760:	bf 1c       	adc	r11, r15
    1762:	c0 1e       	adc	r12, r16
    1764:	d1 1e       	adc	r13, r17
    1766:	ae 14       	cp	r10, r14
    1768:	bf 04       	cpc	r11, r15
    176a:	c0 06       	cpc	r12, r16
    176c:	d1 06       	cpc	r13, r17
    176e:	70 f0       	brcs	.+28     	; 0x178c <__umoddi3+0x9b8>
    1770:	a2 16       	cp	r10, r18
    1772:	b3 06       	cpc	r11, r19
    1774:	c4 06       	cpc	r12, r20
    1776:	d5 06       	cpc	r13, r21
    1778:	48 f4       	brcc	.+18     	; 0x178c <__umoddi3+0x9b8>
    177a:	08 94       	sec
    177c:	21 08       	sbc	r2, r1
    177e:	31 08       	sbc	r3, r1
    1780:	41 08       	sbc	r4, r1
    1782:	51 08       	sbc	r5, r1
    1784:	ae 0c       	add	r10, r14
    1786:	bf 1c       	adc	r11, r15
    1788:	c0 1e       	adc	r12, r16
    178a:	d1 1e       	adc	r13, r17
    178c:	a2 1a       	sub	r10, r18
    178e:	b3 0a       	sbc	r11, r19
    1790:	c4 0a       	sbc	r12, r20
    1792:	d5 0a       	sbc	r13, r21
    1794:	c6 01       	movw	r24, r12
    1796:	b5 01       	movw	r22, r10
    1798:	a4 01       	movw	r20, r8
    179a:	93 01       	movw	r18, r6
    179c:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    17a0:	7b 01       	movw	r14, r22
    17a2:	8c 01       	movw	r16, r24
    17a4:	c6 01       	movw	r24, r12
    17a6:	b5 01       	movw	r22, r10
    17a8:	a4 01       	movw	r20, r8
    17aa:	93 01       	movw	r18, r6
    17ac:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__udivmodsi4>
    17b0:	c9 01       	movw	r24, r18
    17b2:	da 01       	movw	r26, r20
    17b4:	3c 01       	movw	r6, r24
    17b6:	4d 01       	movw	r8, r26
    17b8:	c4 01       	movw	r24, r8
    17ba:	b3 01       	movw	r22, r6
    17bc:	2d 96       	adiw	r28, 0x0d	; 13
    17be:	2c ad       	ldd	r18, Y+60	; 0x3c
    17c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    17c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c6:	2d 97       	sbiw	r28, 0x0d	; 13
    17c8:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	87 01       	movw	r16, r14
    17d2:	ff 24       	eor	r15, r15
    17d4:	ee 24       	eor	r14, r14
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	9a a1       	ldd	r25, Y+34	; 0x22
    17da:	ab a1       	ldd	r26, Y+35	; 0x23
    17dc:	bc a1       	ldd	r27, Y+36	; 0x24
    17de:	a0 70       	andi	r26, 0x00	; 0
    17e0:	b0 70       	andi	r27, 0x00	; 0
    17e2:	57 01       	movw	r10, r14
    17e4:	68 01       	movw	r12, r16
    17e6:	a8 2a       	or	r10, r24
    17e8:	b9 2a       	or	r11, r25
    17ea:	ca 2a       	or	r12, r26
    17ec:	db 2a       	or	r13, r27
    17ee:	a2 16       	cp	r10, r18
    17f0:	b3 06       	cpc	r11, r19
    17f2:	c4 06       	cpc	r12, r20
    17f4:	d5 06       	cpc	r13, r21
    17f6:	00 f5       	brcc	.+64     	; 0x1838 <__umoddi3+0xa64>
    17f8:	08 94       	sec
    17fa:	61 08       	sbc	r6, r1
    17fc:	71 08       	sbc	r7, r1
    17fe:	81 08       	sbc	r8, r1
    1800:	91 08       	sbc	r9, r1
    1802:	69 a5       	ldd	r22, Y+41	; 0x29
    1804:	7a a5       	ldd	r23, Y+42	; 0x2a
    1806:	8b a5       	ldd	r24, Y+43	; 0x2b
    1808:	9c a5       	ldd	r25, Y+44	; 0x2c
    180a:	a6 0e       	add	r10, r22
    180c:	b7 1e       	adc	r11, r23
    180e:	c8 1e       	adc	r12, r24
    1810:	d9 1e       	adc	r13, r25
    1812:	a6 16       	cp	r10, r22
    1814:	b7 06       	cpc	r11, r23
    1816:	c8 06       	cpc	r12, r24
    1818:	d9 06       	cpc	r13, r25
    181a:	70 f0       	brcs	.+28     	; 0x1838 <__umoddi3+0xa64>
    181c:	a2 16       	cp	r10, r18
    181e:	b3 06       	cpc	r11, r19
    1820:	c4 06       	cpc	r12, r20
    1822:	d5 06       	cpc	r13, r21
    1824:	48 f4       	brcc	.+18     	; 0x1838 <__umoddi3+0xa64>
    1826:	08 94       	sec
    1828:	61 08       	sbc	r6, r1
    182a:	71 08       	sbc	r7, r1
    182c:	81 08       	sbc	r8, r1
    182e:	91 08       	sbc	r9, r1
    1830:	a6 0e       	add	r10, r22
    1832:	b7 1e       	adc	r11, r23
    1834:	c8 1e       	adc	r12, r24
    1836:	d9 1e       	adc	r13, r25
    1838:	d6 01       	movw	r26, r12
    183a:	c5 01       	movw	r24, r10
    183c:	82 1b       	sub	r24, r18
    183e:	93 0b       	sbc	r25, r19
    1840:	a4 0b       	sbc	r26, r20
    1842:	b5 0b       	sbc	r27, r21
    1844:	89 8f       	std	Y+25, r24	; 0x19
    1846:	9a 8f       	std	Y+26, r25	; 0x1a
    1848:	ab 8f       	std	Y+27, r26	; 0x1b
    184a:	bc 8f       	std	Y+28, r27	; 0x1c
    184c:	d1 01       	movw	r26, r2
    184e:	99 27       	eor	r25, r25
    1850:	88 27       	eor	r24, r24
    1852:	84 01       	movw	r16, r8
    1854:	73 01       	movw	r14, r6
    1856:	e8 2a       	or	r14, r24
    1858:	f9 2a       	or	r15, r25
    185a:	0a 2b       	or	r16, r26
    185c:	1b 2b       	or	r17, r27
    185e:	4f ef       	ldi	r20, 0xFF	; 255
    1860:	a4 2e       	mov	r10, r20
    1862:	4f ef       	ldi	r20, 0xFF	; 255
    1864:	b4 2e       	mov	r11, r20
    1866:	c1 2c       	mov	r12, r1
    1868:	d1 2c       	mov	r13, r1
    186a:	ae 20       	and	r10, r14
    186c:	bf 20       	and	r11, r15
    186e:	c0 22       	and	r12, r16
    1870:	d1 22       	and	r13, r17
    1872:	78 01       	movw	r14, r16
    1874:	00 27       	eor	r16, r16
    1876:	11 27       	eor	r17, r17
    1878:	6d a0       	ldd	r6, Y+37	; 0x25
    187a:	7e a0       	ldd	r7, Y+38	; 0x26
    187c:	8f a0       	ldd	r8, Y+39	; 0x27
    187e:	98 a4       	ldd	r9, Y+40	; 0x28
    1880:	4f ef       	ldi	r20, 0xFF	; 255
    1882:	5f ef       	ldi	r21, 0xFF	; 255
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	64 22       	and	r6, r20
    188a:	75 22       	and	r7, r21
    188c:	86 22       	and	r8, r22
    188e:	97 22       	and	r9, r23
    1890:	8d a1       	ldd	r24, Y+37	; 0x25
    1892:	9e a1       	ldd	r25, Y+38	; 0x26
    1894:	af a1       	ldd	r26, Y+39	; 0x27
    1896:	b8 a5       	ldd	r27, Y+40	; 0x28
    1898:	bd 01       	movw	r22, r26
    189a:	88 27       	eor	r24, r24
    189c:	99 27       	eor	r25, r25
    189e:	65 96       	adiw	r28, 0x15	; 21
    18a0:	6c af       	std	Y+60, r22	; 0x3c
    18a2:	7d af       	std	Y+61, r23	; 0x3d
    18a4:	8e af       	std	Y+62, r24	; 0x3e
    18a6:	9f af       	std	Y+63, r25	; 0x3f
    18a8:	65 97       	sbiw	r28, 0x15	; 21
    18aa:	c6 01       	movw	r24, r12
    18ac:	b5 01       	movw	r22, r10
    18ae:	a4 01       	movw	r20, r8
    18b0:	93 01       	movw	r18, r6
    18b2:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    18b6:	61 96       	adiw	r28, 0x11	; 17
    18b8:	6c af       	std	Y+60, r22	; 0x3c
    18ba:	7d af       	std	Y+61, r23	; 0x3d
    18bc:	8e af       	std	Y+62, r24	; 0x3e
    18be:	9f af       	std	Y+63, r25	; 0x3f
    18c0:	61 97       	sbiw	r28, 0x11	; 17
    18c2:	c6 01       	movw	r24, r12
    18c4:	b5 01       	movw	r22, r10
    18c6:	65 96       	adiw	r28, 0x15	; 21
    18c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    18cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    18d0:	65 97       	sbiw	r28, 0x15	; 21
    18d2:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    18d6:	1b 01       	movw	r2, r22
    18d8:	2c 01       	movw	r4, r24
    18da:	c8 01       	movw	r24, r16
    18dc:	b7 01       	movw	r22, r14
    18de:	a4 01       	movw	r20, r8
    18e0:	93 01       	movw	r18, r6
    18e2:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    18e6:	5b 01       	movw	r10, r22
    18e8:	6c 01       	movw	r12, r24
    18ea:	c8 01       	movw	r24, r16
    18ec:	b7 01       	movw	r22, r14
    18ee:	65 96       	adiw	r28, 0x15	; 21
    18f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f8:	65 97       	sbiw	r28, 0x15	; 21
    18fa:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    18fe:	7b 01       	movw	r14, r22
    1900:	8c 01       	movw	r16, r24
    1902:	a6 01       	movw	r20, r12
    1904:	95 01       	movw	r18, r10
    1906:	22 0d       	add	r18, r2
    1908:	33 1d       	adc	r19, r3
    190a:	44 1d       	adc	r20, r4
    190c:	55 1d       	adc	r21, r5
    190e:	61 96       	adiw	r28, 0x11	; 17
    1910:	6c ac       	ldd	r6, Y+60	; 0x3c
    1912:	7d ac       	ldd	r7, Y+61	; 0x3d
    1914:	8e ac       	ldd	r8, Y+62	; 0x3e
    1916:	9f ac       	ldd	r9, Y+63	; 0x3f
    1918:	61 97       	sbiw	r28, 0x11	; 17
    191a:	c4 01       	movw	r24, r8
    191c:	aa 27       	eor	r26, r26
    191e:	bb 27       	eor	r27, r27
    1920:	28 0f       	add	r18, r24
    1922:	39 1f       	adc	r19, r25
    1924:	4a 1f       	adc	r20, r26
    1926:	5b 1f       	adc	r21, r27
    1928:	2a 15       	cp	r18, r10
    192a:	3b 05       	cpc	r19, r11
    192c:	4c 05       	cpc	r20, r12
    192e:	5d 05       	cpc	r21, r13
    1930:	48 f4       	brcc	.+18     	; 0x1944 <__umoddi3+0xb70>
    1932:	81 2c       	mov	r8, r1
    1934:	91 2c       	mov	r9, r1
    1936:	e1 e0       	ldi	r30, 0x01	; 1
    1938:	ae 2e       	mov	r10, r30
    193a:	b1 2c       	mov	r11, r1
    193c:	e8 0c       	add	r14, r8
    193e:	f9 1c       	adc	r15, r9
    1940:	0a 1d       	adc	r16, r10
    1942:	1b 1d       	adc	r17, r11
    1944:	ca 01       	movw	r24, r20
    1946:	aa 27       	eor	r26, r26
    1948:	bb 27       	eor	r27, r27
    194a:	57 01       	movw	r10, r14
    194c:	68 01       	movw	r12, r16
    194e:	a8 0e       	add	r10, r24
    1950:	b9 1e       	adc	r11, r25
    1952:	ca 1e       	adc	r12, r26
    1954:	db 1e       	adc	r13, r27
    1956:	a9 01       	movw	r20, r18
    1958:	33 27       	eor	r19, r19
    195a:	22 27       	eor	r18, r18
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1960:	9d ad       	ldd	r25, Y+61	; 0x3d
    1962:	ae ad       	ldd	r26, Y+62	; 0x3e
    1964:	bf ad       	ldd	r27, Y+63	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	a0 70       	andi	r26, 0x00	; 0
    196a:	b0 70       	andi	r27, 0x00	; 0
    196c:	28 0f       	add	r18, r24
    196e:	39 1f       	adc	r19, r25
    1970:	4a 1f       	adc	r20, r26
    1972:	5b 1f       	adc	r21, r27
    1974:	e9 8c       	ldd	r14, Y+25	; 0x19
    1976:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1978:	0b 8d       	ldd	r16, Y+27	; 0x1b
    197a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    197c:	ea 14       	cp	r14, r10
    197e:	fb 04       	cpc	r15, r11
    1980:	0c 05       	cpc	r16, r12
    1982:	1d 05       	cpc	r17, r13
    1984:	70 f0       	brcs	.+28     	; 0x19a2 <__umoddi3+0xbce>
    1986:	ae 14       	cp	r10, r14
    1988:	bf 04       	cpc	r11, r15
    198a:	c0 06       	cpc	r12, r16
    198c:	d1 06       	cpc	r13, r17
    198e:	69 f5       	brne	.+90     	; 0x19ea <__umoddi3+0xc16>
    1990:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1992:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1996:	98 a1       	ldd	r25, Y+32	; 0x20
    1998:	62 17       	cp	r22, r18
    199a:	73 07       	cpc	r23, r19
    199c:	84 07       	cpc	r24, r20
    199e:	95 07       	cpc	r25, r21
    19a0:	20 f5       	brcc	.+72     	; 0x19ea <__umoddi3+0xc16>
    19a2:	da 01       	movw	r26, r20
    19a4:	c9 01       	movw	r24, r18
    19a6:	6d a0       	ldd	r6, Y+37	; 0x25
    19a8:	7e a0       	ldd	r7, Y+38	; 0x26
    19aa:	8f a0       	ldd	r8, Y+39	; 0x27
    19ac:	98 a4       	ldd	r9, Y+40	; 0x28
    19ae:	86 19       	sub	r24, r6
    19b0:	97 09       	sbc	r25, r7
    19b2:	a8 09       	sbc	r26, r8
    19b4:	b9 09       	sbc	r27, r9
    19b6:	e9 a4       	ldd	r14, Y+41	; 0x29
    19b8:	fa a4       	ldd	r15, Y+42	; 0x2a
    19ba:	0b a5       	ldd	r16, Y+43	; 0x2b
    19bc:	1c a5       	ldd	r17, Y+44	; 0x2c
    19be:	ae 18       	sub	r10, r14
    19c0:	bf 08       	sbc	r11, r15
    19c2:	c0 0a       	sbc	r12, r16
    19c4:	d1 0a       	sbc	r13, r17
    19c6:	ee 24       	eor	r14, r14
    19c8:	ff 24       	eor	r15, r15
    19ca:	87 01       	movw	r16, r14
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	4a 07       	cpc	r20, r26
    19d2:	5b 07       	cpc	r21, r27
    19d4:	28 f4       	brcc	.+10     	; 0x19e0 <__umoddi3+0xc0c>
    19d6:	21 e0       	ldi	r18, 0x01	; 1
    19d8:	e2 2e       	mov	r14, r18
    19da:	f1 2c       	mov	r15, r1
    19dc:	01 2d       	mov	r16, r1
    19de:	11 2d       	mov	r17, r1
    19e0:	ae 18       	sub	r10, r14
    19e2:	bf 08       	sbc	r11, r15
    19e4:	c0 0a       	sbc	r12, r16
    19e6:	d1 0a       	sbc	r13, r17
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <__umoddi3+0xc1a>
    19ea:	da 01       	movw	r26, r20
    19ec:	c9 01       	movw	r24, r18
    19ee:	6d 8c       	ldd	r6, Y+29	; 0x1d
    19f0:	7e 8c       	ldd	r7, Y+30	; 0x1e
    19f2:	8f 8c       	ldd	r8, Y+31	; 0x1f
    19f4:	98 a0       	ldd	r9, Y+32	; 0x20
    19f6:	68 1a       	sub	r6, r24
    19f8:	79 0a       	sbc	r7, r25
    19fa:	8a 0a       	sbc	r8, r26
    19fc:	9b 0a       	sbc	r9, r27
    19fe:	49 8d       	ldd	r20, Y+25	; 0x19
    1a00:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a02:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a04:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a06:	4a 19       	sub	r20, r10
    1a08:	5b 09       	sbc	r21, r11
    1a0a:	6c 09       	sbc	r22, r12
    1a0c:	7d 09       	sbc	r23, r13
    1a0e:	5a 01       	movw	r10, r20
    1a10:	6b 01       	movw	r12, r22
    1a12:	22 24       	eor	r2, r2
    1a14:	33 24       	eor	r3, r3
    1a16:	21 01       	movw	r4, r2
    1a18:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a1a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a20:	66 15       	cp	r22, r6
    1a22:	77 05       	cpc	r23, r7
    1a24:	88 05       	cpc	r24, r8
    1a26:	99 05       	cpc	r25, r9
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <__umoddi3+0xc60>
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	28 2e       	mov	r2, r24
    1a2e:	31 2c       	mov	r3, r1
    1a30:	41 2c       	mov	r4, r1
    1a32:	51 2c       	mov	r5, r1
    1a34:	86 01       	movw	r16, r12
    1a36:	75 01       	movw	r14, r10
    1a38:	e2 18       	sub	r14, r2
    1a3a:	f3 08       	sbc	r15, r3
    1a3c:	04 09       	sbc	r16, r4
    1a3e:	15 09       	sbc	r17, r5
    1a40:	a8 01       	movw	r20, r16
    1a42:	97 01       	movw	r18, r14
    1a44:	66 96       	adiw	r28, 0x16	; 22
    1a46:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a48:	66 97       	sbiw	r28, 0x16	; 22
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <__umoddi3+0xc80>
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	0a 94       	dec	r0
    1a56:	d2 f7       	brpl	.-12     	; 0x1a4c <__umoddi3+0xc78>
    1a58:	d4 01       	movw	r26, r8
    1a5a:	c3 01       	movw	r24, r6
    1a5c:	67 96       	adiw	r28, 0x17	; 23
    1a5e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a60:	67 97       	sbiw	r28, 0x17	; 23
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <__umoddi3+0xc98>
    1a64:	b6 95       	lsr	r27
    1a66:	a7 95       	ror	r26
    1a68:	97 95       	ror	r25
    1a6a:	87 95       	ror	r24
    1a6c:	0a 94       	dec	r0
    1a6e:	d2 f7       	brpl	.-12     	; 0x1a64 <__umoddi3+0xc90>
    1a70:	28 2b       	or	r18, r24
    1a72:	39 2b       	or	r19, r25
    1a74:	4a 2b       	or	r20, r26
    1a76:	5b 2b       	or	r21, r27
    1a78:	29 8b       	std	Y+17, r18	; 0x11
    1a7a:	3a 8b       	std	Y+18, r19	; 0x12
    1a7c:	4b 8b       	std	Y+19, r20	; 0x13
    1a7e:	5c 8b       	std	Y+20, r21	; 0x14
    1a80:	67 96       	adiw	r28, 0x17	; 23
    1a82:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a84:	67 97       	sbiw	r28, 0x17	; 23
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <__umoddi3+0xcbc>
    1a88:	16 95       	lsr	r17
    1a8a:	07 95       	ror	r16
    1a8c:	f7 94       	ror	r15
    1a8e:	e7 94       	ror	r14
    1a90:	0a 94       	dec	r0
    1a92:	d2 f7       	brpl	.-12     	; 0x1a88 <__umoddi3+0xcb4>
    1a94:	ed 8a       	std	Y+21, r14	; 0x15
    1a96:	fe 8a       	std	Y+22, r15	; 0x16
    1a98:	0f 8b       	std	Y+23, r16	; 0x17
    1a9a:	18 8f       	std	Y+24, r17	; 0x18
    1a9c:	3a 89       	ldd	r19, Y+18	; 0x12
    1a9e:	4b 89       	ldd	r20, Y+19	; 0x13
    1aa0:	5c 89       	ldd	r21, Y+20	; 0x14
    1aa2:	6e 2d       	mov	r22, r14
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	c5 5a       	subi	r28, 0xA5	; 165
    1aac:	df 4f       	sbci	r29, 0xFF	; 255
    1aae:	e2 e1       	ldi	r30, 0x12	; 18
    1ab0:	0c 94 22 25 	jmp	0x4a44	; 0x4a44 <__epilogue_restores__>

00001ab4 <_fpadd_parts>:
    1ab4:	a0 e0       	ldi	r26, 0x00	; 0
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e0 e6       	ldi	r30, 0x60	; 96
    1aba:	fd e0       	ldi	r31, 0x0D	; 13
    1abc:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__prologue_saves__>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	2b 01       	movw	r4, r22
    1ac4:	fa 01       	movw	r30, r20
    1ac6:	9c 91       	ld	r25, X
    1ac8:	92 30       	cpi	r25, 0x02	; 2
    1aca:	08 f4       	brcc	.+2      	; 0x1ace <_fpadd_parts+0x1a>
    1acc:	39 c1       	rjmp	.+626    	; 0x1d40 <_fpadd_parts+0x28c>
    1ace:	eb 01       	movw	r28, r22
    1ad0:	88 81       	ld	r24, Y
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	08 f4       	brcc	.+2      	; 0x1ad8 <_fpadd_parts+0x24>
    1ad6:	33 c1       	rjmp	.+614    	; 0x1d3e <_fpadd_parts+0x28a>
    1ad8:	94 30       	cpi	r25, 0x04	; 4
    1ada:	69 f4       	brne	.+26     	; 0x1af6 <_fpadd_parts+0x42>
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <_fpadd_parts+0x2e>
    1ae0:	2f c1       	rjmp	.+606    	; 0x1d40 <_fpadd_parts+0x28c>
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	9c 91       	ld	r25, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	98 17       	cp	r25, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <_fpadd_parts+0x3c>
    1aee:	28 c1       	rjmp	.+592    	; 0x1d40 <_fpadd_parts+0x28c>
    1af0:	a3 e7       	ldi	r26, 0x73	; 115
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	25 c1       	rjmp	.+586    	; 0x1d40 <_fpadd_parts+0x28c>
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	09 f4       	brne	.+2      	; 0x1afc <_fpadd_parts+0x48>
    1afa:	21 c1       	rjmp	.+578    	; 0x1d3e <_fpadd_parts+0x28a>
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	a9 f4       	brne	.+42     	; 0x1b2a <_fpadd_parts+0x76>
    1b00:	92 30       	cpi	r25, 0x02	; 2
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <_fpadd_parts+0x52>
    1b04:	1d c1       	rjmp	.+570    	; 0x1d40 <_fpadd_parts+0x28c>
    1b06:	9a 01       	movw	r18, r20
    1b08:	ad 01       	movw	r20, r26
    1b0a:	88 e0       	ldi	r24, 0x08	; 8
    1b0c:	ea 01       	movw	r28, r20
    1b0e:	09 90       	ld	r0, Y+
    1b10:	ae 01       	movw	r20, r28
    1b12:	e9 01       	movw	r28, r18
    1b14:	09 92       	st	Y+, r0
    1b16:	9e 01       	movw	r18, r28
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	c1 f7       	brne	.-16     	; 0x1b0c <_fpadd_parts+0x58>
    1b1c:	e2 01       	movw	r28, r4
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	11 96       	adiw	r26, 0x01	; 1
    1b22:	9c 91       	ld	r25, X
    1b24:	89 23       	and	r24, r25
    1b26:	81 83       	std	Z+1, r24	; 0x01
    1b28:	08 c1       	rjmp	.+528    	; 0x1d3a <_fpadd_parts+0x286>
    1b2a:	92 30       	cpi	r25, 0x02	; 2
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <_fpadd_parts+0x7c>
    1b2e:	07 c1       	rjmp	.+526    	; 0x1d3e <_fpadd_parts+0x28a>
    1b30:	12 96       	adiw	r26, 0x02	; 2
    1b32:	2d 90       	ld	r2, X+
    1b34:	3c 90       	ld	r3, X
    1b36:	13 97       	sbiw	r26, 0x03	; 3
    1b38:	eb 01       	movw	r28, r22
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	14 96       	adiw	r26, 0x04	; 4
    1b40:	ad 90       	ld	r10, X+
    1b42:	bd 90       	ld	r11, X+
    1b44:	cd 90       	ld	r12, X+
    1b46:	dc 90       	ld	r13, X
    1b48:	17 97       	sbiw	r26, 0x07	; 7
    1b4a:	ec 80       	ldd	r14, Y+4	; 0x04
    1b4c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4e:	0e 81       	ldd	r16, Y+6	; 0x06
    1b50:	1f 81       	ldd	r17, Y+7	; 0x07
    1b52:	91 01       	movw	r18, r2
    1b54:	28 1b       	sub	r18, r24
    1b56:	39 0b       	sbc	r19, r25
    1b58:	b9 01       	movw	r22, r18
    1b5a:	37 ff       	sbrs	r19, 7
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <_fpadd_parts+0xb2>
    1b5e:	66 27       	eor	r22, r22
    1b60:	77 27       	eor	r23, r23
    1b62:	62 1b       	sub	r22, r18
    1b64:	73 0b       	sbc	r23, r19
    1b66:	60 32       	cpi	r22, 0x20	; 32
    1b68:	71 05       	cpc	r23, r1
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <_fpadd_parts+0xba>
    1b6c:	61 c0       	rjmp	.+194    	; 0x1c30 <_fpadd_parts+0x17c>
    1b6e:	12 16       	cp	r1, r18
    1b70:	13 06       	cpc	r1, r19
    1b72:	6c f5       	brge	.+90     	; 0x1bce <_fpadd_parts+0x11a>
    1b74:	37 01       	movw	r6, r14
    1b76:	48 01       	movw	r8, r16
    1b78:	06 2e       	mov	r0, r22
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <_fpadd_parts+0xd0>
    1b7c:	96 94       	lsr	r9
    1b7e:	87 94       	ror	r8
    1b80:	77 94       	ror	r7
    1b82:	67 94       	ror	r6
    1b84:	0a 94       	dec	r0
    1b86:	d2 f7       	brpl	.-12     	; 0x1b7c <_fpadd_parts+0xc8>
    1b88:	21 e0       	ldi	r18, 0x01	; 1
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <_fpadd_parts+0xe6>
    1b92:	22 0f       	add	r18, r18
    1b94:	33 1f       	adc	r19, r19
    1b96:	44 1f       	adc	r20, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	6a 95       	dec	r22
    1b9c:	d2 f7       	brpl	.-12     	; 0x1b92 <_fpadd_parts+0xde>
    1b9e:	21 50       	subi	r18, 0x01	; 1
    1ba0:	30 40       	sbci	r19, 0x00	; 0
    1ba2:	40 40       	sbci	r20, 0x00	; 0
    1ba4:	50 40       	sbci	r21, 0x00	; 0
    1ba6:	2e 21       	and	r18, r14
    1ba8:	3f 21       	and	r19, r15
    1baa:	40 23       	and	r20, r16
    1bac:	51 23       	and	r21, r17
    1bae:	21 15       	cp	r18, r1
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	41 05       	cpc	r20, r1
    1bb4:	51 05       	cpc	r21, r1
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <_fpadd_parts+0x10c>
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	79 01       	movw	r14, r18
    1bc2:	8a 01       	movw	r16, r20
    1bc4:	e6 28       	or	r14, r6
    1bc6:	f7 28       	or	r15, r7
    1bc8:	08 29       	or	r16, r8
    1bca:	19 29       	or	r17, r9
    1bcc:	3c c0       	rjmp	.+120    	; 0x1c46 <_fpadd_parts+0x192>
    1bce:	23 2b       	or	r18, r19
    1bd0:	d1 f1       	breq	.+116    	; 0x1c46 <_fpadd_parts+0x192>
    1bd2:	26 0e       	add	r2, r22
    1bd4:	37 1e       	adc	r3, r23
    1bd6:	35 01       	movw	r6, r10
    1bd8:	46 01       	movw	r8, r12
    1bda:	06 2e       	mov	r0, r22
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <_fpadd_parts+0x132>
    1bde:	96 94       	lsr	r9
    1be0:	87 94       	ror	r8
    1be2:	77 94       	ror	r7
    1be4:	67 94       	ror	r6
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <_fpadd_parts+0x12a>
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <_fpadd_parts+0x148>
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	44 1f       	adc	r20, r20
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	6a 95       	dec	r22
    1bfe:	d2 f7       	brpl	.-12     	; 0x1bf4 <_fpadd_parts+0x140>
    1c00:	21 50       	subi	r18, 0x01	; 1
    1c02:	30 40       	sbci	r19, 0x00	; 0
    1c04:	40 40       	sbci	r20, 0x00	; 0
    1c06:	50 40       	sbci	r21, 0x00	; 0
    1c08:	2a 21       	and	r18, r10
    1c0a:	3b 21       	and	r19, r11
    1c0c:	4c 21       	and	r20, r12
    1c0e:	5d 21       	and	r21, r13
    1c10:	21 15       	cp	r18, r1
    1c12:	31 05       	cpc	r19, r1
    1c14:	41 05       	cpc	r20, r1
    1c16:	51 05       	cpc	r21, r1
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <_fpadd_parts+0x16e>
    1c1a:	21 e0       	ldi	r18, 0x01	; 1
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	59 01       	movw	r10, r18
    1c24:	6a 01       	movw	r12, r20
    1c26:	a6 28       	or	r10, r6
    1c28:	b7 28       	or	r11, r7
    1c2a:	c8 28       	or	r12, r8
    1c2c:	d9 28       	or	r13, r9
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <_fpadd_parts+0x192>
    1c30:	82 15       	cp	r24, r2
    1c32:	93 05       	cpc	r25, r3
    1c34:	2c f0       	brlt	.+10     	; 0x1c40 <_fpadd_parts+0x18c>
    1c36:	1c 01       	movw	r2, r24
    1c38:	aa 24       	eor	r10, r10
    1c3a:	bb 24       	eor	r11, r11
    1c3c:	65 01       	movw	r12, r10
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <_fpadd_parts+0x192>
    1c40:	ee 24       	eor	r14, r14
    1c42:	ff 24       	eor	r15, r15
    1c44:	87 01       	movw	r16, r14
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	9c 91       	ld	r25, X
    1c4a:	d2 01       	movw	r26, r4
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	8c 91       	ld	r24, X
    1c50:	98 17       	cp	r25, r24
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <_fpadd_parts+0x1a2>
    1c54:	45 c0       	rjmp	.+138    	; 0x1ce0 <_fpadd_parts+0x22c>
    1c56:	99 23       	and	r25, r25
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <_fpadd_parts+0x1b4>
    1c5a:	a8 01       	movw	r20, r16
    1c5c:	97 01       	movw	r18, r14
    1c5e:	2a 19       	sub	r18, r10
    1c60:	3b 09       	sbc	r19, r11
    1c62:	4c 09       	sbc	r20, r12
    1c64:	5d 09       	sbc	r21, r13
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <_fpadd_parts+0x1c0>
    1c68:	a6 01       	movw	r20, r12
    1c6a:	95 01       	movw	r18, r10
    1c6c:	2e 19       	sub	r18, r14
    1c6e:	3f 09       	sbc	r19, r15
    1c70:	40 0b       	sbc	r20, r16
    1c72:	51 0b       	sbc	r21, r17
    1c74:	57 fd       	sbrc	r21, 7
    1c76:	08 c0       	rjmp	.+16     	; 0x1c88 <_fpadd_parts+0x1d4>
    1c78:	11 82       	std	Z+1, r1	; 0x01
    1c7a:	33 82       	std	Z+3, r3	; 0x03
    1c7c:	22 82       	std	Z+2, r2	; 0x02
    1c7e:	24 83       	std	Z+4, r18	; 0x04
    1c80:	35 83       	std	Z+5, r19	; 0x05
    1c82:	46 83       	std	Z+6, r20	; 0x06
    1c84:	57 83       	std	Z+7, r21	; 0x07
    1c86:	1d c0       	rjmp	.+58     	; 0x1cc2 <_fpadd_parts+0x20e>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	81 83       	std	Z+1, r24	; 0x01
    1c8c:	33 82       	std	Z+3, r3	; 0x03
    1c8e:	22 82       	std	Z+2, r2	; 0x02
    1c90:	88 27       	eor	r24, r24
    1c92:	99 27       	eor	r25, r25
    1c94:	dc 01       	movw	r26, r24
    1c96:	82 1b       	sub	r24, r18
    1c98:	93 0b       	sbc	r25, r19
    1c9a:	a4 0b       	sbc	r26, r20
    1c9c:	b5 0b       	sbc	r27, r21
    1c9e:	84 83       	std	Z+4, r24	; 0x04
    1ca0:	95 83       	std	Z+5, r25	; 0x05
    1ca2:	a6 83       	std	Z+6, r26	; 0x06
    1ca4:	b7 83       	std	Z+7, r27	; 0x07
    1ca6:	0d c0       	rjmp	.+26     	; 0x1cc2 <_fpadd_parts+0x20e>
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	24 83       	std	Z+4, r18	; 0x04
    1cb2:	35 83       	std	Z+5, r19	; 0x05
    1cb4:	46 83       	std	Z+6, r20	; 0x06
    1cb6:	57 83       	std	Z+7, r21	; 0x07
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	93 83       	std	Z+3, r25	; 0x03
    1cc0:	82 83       	std	Z+2, r24	; 0x02
    1cc2:	24 81       	ldd	r18, Z+4	; 0x04
    1cc4:	35 81       	ldd	r19, Z+5	; 0x05
    1cc6:	46 81       	ldd	r20, Z+6	; 0x06
    1cc8:	57 81       	ldd	r21, Z+7	; 0x07
    1cca:	da 01       	movw	r26, r20
    1ccc:	c9 01       	movw	r24, r18
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	a1 09       	sbc	r26, r1
    1cd2:	b1 09       	sbc	r27, r1
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	af 4f       	sbci	r26, 0xFF	; 255
    1cda:	bf 43       	sbci	r27, 0x3F	; 63
    1cdc:	28 f3       	brcs	.-54     	; 0x1ca8 <_fpadd_parts+0x1f4>
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <_fpadd_parts+0x242>
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	33 82       	std	Z+3, r3	; 0x03
    1ce4:	22 82       	std	Z+2, r2	; 0x02
    1ce6:	ea 0c       	add	r14, r10
    1ce8:	fb 1c       	adc	r15, r11
    1cea:	0c 1d       	adc	r16, r12
    1cec:	1d 1d       	adc	r17, r13
    1cee:	e4 82       	std	Z+4, r14	; 0x04
    1cf0:	f5 82       	std	Z+5, r15	; 0x05
    1cf2:	06 83       	std	Z+6, r16	; 0x06
    1cf4:	17 83       	std	Z+7, r17	; 0x07
    1cf6:	83 e0       	ldi	r24, 0x03	; 3
    1cf8:	80 83       	st	Z, r24
    1cfa:	24 81       	ldd	r18, Z+4	; 0x04
    1cfc:	35 81       	ldd	r19, Z+5	; 0x05
    1cfe:	46 81       	ldd	r20, Z+6	; 0x06
    1d00:	57 81       	ldd	r21, Z+7	; 0x07
    1d02:	57 ff       	sbrs	r21, 7
    1d04:	1a c0       	rjmp	.+52     	; 0x1d3a <_fpadd_parts+0x286>
    1d06:	c9 01       	movw	r24, r18
    1d08:	aa 27       	eor	r26, r26
    1d0a:	97 fd       	sbrc	r25, 7
    1d0c:	a0 95       	com	r26
    1d0e:	ba 2f       	mov	r27, r26
    1d10:	81 70       	andi	r24, 0x01	; 1
    1d12:	90 70       	andi	r25, 0x00	; 0
    1d14:	a0 70       	andi	r26, 0x00	; 0
    1d16:	b0 70       	andi	r27, 0x00	; 0
    1d18:	56 95       	lsr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	37 95       	ror	r19
    1d1e:	27 95       	ror	r18
    1d20:	82 2b       	or	r24, r18
    1d22:	93 2b       	or	r25, r19
    1d24:	a4 2b       	or	r26, r20
    1d26:	b5 2b       	or	r27, r21
    1d28:	84 83       	std	Z+4, r24	; 0x04
    1d2a:	95 83       	std	Z+5, r25	; 0x05
    1d2c:	a6 83       	std	Z+6, r26	; 0x06
    1d2e:	b7 83       	std	Z+7, r27	; 0x07
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	93 83       	std	Z+3, r25	; 0x03
    1d38:	82 83       	std	Z+2, r24	; 0x02
    1d3a:	df 01       	movw	r26, r30
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <_fpadd_parts+0x28c>
    1d3e:	d2 01       	movw	r26, r4
    1d40:	cd 01       	movw	r24, r26
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	e2 e1       	ldi	r30, 0x12	; 18
    1d48:	0c 94 22 25 	jmp	0x4a44	; 0x4a44 <__epilogue_restores__>

00001d4c <__subsf3>:
    1d4c:	a0 e2       	ldi	r26, 0x20	; 32
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ec ea       	ldi	r30, 0xAC	; 172
    1d52:	fe e0       	ldi	r31, 0x0E	; 14
    1d54:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__prologue_saves__+0x18>
    1d58:	69 83       	std	Y+1, r22	; 0x01
    1d5a:	7a 83       	std	Y+2, r23	; 0x02
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	2d 83       	std	Y+5, r18	; 0x05
    1d62:	3e 83       	std	Y+6, r19	; 0x06
    1d64:	4f 83       	std	Y+7, r20	; 0x07
    1d66:	58 87       	std	Y+8, r21	; 0x08
    1d68:	e9 e0       	ldi	r30, 0x09	; 9
    1d6a:	ee 2e       	mov	r14, r30
    1d6c:	f1 2c       	mov	r15, r1
    1d6e:	ec 0e       	add	r14, r28
    1d70:	fd 1e       	adc	r15, r29
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	b7 01       	movw	r22, r14
    1d78:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1d7c:	8e 01       	movw	r16, r28
    1d7e:	0f 5e       	subi	r16, 0xEF	; 239
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	ce 01       	movw	r24, r28
    1d84:	05 96       	adiw	r24, 0x05	; 5
    1d86:	b8 01       	movw	r22, r16
    1d88:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1d8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	89 27       	eor	r24, r25
    1d92:	8a 8b       	std	Y+18, r24	; 0x12
    1d94:	c7 01       	movw	r24, r14
    1d96:	b8 01       	movw	r22, r16
    1d98:	ae 01       	movw	r20, r28
    1d9a:	47 5e       	subi	r20, 0xE7	; 231
    1d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1da2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__pack_f>
    1da6:	a0 96       	adiw	r28, 0x20	; 32
    1da8:	e6 e0       	ldi	r30, 0x06	; 6
    1daa:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__epilogue_restores__+0x18>

00001dae <__addsf3>:
    1dae:	a0 e2       	ldi	r26, 0x20	; 32
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ed ed       	ldi	r30, 0xDD	; 221
    1db4:	fe e0       	ldi	r31, 0x0E	; 14
    1db6:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__prologue_saves__+0x18>
    1dba:	69 83       	std	Y+1, r22	; 0x01
    1dbc:	7a 83       	std	Y+2, r23	; 0x02
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	2d 83       	std	Y+5, r18	; 0x05
    1dc4:	3e 83       	std	Y+6, r19	; 0x06
    1dc6:	4f 83       	std	Y+7, r20	; 0x07
    1dc8:	58 87       	std	Y+8, r21	; 0x08
    1dca:	f9 e0       	ldi	r31, 0x09	; 9
    1dcc:	ef 2e       	mov	r14, r31
    1dce:	f1 2c       	mov	r15, r1
    1dd0:	ec 0e       	add	r14, r28
    1dd2:	fd 1e       	adc	r15, r29
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	b7 01       	movw	r22, r14
    1dda:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1dde:	8e 01       	movw	r16, r28
    1de0:	0f 5e       	subi	r16, 0xEF	; 239
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	ce 01       	movw	r24, r28
    1de6:	05 96       	adiw	r24, 0x05	; 5
    1de8:	b8 01       	movw	r22, r16
    1dea:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1dee:	c7 01       	movw	r24, r14
    1df0:	b8 01       	movw	r22, r16
    1df2:	ae 01       	movw	r20, r28
    1df4:	47 5e       	subi	r20, 0xE7	; 231
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1dfc:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__pack_f>
    1e00:	a0 96       	adiw	r28, 0x20	; 32
    1e02:	e6 e0       	ldi	r30, 0x06	; 6
    1e04:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__epilogue_restores__+0x18>

00001e08 <__mulsf3>:
    1e08:	a0 e2       	ldi	r26, 0x20	; 32
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	ea e0       	ldi	r30, 0x0A	; 10
    1e0e:	ff e0       	ldi	r31, 0x0F	; 15
    1e10:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__prologue_saves__>
    1e14:	69 83       	std	Y+1, r22	; 0x01
    1e16:	7a 83       	std	Y+2, r23	; 0x02
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	2d 83       	std	Y+5, r18	; 0x05
    1e1e:	3e 83       	std	Y+6, r19	; 0x06
    1e20:	4f 83       	std	Y+7, r20	; 0x07
    1e22:	58 87       	std	Y+8, r21	; 0x08
    1e24:	ce 01       	movw	r24, r28
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	be 01       	movw	r22, r28
    1e2a:	67 5f       	subi	r22, 0xF7	; 247
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1e32:	ce 01       	movw	r24, r28
    1e34:	05 96       	adiw	r24, 0x05	; 5
    1e36:	be 01       	movw	r22, r28
    1e38:	6f 5e       	subi	r22, 0xEF	; 239
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1e40:	99 85       	ldd	r25, Y+9	; 0x09
    1e42:	92 30       	cpi	r25, 0x02	; 2
    1e44:	88 f0       	brcs	.+34     	; 0x1e68 <__mulsf3+0x60>
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	c8 f0       	brcs	.+50     	; 0x1e7e <__mulsf3+0x76>
    1e4c:	94 30       	cpi	r25, 0x04	; 4
    1e4e:	19 f4       	brne	.+6      	; 0x1e56 <__mulsf3+0x4e>
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	51 f4       	brne	.+20     	; 0x1e68 <__mulsf3+0x60>
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <__mulsf3+0x56>
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	29 f4       	brne	.+10     	; 0x1e64 <__mulsf3+0x5c>
    1e5a:	92 30       	cpi	r25, 0x02	; 2
    1e5c:	81 f4       	brne	.+32     	; 0x1e7e <__mulsf3+0x76>
    1e5e:	83 e7       	ldi	r24, 0x73	; 115
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	c6 c0       	rjmp	.+396    	; 0x1ff0 <__mulsf3+0x1e8>
    1e64:	92 30       	cpi	r25, 0x02	; 2
    1e66:	49 f4       	brne	.+18     	; 0x1e7a <__mulsf3+0x72>
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e6e:	98 13       	cpse	r25, r24
    1e70:	21 e0       	ldi	r18, 0x01	; 1
    1e72:	2a 87       	std	Y+10, r18	; 0x0a
    1e74:	ce 01       	movw	r24, r28
    1e76:	09 96       	adiw	r24, 0x09	; 9
    1e78:	bb c0       	rjmp	.+374    	; 0x1ff0 <__mulsf3+0x1e8>
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	49 f4       	brne	.+18     	; 0x1e90 <__mulsf3+0x88>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	8a 89       	ldd	r24, Y+18	; 0x12
    1e84:	98 13       	cpse	r25, r24
    1e86:	21 e0       	ldi	r18, 0x01	; 1
    1e88:	2a 8b       	std	Y+18, r18	; 0x12
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	41 96       	adiw	r24, 0x11	; 17
    1e8e:	b0 c0       	rjmp	.+352    	; 0x1ff0 <__mulsf3+0x1e8>
    1e90:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e92:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e94:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e96:	58 88       	ldd	r5, Y+16	; 0x10
    1e98:	6d 88       	ldd	r6, Y+21	; 0x15
    1e9a:	7e 88       	ldd	r7, Y+22	; 0x16
    1e9c:	8f 88       	ldd	r8, Y+23	; 0x17
    1e9e:	98 8c       	ldd	r9, Y+24	; 0x18
    1ea0:	ee 24       	eor	r14, r14
    1ea2:	ff 24       	eor	r15, r15
    1ea4:	87 01       	movw	r16, r14
    1ea6:	aa 24       	eor	r10, r10
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	65 01       	movw	r12, r10
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	e0 e0       	ldi	r30, 0x00	; 0
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	c1 01       	movw	r24, r2
    1eba:	81 70       	andi	r24, 0x01	; 1
    1ebc:	90 70       	andi	r25, 0x00	; 0
    1ebe:	89 2b       	or	r24, r25
    1ec0:	e9 f0       	breq	.+58     	; 0x1efc <__mulsf3+0xf4>
    1ec2:	e6 0c       	add	r14, r6
    1ec4:	f7 1c       	adc	r15, r7
    1ec6:	08 1d       	adc	r16, r8
    1ec8:	19 1d       	adc	r17, r9
    1eca:	9a 01       	movw	r18, r20
    1ecc:	ab 01       	movw	r20, r22
    1ece:	2a 0d       	add	r18, r10
    1ed0:	3b 1d       	adc	r19, r11
    1ed2:	4c 1d       	adc	r20, r12
    1ed4:	5d 1d       	adc	r21, r13
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e6 14       	cp	r14, r6
    1ee0:	f7 04       	cpc	r15, r7
    1ee2:	08 05       	cpc	r16, r8
    1ee4:	19 05       	cpc	r17, r9
    1ee6:	20 f4       	brcc	.+8      	; 0x1ef0 <__mulsf3+0xe8>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e0       	ldi	r26, 0x00	; 0
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ba 01       	movw	r22, r20
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	48 0f       	add	r20, r24
    1ef6:	59 1f       	adc	r21, r25
    1ef8:	6a 1f       	adc	r22, r26
    1efa:	7b 1f       	adc	r23, r27
    1efc:	aa 0c       	add	r10, r10
    1efe:	bb 1c       	adc	r11, r11
    1f00:	cc 1c       	adc	r12, r12
    1f02:	dd 1c       	adc	r13, r13
    1f04:	97 fe       	sbrs	r9, 7
    1f06:	08 c0       	rjmp	.+16     	; 0x1f18 <__mulsf3+0x110>
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	a8 2a       	or	r10, r24
    1f12:	b9 2a       	or	r11, r25
    1f14:	ca 2a       	or	r12, r26
    1f16:	db 2a       	or	r13, r27
    1f18:	31 96       	adiw	r30, 0x01	; 1
    1f1a:	e0 32       	cpi	r30, 0x20	; 32
    1f1c:	f1 05       	cpc	r31, r1
    1f1e:	49 f0       	breq	.+18     	; 0x1f32 <__mulsf3+0x12a>
    1f20:	66 0c       	add	r6, r6
    1f22:	77 1c       	adc	r7, r7
    1f24:	88 1c       	adc	r8, r8
    1f26:	99 1c       	adc	r9, r9
    1f28:	56 94       	lsr	r5
    1f2a:	47 94       	ror	r4
    1f2c:	37 94       	ror	r3
    1f2e:	27 94       	ror	r2
    1f30:	c3 cf       	rjmp	.-122    	; 0x1eb8 <__mulsf3+0xb0>
    1f32:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f34:	ea 89       	ldd	r30, Y+18	; 0x12
    1f36:	2b 89       	ldd	r18, Y+19	; 0x13
    1f38:	3c 89       	ldd	r19, Y+20	; 0x14
    1f3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f3e:	28 0f       	add	r18, r24
    1f40:	39 1f       	adc	r19, r25
    1f42:	2e 5f       	subi	r18, 0xFE	; 254
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	17 c0       	rjmp	.+46     	; 0x1f76 <__mulsf3+0x16e>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	81 70       	andi	r24, 0x01	; 1
    1f4c:	90 70       	andi	r25, 0x00	; 0
    1f4e:	89 2b       	or	r24, r25
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <__mulsf3+0x162>
    1f52:	16 95       	lsr	r17
    1f54:	07 95       	ror	r16
    1f56:	f7 94       	ror	r15
    1f58:	e7 94       	ror	r14
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	b0 e8       	ldi	r27, 0x80	; 128
    1f62:	e8 2a       	or	r14, r24
    1f64:	f9 2a       	or	r15, r25
    1f66:	0a 2b       	or	r16, r26
    1f68:	1b 2b       	or	r17, r27
    1f6a:	76 95       	lsr	r23
    1f6c:	67 95       	ror	r22
    1f6e:	57 95       	ror	r21
    1f70:	47 95       	ror	r20
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	77 fd       	sbrc	r23, 7
    1f78:	e7 cf       	rjmp	.-50     	; 0x1f48 <__mulsf3+0x140>
    1f7a:	0c c0       	rjmp	.+24     	; 0x1f94 <__mulsf3+0x18c>
    1f7c:	44 0f       	add	r20, r20
    1f7e:	55 1f       	adc	r21, r21
    1f80:	66 1f       	adc	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	17 fd       	sbrc	r17, 7
    1f86:	41 60       	ori	r20, 0x01	; 1
    1f88:	ee 0c       	add	r14, r14
    1f8a:	ff 1c       	adc	r15, r15
    1f8c:	00 1f       	adc	r16, r16
    1f8e:	11 1f       	adc	r17, r17
    1f90:	21 50       	subi	r18, 0x01	; 1
    1f92:	30 40       	sbci	r19, 0x00	; 0
    1f94:	40 30       	cpi	r20, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	59 07       	cpc	r21, r25
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	69 07       	cpc	r22, r25
    1f9e:	90 e4       	ldi	r25, 0x40	; 64
    1fa0:	79 07       	cpc	r23, r25
    1fa2:	60 f3       	brcs	.-40     	; 0x1f7c <__mulsf3+0x174>
    1fa4:	2b 8f       	std	Y+27, r18	; 0x1b
    1fa6:	3c 8f       	std	Y+28, r19	; 0x1c
    1fa8:	db 01       	movw	r26, r22
    1faa:	ca 01       	movw	r24, r20
    1fac:	8f 77       	andi	r24, 0x7F	; 127
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	a0 70       	andi	r26, 0x00	; 0
    1fb2:	b0 70       	andi	r27, 0x00	; 0
    1fb4:	80 34       	cpi	r24, 0x40	; 64
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	a1 05       	cpc	r26, r1
    1fba:	b1 05       	cpc	r27, r1
    1fbc:	61 f4       	brne	.+24     	; 0x1fd6 <__mulsf3+0x1ce>
    1fbe:	47 fd       	sbrc	r20, 7
    1fc0:	0a c0       	rjmp	.+20     	; 0x1fd6 <__mulsf3+0x1ce>
    1fc2:	e1 14       	cp	r14, r1
    1fc4:	f1 04       	cpc	r15, r1
    1fc6:	01 05       	cpc	r16, r1
    1fc8:	11 05       	cpc	r17, r1
    1fca:	29 f0       	breq	.+10     	; 0x1fd6 <__mulsf3+0x1ce>
    1fcc:	40 5c       	subi	r20, 0xC0	; 192
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	6f 4f       	sbci	r22, 0xFF	; 255
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	40 78       	andi	r20, 0x80	; 128
    1fd6:	1a 8e       	std	Y+26, r1	; 0x1a
    1fd8:	fe 17       	cp	r31, r30
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <__mulsf3+0x1d8>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe0:	4d 8f       	std	Y+29, r20	; 0x1d
    1fe2:	5e 8f       	std	Y+30, r21	; 0x1e
    1fe4:	6f 8f       	std	Y+31, r22	; 0x1f
    1fe6:	78 a3       	std	Y+32, r23	; 0x20
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	89 8f       	std	Y+25, r24	; 0x19
    1fec:	ce 01       	movw	r24, r28
    1fee:	49 96       	adiw	r24, 0x19	; 25
    1ff0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__pack_f>
    1ff4:	a0 96       	adiw	r28, 0x20	; 32
    1ff6:	e2 e1       	ldi	r30, 0x12	; 18
    1ff8:	0c 94 22 25 	jmp	0x4a44	; 0x4a44 <__epilogue_restores__>

00001ffc <__gtsf2>:
    1ffc:	a8 e1       	ldi	r26, 0x18	; 24
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e0       	ldi	r30, 0x04	; 4
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__prologue_saves__+0x18>
    2008:	69 83       	std	Y+1, r22	; 0x01
    200a:	7a 83       	std	Y+2, r23	; 0x02
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	2d 83       	std	Y+5, r18	; 0x05
    2012:	3e 83       	std	Y+6, r19	; 0x06
    2014:	4f 83       	std	Y+7, r20	; 0x07
    2016:	58 87       	std	Y+8, r21	; 0x08
    2018:	89 e0       	ldi	r24, 0x09	; 9
    201a:	e8 2e       	mov	r14, r24
    201c:	f1 2c       	mov	r15, r1
    201e:	ec 0e       	add	r14, r28
    2020:	fd 1e       	adc	r15, r29
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    202c:	8e 01       	movw	r16, r28
    202e:	0f 5e       	subi	r16, 0xEF	; 239
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	ce 01       	movw	r24, r28
    2034:	05 96       	adiw	r24, 0x05	; 5
    2036:	b8 01       	movw	r22, r16
    2038:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	82 30       	cpi	r24, 0x02	; 2
    2040:	40 f0       	brcs	.+16     	; 0x2052 <__gtsf2+0x56>
    2042:	89 89       	ldd	r24, Y+17	; 0x11
    2044:	82 30       	cpi	r24, 0x02	; 2
    2046:	28 f0       	brcs	.+10     	; 0x2052 <__gtsf2+0x56>
    2048:	c7 01       	movw	r24, r14
    204a:	b8 01       	movw	r22, r16
    204c:	0e 94 2f 12 	call	0x245e	; 0x245e <__fpcmp_parts_f>
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <__gtsf2+0x58>
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	68 96       	adiw	r28, 0x18	; 24
    2056:	e6 e0       	ldi	r30, 0x06	; 6
    2058:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__epilogue_restores__+0x18>

0000205c <__gesf2>:
    205c:	a8 e1       	ldi	r26, 0x18	; 24
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e4 e3       	ldi	r30, 0x34	; 52
    2062:	f0 e1       	ldi	r31, 0x10	; 16
    2064:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__prologue_saves__+0x18>
    2068:	69 83       	std	Y+1, r22	; 0x01
    206a:	7a 83       	std	Y+2, r23	; 0x02
    206c:	8b 83       	std	Y+3, r24	; 0x03
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	2d 83       	std	Y+5, r18	; 0x05
    2072:	3e 83       	std	Y+6, r19	; 0x06
    2074:	4f 83       	std	Y+7, r20	; 0x07
    2076:	58 87       	std	Y+8, r21	; 0x08
    2078:	89 e0       	ldi	r24, 0x09	; 9
    207a:	e8 2e       	mov	r14, r24
    207c:	f1 2c       	mov	r15, r1
    207e:	ec 0e       	add	r14, r28
    2080:	fd 1e       	adc	r15, r29
    2082:	ce 01       	movw	r24, r28
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	b7 01       	movw	r22, r14
    2088:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    208c:	8e 01       	movw	r16, r28
    208e:	0f 5e       	subi	r16, 0xEF	; 239
    2090:	1f 4f       	sbci	r17, 0xFF	; 255
    2092:	ce 01       	movw	r24, r28
    2094:	05 96       	adiw	r24, 0x05	; 5
    2096:	b8 01       	movw	r22, r16
    2098:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	82 30       	cpi	r24, 0x02	; 2
    20a0:	40 f0       	brcs	.+16     	; 0x20b2 <__gesf2+0x56>
    20a2:	89 89       	ldd	r24, Y+17	; 0x11
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	28 f0       	brcs	.+10     	; 0x20b2 <__gesf2+0x56>
    20a8:	c7 01       	movw	r24, r14
    20aa:	b8 01       	movw	r22, r16
    20ac:	0e 94 2f 12 	call	0x245e	; 0x245e <__fpcmp_parts_f>
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <__gesf2+0x58>
    20b2:	8f ef       	ldi	r24, 0xFF	; 255
    20b4:	68 96       	adiw	r28, 0x18	; 24
    20b6:	e6 e0       	ldi	r30, 0x06	; 6
    20b8:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__epilogue_restores__+0x18>

000020bc <__ltsf2>:
    20bc:	a8 e1       	ldi	r26, 0x18	; 24
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e4 e6       	ldi	r30, 0x64	; 100
    20c2:	f0 e1       	ldi	r31, 0x10	; 16
    20c4:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__prologue_saves__+0x18>
    20c8:	69 83       	std	Y+1, r22	; 0x01
    20ca:	7a 83       	std	Y+2, r23	; 0x02
    20cc:	8b 83       	std	Y+3, r24	; 0x03
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	2d 83       	std	Y+5, r18	; 0x05
    20d2:	3e 83       	std	Y+6, r19	; 0x06
    20d4:	4f 83       	std	Y+7, r20	; 0x07
    20d6:	58 87       	std	Y+8, r21	; 0x08
    20d8:	89 e0       	ldi	r24, 0x09	; 9
    20da:	e8 2e       	mov	r14, r24
    20dc:	f1 2c       	mov	r15, r1
    20de:	ec 0e       	add	r14, r28
    20e0:	fd 1e       	adc	r15, r29
    20e2:	ce 01       	movw	r24, r28
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	b7 01       	movw	r22, r14
    20e8:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    20ec:	8e 01       	movw	r16, r28
    20ee:	0f 5e       	subi	r16, 0xEF	; 239
    20f0:	1f 4f       	sbci	r17, 0xFF	; 255
    20f2:	ce 01       	movw	r24, r28
    20f4:	05 96       	adiw	r24, 0x05	; 5
    20f6:	b8 01       	movw	r22, r16
    20f8:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	82 30       	cpi	r24, 0x02	; 2
    2100:	40 f0       	brcs	.+16     	; 0x2112 <__ltsf2+0x56>
    2102:	89 89       	ldd	r24, Y+17	; 0x11
    2104:	82 30       	cpi	r24, 0x02	; 2
    2106:	28 f0       	brcs	.+10     	; 0x2112 <__ltsf2+0x56>
    2108:	c7 01       	movw	r24, r14
    210a:	b8 01       	movw	r22, r16
    210c:	0e 94 2f 12 	call	0x245e	; 0x245e <__fpcmp_parts_f>
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <__ltsf2+0x58>
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	68 96       	adiw	r28, 0x18	; 24
    2116:	e6 e0       	ldi	r30, 0x06	; 6
    2118:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__epilogue_restores__+0x18>

0000211c <__fixsfsi>:
    211c:	ac e0       	ldi	r26, 0x0C	; 12
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e4 e9       	ldi	r30, 0x94	; 148
    2122:	f0 e1       	ldi	r31, 0x10	; 16
    2124:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__prologue_saves__+0x20>
    2128:	69 83       	std	Y+1, r22	; 0x01
    212a:	7a 83       	std	Y+2, r23	; 0x02
    212c:	8b 83       	std	Y+3, r24	; 0x03
    212e:	9c 83       	std	Y+4, r25	; 0x04
    2130:	ce 01       	movw	r24, r28
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	be 01       	movw	r22, r28
    2136:	6b 5f       	subi	r22, 0xFB	; 251
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	82 30       	cpi	r24, 0x02	; 2
    2142:	61 f1       	breq	.+88     	; 0x219c <__fixsfsi+0x80>
    2144:	82 30       	cpi	r24, 0x02	; 2
    2146:	50 f1       	brcs	.+84     	; 0x219c <__fixsfsi+0x80>
    2148:	84 30       	cpi	r24, 0x04	; 4
    214a:	21 f4       	brne	.+8      	; 0x2154 <__fixsfsi+0x38>
    214c:	8e 81       	ldd	r24, Y+6	; 0x06
    214e:	88 23       	and	r24, r24
    2150:	51 f1       	breq	.+84     	; 0x21a6 <__fixsfsi+0x8a>
    2152:	2e c0       	rjmp	.+92     	; 0x21b0 <__fixsfsi+0x94>
    2154:	2f 81       	ldd	r18, Y+7	; 0x07
    2156:	38 85       	ldd	r19, Y+8	; 0x08
    2158:	37 fd       	sbrc	r19, 7
    215a:	20 c0       	rjmp	.+64     	; 0x219c <__fixsfsi+0x80>
    215c:	6e 81       	ldd	r22, Y+6	; 0x06
    215e:	2f 31       	cpi	r18, 0x1F	; 31
    2160:	31 05       	cpc	r19, r1
    2162:	1c f0       	brlt	.+6      	; 0x216a <__fixsfsi+0x4e>
    2164:	66 23       	and	r22, r22
    2166:	f9 f0       	breq	.+62     	; 0x21a6 <__fixsfsi+0x8a>
    2168:	23 c0       	rjmp	.+70     	; 0x21b0 <__fixsfsi+0x94>
    216a:	8e e1       	ldi	r24, 0x1E	; 30
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	82 1b       	sub	r24, r18
    2170:	93 0b       	sbc	r25, r19
    2172:	29 85       	ldd	r18, Y+9	; 0x09
    2174:	3a 85       	ldd	r19, Y+10	; 0x0a
    2176:	4b 85       	ldd	r20, Y+11	; 0x0b
    2178:	5c 85       	ldd	r21, Y+12	; 0x0c
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <__fixsfsi+0x68>
    217c:	56 95       	lsr	r21
    217e:	47 95       	ror	r20
    2180:	37 95       	ror	r19
    2182:	27 95       	ror	r18
    2184:	8a 95       	dec	r24
    2186:	d2 f7       	brpl	.-12     	; 0x217c <__fixsfsi+0x60>
    2188:	66 23       	and	r22, r22
    218a:	b1 f0       	breq	.+44     	; 0x21b8 <__fixsfsi+0x9c>
    218c:	50 95       	com	r21
    218e:	40 95       	com	r20
    2190:	30 95       	com	r19
    2192:	21 95       	neg	r18
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	4f 4f       	sbci	r20, 0xFF	; 255
    2198:	5f 4f       	sbci	r21, 0xFF	; 255
    219a:	0e c0       	rjmp	.+28     	; 0x21b8 <__fixsfsi+0x9c>
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	09 c0       	rjmp	.+18     	; 0x21b8 <__fixsfsi+0x9c>
    21a6:	2f ef       	ldi	r18, 0xFF	; 255
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f ef       	ldi	r20, 0xFF	; 255
    21ac:	5f e7       	ldi	r21, 0x7F	; 127
    21ae:	04 c0       	rjmp	.+8      	; 0x21b8 <__fixsfsi+0x9c>
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	50 e8       	ldi	r21, 0x80	; 128
    21b8:	b9 01       	movw	r22, r18
    21ba:	ca 01       	movw	r24, r20
    21bc:	2c 96       	adiw	r28, 0x0c	; 12
    21be:	e2 e0       	ldi	r30, 0x02	; 2
    21c0:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__epilogue_restores__+0x20>

000021c4 <__pack_f>:
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	fc 01       	movw	r30, r24
    21d0:	e4 80       	ldd	r14, Z+4	; 0x04
    21d2:	f5 80       	ldd	r15, Z+5	; 0x05
    21d4:	06 81       	ldd	r16, Z+6	; 0x06
    21d6:	17 81       	ldd	r17, Z+7	; 0x07
    21d8:	d1 80       	ldd	r13, Z+1	; 0x01
    21da:	80 81       	ld	r24, Z
    21dc:	82 30       	cpi	r24, 0x02	; 2
    21de:	48 f4       	brcc	.+18     	; 0x21f2 <__pack_f+0x2e>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a0 e1       	ldi	r26, 0x10	; 16
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e8 2a       	or	r14, r24
    21ea:	f9 2a       	or	r15, r25
    21ec:	0a 2b       	or	r16, r26
    21ee:	1b 2b       	or	r17, r27
    21f0:	a5 c0       	rjmp	.+330    	; 0x233c <__pack_f+0x178>
    21f2:	84 30       	cpi	r24, 0x04	; 4
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__pack_f+0x34>
    21f6:	9f c0       	rjmp	.+318    	; 0x2336 <__pack_f+0x172>
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	21 f4       	brne	.+8      	; 0x2204 <__pack_f+0x40>
    21fc:	ee 24       	eor	r14, r14
    21fe:	ff 24       	eor	r15, r15
    2200:	87 01       	movw	r16, r14
    2202:	05 c0       	rjmp	.+10     	; 0x220e <__pack_f+0x4a>
    2204:	e1 14       	cp	r14, r1
    2206:	f1 04       	cpc	r15, r1
    2208:	01 05       	cpc	r16, r1
    220a:	11 05       	cpc	r17, r1
    220c:	19 f4       	brne	.+6      	; 0x2214 <__pack_f+0x50>
    220e:	e0 e0       	ldi	r30, 0x00	; 0
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	96 c0       	rjmp	.+300    	; 0x2340 <__pack_f+0x17c>
    2214:	62 81       	ldd	r22, Z+2	; 0x02
    2216:	73 81       	ldd	r23, Z+3	; 0x03
    2218:	9f ef       	ldi	r25, 0xFF	; 255
    221a:	62 38       	cpi	r22, 0x82	; 130
    221c:	79 07       	cpc	r23, r25
    221e:	0c f0       	brlt	.+2      	; 0x2222 <__pack_f+0x5e>
    2220:	5b c0       	rjmp	.+182    	; 0x22d8 <__pack_f+0x114>
    2222:	22 e8       	ldi	r18, 0x82	; 130
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	26 1b       	sub	r18, r22
    2228:	37 0b       	sbc	r19, r23
    222a:	2a 31       	cpi	r18, 0x1A	; 26
    222c:	31 05       	cpc	r19, r1
    222e:	2c f0       	brlt	.+10     	; 0x223a <__pack_f+0x76>
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	2a c0       	rjmp	.+84     	; 0x228e <__pack_f+0xca>
    223a:	b8 01       	movw	r22, r16
    223c:	a7 01       	movw	r20, r14
    223e:	02 2e       	mov	r0, r18
    2240:	04 c0       	rjmp	.+8      	; 0x224a <__pack_f+0x86>
    2242:	76 95       	lsr	r23
    2244:	67 95       	ror	r22
    2246:	57 95       	ror	r21
    2248:	47 95       	ror	r20
    224a:	0a 94       	dec	r0
    224c:	d2 f7       	brpl	.-12     	; 0x2242 <__pack_f+0x7e>
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 e0       	ldi	r26, 0x00	; 0
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	04 c0       	rjmp	.+8      	; 0x2260 <__pack_f+0x9c>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	aa 1f       	adc	r26, r26
    225e:	bb 1f       	adc	r27, r27
    2260:	2a 95       	dec	r18
    2262:	d2 f7       	brpl	.-12     	; 0x2258 <__pack_f+0x94>
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	a1 09       	sbc	r26, r1
    2268:	b1 09       	sbc	r27, r1
    226a:	8e 21       	and	r24, r14
    226c:	9f 21       	and	r25, r15
    226e:	a0 23       	and	r26, r16
    2270:	b1 23       	and	r27, r17
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	a1 05       	cpc	r26, r1
    2276:	b1 05       	cpc	r27, r1
    2278:	21 f0       	breq	.+8      	; 0x2282 <__pack_f+0xbe>
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e0       	ldi	r26, 0x00	; 0
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	9a 01       	movw	r18, r20
    2284:	ab 01       	movw	r20, r22
    2286:	28 2b       	or	r18, r24
    2288:	39 2b       	or	r19, r25
    228a:	4a 2b       	or	r20, r26
    228c:	5b 2b       	or	r21, r27
    228e:	da 01       	movw	r26, r20
    2290:	c9 01       	movw	r24, r18
    2292:	8f 77       	andi	r24, 0x7F	; 127
    2294:	90 70       	andi	r25, 0x00	; 0
    2296:	a0 70       	andi	r26, 0x00	; 0
    2298:	b0 70       	andi	r27, 0x00	; 0
    229a:	80 34       	cpi	r24, 0x40	; 64
    229c:	91 05       	cpc	r25, r1
    229e:	a1 05       	cpc	r26, r1
    22a0:	b1 05       	cpc	r27, r1
    22a2:	39 f4       	brne	.+14     	; 0x22b2 <__pack_f+0xee>
    22a4:	27 ff       	sbrs	r18, 7
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <__pack_f+0xf6>
    22a8:	20 5c       	subi	r18, 0xC0	; 192
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	4f 4f       	sbci	r20, 0xFF	; 255
    22ae:	5f 4f       	sbci	r21, 0xFF	; 255
    22b0:	04 c0       	rjmp	.+8      	; 0x22ba <__pack_f+0xf6>
    22b2:	21 5c       	subi	r18, 0xC1	; 193
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	4f 4f       	sbci	r20, 0xFF	; 255
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ba:	e0 e0       	ldi	r30, 0x00	; 0
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	20 30       	cpi	r18, 0x00	; 0
    22c0:	a0 e0       	ldi	r26, 0x00	; 0
    22c2:	3a 07       	cpc	r19, r26
    22c4:	a0 e0       	ldi	r26, 0x00	; 0
    22c6:	4a 07       	cpc	r20, r26
    22c8:	a0 e4       	ldi	r26, 0x40	; 64
    22ca:	5a 07       	cpc	r21, r26
    22cc:	10 f0       	brcs	.+4      	; 0x22d2 <__pack_f+0x10e>
    22ce:	e1 e0       	ldi	r30, 0x01	; 1
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	79 01       	movw	r14, r18
    22d4:	8a 01       	movw	r16, r20
    22d6:	27 c0       	rjmp	.+78     	; 0x2326 <__pack_f+0x162>
    22d8:	60 38       	cpi	r22, 0x80	; 128
    22da:	71 05       	cpc	r23, r1
    22dc:	64 f5       	brge	.+88     	; 0x2336 <__pack_f+0x172>
    22de:	fb 01       	movw	r30, r22
    22e0:	e1 58       	subi	r30, 0x81	; 129
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	d8 01       	movw	r26, r16
    22e6:	c7 01       	movw	r24, r14
    22e8:	8f 77       	andi	r24, 0x7F	; 127
    22ea:	90 70       	andi	r25, 0x00	; 0
    22ec:	a0 70       	andi	r26, 0x00	; 0
    22ee:	b0 70       	andi	r27, 0x00	; 0
    22f0:	80 34       	cpi	r24, 0x40	; 64
    22f2:	91 05       	cpc	r25, r1
    22f4:	a1 05       	cpc	r26, r1
    22f6:	b1 05       	cpc	r27, r1
    22f8:	39 f4       	brne	.+14     	; 0x2308 <__pack_f+0x144>
    22fa:	e7 fe       	sbrs	r14, 7
    22fc:	0d c0       	rjmp	.+26     	; 0x2318 <__pack_f+0x154>
    22fe:	80 e4       	ldi	r24, 0x40	; 64
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a0 e0       	ldi	r26, 0x00	; 0
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	04 c0       	rjmp	.+8      	; 0x2310 <__pack_f+0x14c>
    2308:	8f e3       	ldi	r24, 0x3F	; 63
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a0 e0       	ldi	r26, 0x00	; 0
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e8 0e       	add	r14, r24
    2312:	f9 1e       	adc	r15, r25
    2314:	0a 1f       	adc	r16, r26
    2316:	1b 1f       	adc	r17, r27
    2318:	17 ff       	sbrs	r17, 7
    231a:	05 c0       	rjmp	.+10     	; 0x2326 <__pack_f+0x162>
    231c:	16 95       	lsr	r17
    231e:	07 95       	ror	r16
    2320:	f7 94       	ror	r15
    2322:	e7 94       	ror	r14
    2324:	31 96       	adiw	r30, 0x01	; 1
    2326:	87 e0       	ldi	r24, 0x07	; 7
    2328:	16 95       	lsr	r17
    232a:	07 95       	ror	r16
    232c:	f7 94       	ror	r15
    232e:	e7 94       	ror	r14
    2330:	8a 95       	dec	r24
    2332:	d1 f7       	brne	.-12     	; 0x2328 <__pack_f+0x164>
    2334:	05 c0       	rjmp	.+10     	; 0x2340 <__pack_f+0x17c>
    2336:	ee 24       	eor	r14, r14
    2338:	ff 24       	eor	r15, r15
    233a:	87 01       	movw	r16, r14
    233c:	ef ef       	ldi	r30, 0xFF	; 255
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	6e 2f       	mov	r22, r30
    2342:	67 95       	ror	r22
    2344:	66 27       	eor	r22, r22
    2346:	67 95       	ror	r22
    2348:	90 2f       	mov	r25, r16
    234a:	9f 77       	andi	r25, 0x7F	; 127
    234c:	d7 94       	ror	r13
    234e:	dd 24       	eor	r13, r13
    2350:	d7 94       	ror	r13
    2352:	8e 2f       	mov	r24, r30
    2354:	86 95       	lsr	r24
    2356:	49 2f       	mov	r20, r25
    2358:	46 2b       	or	r20, r22
    235a:	58 2f       	mov	r21, r24
    235c:	5d 29       	or	r21, r13
    235e:	b7 01       	movw	r22, r14
    2360:	ca 01       	movw	r24, r20
    2362:	1f 91       	pop	r17
    2364:	0f 91       	pop	r16
    2366:	ff 90       	pop	r15
    2368:	ef 90       	pop	r14
    236a:	df 90       	pop	r13
    236c:	08 95       	ret

0000236e <__unpack_f>:
    236e:	fc 01       	movw	r30, r24
    2370:	db 01       	movw	r26, r22
    2372:	40 81       	ld	r20, Z
    2374:	51 81       	ldd	r21, Z+1	; 0x01
    2376:	22 81       	ldd	r18, Z+2	; 0x02
    2378:	62 2f       	mov	r22, r18
    237a:	6f 77       	andi	r22, 0x7F	; 127
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	22 1f       	adc	r18, r18
    2380:	22 27       	eor	r18, r18
    2382:	22 1f       	adc	r18, r18
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	89 2f       	mov	r24, r25
    2388:	88 0f       	add	r24, r24
    238a:	82 2b       	or	r24, r18
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	99 1f       	adc	r25, r25
    2392:	99 27       	eor	r25, r25
    2394:	99 1f       	adc	r25, r25
    2396:	11 96       	adiw	r26, 0x01	; 1
    2398:	9c 93       	st	X, r25
    239a:	11 97       	sbiw	r26, 0x01	; 1
    239c:	21 15       	cp	r18, r1
    239e:	31 05       	cpc	r19, r1
    23a0:	a9 f5       	brne	.+106    	; 0x240c <__unpack_f+0x9e>
    23a2:	41 15       	cp	r20, r1
    23a4:	51 05       	cpc	r21, r1
    23a6:	61 05       	cpc	r22, r1
    23a8:	71 05       	cpc	r23, r1
    23aa:	11 f4       	brne	.+4      	; 0x23b0 <__unpack_f+0x42>
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	37 c0       	rjmp	.+110    	; 0x241e <__unpack_f+0xb0>
    23b0:	82 e8       	ldi	r24, 0x82	; 130
    23b2:	9f ef       	ldi	r25, 0xFF	; 255
    23b4:	13 96       	adiw	r26, 0x03	; 3
    23b6:	9c 93       	st	X, r25
    23b8:	8e 93       	st	-X, r24
    23ba:	12 97       	sbiw	r26, 0x02	; 2
    23bc:	9a 01       	movw	r18, r20
    23be:	ab 01       	movw	r20, r22
    23c0:	67 e0       	ldi	r22, 0x07	; 7
    23c2:	22 0f       	add	r18, r18
    23c4:	33 1f       	adc	r19, r19
    23c6:	44 1f       	adc	r20, r20
    23c8:	55 1f       	adc	r21, r21
    23ca:	6a 95       	dec	r22
    23cc:	d1 f7       	brne	.-12     	; 0x23c2 <__unpack_f+0x54>
    23ce:	83 e0       	ldi	r24, 0x03	; 3
    23d0:	8c 93       	st	X, r24
    23d2:	0d c0       	rjmp	.+26     	; 0x23ee <__unpack_f+0x80>
    23d4:	22 0f       	add	r18, r18
    23d6:	33 1f       	adc	r19, r19
    23d8:	44 1f       	adc	r20, r20
    23da:	55 1f       	adc	r21, r21
    23dc:	12 96       	adiw	r26, 0x02	; 2
    23de:	8d 91       	ld	r24, X+
    23e0:	9c 91       	ld	r25, X
    23e2:	13 97       	sbiw	r26, 0x03	; 3
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	13 96       	adiw	r26, 0x03	; 3
    23e8:	9c 93       	st	X, r25
    23ea:	8e 93       	st	-X, r24
    23ec:	12 97       	sbiw	r26, 0x02	; 2
    23ee:	20 30       	cpi	r18, 0x00	; 0
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	38 07       	cpc	r19, r24
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	48 07       	cpc	r20, r24
    23f8:	80 e4       	ldi	r24, 0x40	; 64
    23fa:	58 07       	cpc	r21, r24
    23fc:	58 f3       	brcs	.-42     	; 0x23d4 <__unpack_f+0x66>
    23fe:	14 96       	adiw	r26, 0x04	; 4
    2400:	2d 93       	st	X+, r18
    2402:	3d 93       	st	X+, r19
    2404:	4d 93       	st	X+, r20
    2406:	5c 93       	st	X, r21
    2408:	17 97       	sbiw	r26, 0x07	; 7
    240a:	08 95       	ret
    240c:	2f 3f       	cpi	r18, 0xFF	; 255
    240e:	31 05       	cpc	r19, r1
    2410:	79 f4       	brne	.+30     	; 0x2430 <__unpack_f+0xc2>
    2412:	41 15       	cp	r20, r1
    2414:	51 05       	cpc	r21, r1
    2416:	61 05       	cpc	r22, r1
    2418:	71 05       	cpc	r23, r1
    241a:	19 f4       	brne	.+6      	; 0x2422 <__unpack_f+0xb4>
    241c:	84 e0       	ldi	r24, 0x04	; 4
    241e:	8c 93       	st	X, r24
    2420:	08 95       	ret
    2422:	64 ff       	sbrs	r22, 4
    2424:	03 c0       	rjmp	.+6      	; 0x242c <__unpack_f+0xbe>
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	8c 93       	st	X, r24
    242a:	12 c0       	rjmp	.+36     	; 0x2450 <__unpack_f+0xe2>
    242c:	1c 92       	st	X, r1
    242e:	10 c0       	rjmp	.+32     	; 0x2450 <__unpack_f+0xe2>
    2430:	2f 57       	subi	r18, 0x7F	; 127
    2432:	30 40       	sbci	r19, 0x00	; 0
    2434:	13 96       	adiw	r26, 0x03	; 3
    2436:	3c 93       	st	X, r19
    2438:	2e 93       	st	-X, r18
    243a:	12 97       	sbiw	r26, 0x02	; 2
    243c:	83 e0       	ldi	r24, 0x03	; 3
    243e:	8c 93       	st	X, r24
    2440:	87 e0       	ldi	r24, 0x07	; 7
    2442:	44 0f       	add	r20, r20
    2444:	55 1f       	adc	r21, r21
    2446:	66 1f       	adc	r22, r22
    2448:	77 1f       	adc	r23, r23
    244a:	8a 95       	dec	r24
    244c:	d1 f7       	brne	.-12     	; 0x2442 <__unpack_f+0xd4>
    244e:	70 64       	ori	r23, 0x40	; 64
    2450:	14 96       	adiw	r26, 0x04	; 4
    2452:	4d 93       	st	X+, r20
    2454:	5d 93       	st	X+, r21
    2456:	6d 93       	st	X+, r22
    2458:	7c 93       	st	X, r23
    245a:	17 97       	sbiw	r26, 0x07	; 7
    245c:	08 95       	ret

0000245e <__fpcmp_parts_f>:
    245e:	1f 93       	push	r17
    2460:	dc 01       	movw	r26, r24
    2462:	fb 01       	movw	r30, r22
    2464:	9c 91       	ld	r25, X
    2466:	92 30       	cpi	r25, 0x02	; 2
    2468:	08 f4       	brcc	.+2      	; 0x246c <__fpcmp_parts_f+0xe>
    246a:	47 c0       	rjmp	.+142    	; 0x24fa <__fpcmp_parts_f+0x9c>
    246c:	80 81       	ld	r24, Z
    246e:	82 30       	cpi	r24, 0x02	; 2
    2470:	08 f4       	brcc	.+2      	; 0x2474 <__fpcmp_parts_f+0x16>
    2472:	43 c0       	rjmp	.+134    	; 0x24fa <__fpcmp_parts_f+0x9c>
    2474:	94 30       	cpi	r25, 0x04	; 4
    2476:	51 f4       	brne	.+20     	; 0x248c <__fpcmp_parts_f+0x2e>
    2478:	11 96       	adiw	r26, 0x01	; 1
    247a:	1c 91       	ld	r17, X
    247c:	84 30       	cpi	r24, 0x04	; 4
    247e:	99 f5       	brne	.+102    	; 0x24e6 <__fpcmp_parts_f+0x88>
    2480:	81 81       	ldd	r24, Z+1	; 0x01
    2482:	68 2f       	mov	r22, r24
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	61 1b       	sub	r22, r17
    2488:	71 09       	sbc	r23, r1
    248a:	3f c0       	rjmp	.+126    	; 0x250a <__fpcmp_parts_f+0xac>
    248c:	84 30       	cpi	r24, 0x04	; 4
    248e:	21 f0       	breq	.+8      	; 0x2498 <__fpcmp_parts_f+0x3a>
    2490:	92 30       	cpi	r25, 0x02	; 2
    2492:	31 f4       	brne	.+12     	; 0x24a0 <__fpcmp_parts_f+0x42>
    2494:	82 30       	cpi	r24, 0x02	; 2
    2496:	b9 f1       	breq	.+110    	; 0x2506 <__fpcmp_parts_f+0xa8>
    2498:	81 81       	ldd	r24, Z+1	; 0x01
    249a:	88 23       	and	r24, r24
    249c:	89 f1       	breq	.+98     	; 0x2500 <__fpcmp_parts_f+0xa2>
    249e:	2d c0       	rjmp	.+90     	; 0x24fa <__fpcmp_parts_f+0x9c>
    24a0:	11 96       	adiw	r26, 0x01	; 1
    24a2:	1c 91       	ld	r17, X
    24a4:	11 97       	sbiw	r26, 0x01	; 1
    24a6:	82 30       	cpi	r24, 0x02	; 2
    24a8:	f1 f0       	breq	.+60     	; 0x24e6 <__fpcmp_parts_f+0x88>
    24aa:	81 81       	ldd	r24, Z+1	; 0x01
    24ac:	18 17       	cp	r17, r24
    24ae:	d9 f4       	brne	.+54     	; 0x24e6 <__fpcmp_parts_f+0x88>
    24b0:	12 96       	adiw	r26, 0x02	; 2
    24b2:	2d 91       	ld	r18, X+
    24b4:	3c 91       	ld	r19, X
    24b6:	13 97       	sbiw	r26, 0x03	; 3
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	82 17       	cp	r24, r18
    24be:	93 07       	cpc	r25, r19
    24c0:	94 f0       	brlt	.+36     	; 0x24e6 <__fpcmp_parts_f+0x88>
    24c2:	28 17       	cp	r18, r24
    24c4:	39 07       	cpc	r19, r25
    24c6:	bc f0       	brlt	.+46     	; 0x24f6 <__fpcmp_parts_f+0x98>
    24c8:	14 96       	adiw	r26, 0x04	; 4
    24ca:	8d 91       	ld	r24, X+
    24cc:	9d 91       	ld	r25, X+
    24ce:	0d 90       	ld	r0, X+
    24d0:	bc 91       	ld	r27, X
    24d2:	a0 2d       	mov	r26, r0
    24d4:	24 81       	ldd	r18, Z+4	; 0x04
    24d6:	35 81       	ldd	r19, Z+5	; 0x05
    24d8:	46 81       	ldd	r20, Z+6	; 0x06
    24da:	57 81       	ldd	r21, Z+7	; 0x07
    24dc:	28 17       	cp	r18, r24
    24de:	39 07       	cpc	r19, r25
    24e0:	4a 07       	cpc	r20, r26
    24e2:	5b 07       	cpc	r21, r27
    24e4:	18 f4       	brcc	.+6      	; 0x24ec <__fpcmp_parts_f+0x8e>
    24e6:	11 23       	and	r17, r17
    24e8:	41 f0       	breq	.+16     	; 0x24fa <__fpcmp_parts_f+0x9c>
    24ea:	0a c0       	rjmp	.+20     	; 0x2500 <__fpcmp_parts_f+0xa2>
    24ec:	82 17       	cp	r24, r18
    24ee:	93 07       	cpc	r25, r19
    24f0:	a4 07       	cpc	r26, r20
    24f2:	b5 07       	cpc	r27, r21
    24f4:	40 f4       	brcc	.+16     	; 0x2506 <__fpcmp_parts_f+0xa8>
    24f6:	11 23       	and	r17, r17
    24f8:	19 f0       	breq	.+6      	; 0x2500 <__fpcmp_parts_f+0xa2>
    24fa:	61 e0       	ldi	r22, 0x01	; 1
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	05 c0       	rjmp	.+10     	; 0x250a <__fpcmp_parts_f+0xac>
    2500:	6f ef       	ldi	r22, 0xFF	; 255
    2502:	7f ef       	ldi	r23, 0xFF	; 255
    2504:	02 c0       	rjmp	.+4      	; 0x250a <__fpcmp_parts_f+0xac>
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	70 e0       	ldi	r23, 0x00	; 0
    250a:	cb 01       	movw	r24, r22
    250c:	1f 91       	pop	r17
    250e:	08 95       	ret

00002510 <EXTI_init>:

void (*Ptr_To_Int0)(void) = NULL;
void (*Ptr_To_Int1)(void) = NULL;
void (*Ptr_To_Int2)(void) = NULL;

void EXTI_init(void){
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
#if (INT0_ENABLE == ENABLE)
	/* SET INTERRUPT 0 TO FALLING EDGE */
	SET_BIT(MCUCR,ISC01);
    2518:	a5 e5       	ldi	r26, 0x55	; 85
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e5 e5       	ldi	r30, 0x55	; 85
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	82 60       	ori	r24, 0x02	; 2
    2524:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC00);
    2526:	a5 e5       	ldi	r26, 0x55	; 85
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e5 e5       	ldi	r30, 0x55	; 85
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8e 7f       	andi	r24, 0xFE	; 254
    2532:	8c 93       	st	X, r24
	/* Enable INT0 */
	SET_BIT(GICR,INT0); //PIE
    2534:	ab e5       	ldi	r26, 0x5B	; 91
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	eb e5       	ldi	r30, 0x5B	; 91
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	80 64       	ori	r24, 0x40	; 64
    2540:	8c 93       	st	X, r24
	SET_BIT(SREG, 7);  //GIE
    2542:	af e5       	ldi	r26, 0x5F	; 95
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	ef e5       	ldi	r30, 0x5F	; 95
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	80 68       	ori	r24, 0x80	; 128
    254e:	8c 93       	st	X, r24
	/* SET INTERRUPT 2 TO FALLING EDGE */
	SET_BIT(MCUCR,ISC2);
	/* Enable INT2 */
	SET_BIT(GICR,INT2);
#endif
}
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <EXTI_SetCallBack>:

void EXTI_SetCallBack(void (*ptr_to_fun)(void),u8 A_IntID){
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <EXTI_SetCallBack+0x6>
    255c:	0f 92       	push	r0
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	6b 83       	std	Y+3, r22	; 0x03
	if (A_IntID == 0){
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	88 23       	and	r24, r24
    256c:	39 f4       	brne	.+14     	; 0x257c <EXTI_SetCallBack+0x26>
		Ptr_To_Int0 = ptr_to_fun;
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	9a 81       	ldd	r25, Y+2	; 0x02
    2572:	90 93 bd 01 	sts	0x01BD, r25
    2576:	80 93 bc 01 	sts	0x01BC, r24
    257a:	13 c0       	rjmp	.+38     	; 0x25a2 <EXTI_SetCallBack+0x4c>
	}else if (A_IntID == 1){
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	39 f4       	brne	.+14     	; 0x2590 <EXTI_SetCallBack+0x3a>
		Ptr_To_Int1 = ptr_to_fun;
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	90 93 bf 01 	sts	0x01BF, r25
    258a:	80 93 be 01 	sts	0x01BE, r24
    258e:	09 c0       	rjmp	.+18     	; 0x25a2 <EXTI_SetCallBack+0x4c>
	}else if (A_IntID == 2){
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	31 f4       	brne	.+12     	; 0x25a2 <EXTI_SetCallBack+0x4c>
		Ptr_To_Int2 = ptr_to_fun;
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	90 93 c1 01 	sts	0x01C1, r25
    259e:	80 93 c0 01 	sts	0x01C0, r24
	}
}
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <__vector_1>:

// INT 0
void __vector_1 (void){
    25ae:	1f 92       	push	r1
    25b0:	0f 92       	push	r0
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	0f 92       	push	r0
    25b6:	11 24       	eor	r1, r1
    25b8:	2f 93       	push	r18
    25ba:	3f 93       	push	r19
    25bc:	4f 93       	push	r20
    25be:	5f 93       	push	r21
    25c0:	6f 93       	push	r22
    25c2:	7f 93       	push	r23
    25c4:	8f 93       	push	r24
    25c6:	9f 93       	push	r25
    25c8:	af 93       	push	r26
    25ca:	bf 93       	push	r27
    25cc:	ef 93       	push	r30
    25ce:	ff 93       	push	r31
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
	if (Ptr_To_Int0 != NULL){
    25d8:	80 91 bc 01 	lds	r24, 0x01BC
    25dc:	90 91 bd 01 	lds	r25, 0x01BD
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	29 f0       	breq	.+10     	; 0x25ee <__vector_1+0x40>
		Ptr_To_Int0();
    25e4:	e0 91 bc 01 	lds	r30, 0x01BC
    25e8:	f0 91 bd 01 	lds	r31, 0x01BD
    25ec:	09 95       	icall
	}
}
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	ff 91       	pop	r31
    25f4:	ef 91       	pop	r30
    25f6:	bf 91       	pop	r27
    25f8:	af 91       	pop	r26
    25fa:	9f 91       	pop	r25
    25fc:	8f 91       	pop	r24
    25fe:	7f 91       	pop	r23
    2600:	6f 91       	pop	r22
    2602:	5f 91       	pop	r21
    2604:	4f 91       	pop	r20
    2606:	3f 91       	pop	r19
    2608:	2f 91       	pop	r18
    260a:	0f 90       	pop	r0
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	0f 90       	pop	r0
    2610:	1f 90       	pop	r1
    2612:	18 95       	reti

00002614 <__vector_2>:

// INT 1
void __vector_2 (void){
    2614:	1f 92       	push	r1
    2616:	0f 92       	push	r0
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	0f 92       	push	r0
    261c:	11 24       	eor	r1, r1
    261e:	2f 93       	push	r18
    2620:	3f 93       	push	r19
    2622:	4f 93       	push	r20
    2624:	5f 93       	push	r21
    2626:	6f 93       	push	r22
    2628:	7f 93       	push	r23
    262a:	8f 93       	push	r24
    262c:	9f 93       	push	r25
    262e:	af 93       	push	r26
    2630:	bf 93       	push	r27
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
	if (Ptr_To_Int1 != NULL){
    263e:	80 91 be 01 	lds	r24, 0x01BE
    2642:	90 91 bf 01 	lds	r25, 0x01BF
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	29 f0       	breq	.+10     	; 0x2654 <__vector_2+0x40>
		Ptr_To_Int1();
    264a:	e0 91 be 01 	lds	r30, 0x01BE
    264e:	f0 91 bf 01 	lds	r31, 0x01BF
    2652:	09 95       	icall
	}
}
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	ff 91       	pop	r31
    265a:	ef 91       	pop	r30
    265c:	bf 91       	pop	r27
    265e:	af 91       	pop	r26
    2660:	9f 91       	pop	r25
    2662:	8f 91       	pop	r24
    2664:	7f 91       	pop	r23
    2666:	6f 91       	pop	r22
    2668:	5f 91       	pop	r21
    266a:	4f 91       	pop	r20
    266c:	3f 91       	pop	r19
    266e:	2f 91       	pop	r18
    2670:	0f 90       	pop	r0
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	0f 90       	pop	r0
    2676:	1f 90       	pop	r1
    2678:	18 95       	reti

0000267a <__vector_3>:

// INT 2
void __vector_3 (void){
    267a:	1f 92       	push	r1
    267c:	0f 92       	push	r0
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	0f 92       	push	r0
    2682:	11 24       	eor	r1, r1
    2684:	2f 93       	push	r18
    2686:	3f 93       	push	r19
    2688:	4f 93       	push	r20
    268a:	5f 93       	push	r21
    268c:	6f 93       	push	r22
    268e:	7f 93       	push	r23
    2690:	8f 93       	push	r24
    2692:	9f 93       	push	r25
    2694:	af 93       	push	r26
    2696:	bf 93       	push	r27
    2698:	ef 93       	push	r30
    269a:	ff 93       	push	r31
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
	if (Ptr_To_Int2 != NULL){
    26a4:	80 91 c0 01 	lds	r24, 0x01C0
    26a8:	90 91 c1 01 	lds	r25, 0x01C1
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	29 f0       	breq	.+10     	; 0x26ba <__vector_3+0x40>
		Ptr_To_Int2();
    26b0:	e0 91 c0 01 	lds	r30, 0x01C0
    26b4:	f0 91 c1 01 	lds	r31, 0x01C1
    26b8:	09 95       	icall
	}
}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	ff 91       	pop	r31
    26c0:	ef 91       	pop	r30
    26c2:	bf 91       	pop	r27
    26c4:	af 91       	pop	r26
    26c6:	9f 91       	pop	r25
    26c8:	8f 91       	pop	r24
    26ca:	7f 91       	pop	r23
    26cc:	6f 91       	pop	r22
    26ce:	5f 91       	pop	r21
    26d0:	4f 91       	pop	r20
    26d2:	3f 91       	pop	r19
    26d4:	2f 91       	pop	r18
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	0f 90       	pop	r0
    26dc:	1f 90       	pop	r1
    26de:	18 95       	reti

000026e0 <DIO_voidSetPinDirection>:
#include "../../01-LIB/BIT_MATH.h"
#include "DIO_Config.h"
#include "DIO_Interface.h"
#include "DIO_Private.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortNum, u8 Copy_u8PinNum, u8 Copy_u8Mode){
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	27 97       	sbiw	r28, 0x07	; 7
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	6a 83       	std	Y+2, r22	; 0x02
    26f8:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Mode == DIO_u8OUTPUT){
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	81 30       	cpi	r24, 0x01	; 1
    26fe:	09 f0       	breq	.+2      	; 0x2702 <DIO_voidSetPinDirection+0x22>
    2700:	70 c0       	rjmp	.+224    	; 0x27e2 <DIO_voidSetPinDirection+0x102>
		switch (Copy_u8PortNum)
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	3f 83       	std	Y+7, r19	; 0x07
    270a:	2e 83       	std	Y+6, r18	; 0x06
    270c:	8e 81       	ldd	r24, Y+6	; 0x06
    270e:	9f 81       	ldd	r25, Y+7	; 0x07
    2710:	82 30       	cpi	r24, 0x02	; 2
    2712:	91 05       	cpc	r25, r1
    2714:	51 f1       	breq	.+84     	; 0x276a <DIO_voidSetPinDirection+0x8a>
    2716:	2e 81       	ldd	r18, Y+6	; 0x06
    2718:	3f 81       	ldd	r19, Y+7	; 0x07
    271a:	23 30       	cpi	r18, 0x03	; 3
    271c:	31 05       	cpc	r19, r1
    271e:	34 f4       	brge	.+12     	; 0x272c <DIO_voidSetPinDirection+0x4c>
    2720:	8e 81       	ldd	r24, Y+6	; 0x06
    2722:	9f 81       	ldd	r25, Y+7	; 0x07
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	91 05       	cpc	r25, r1
    2728:	61 f0       	breq	.+24     	; 0x2742 <DIO_voidSetPinDirection+0x62>
    272a:	d3 c0       	rjmp	.+422    	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
    272c:	2e 81       	ldd	r18, Y+6	; 0x06
    272e:	3f 81       	ldd	r19, Y+7	; 0x07
    2730:	23 30       	cpi	r18, 0x03	; 3
    2732:	31 05       	cpc	r19, r1
    2734:	71 f1       	breq	.+92     	; 0x2792 <DIO_voidSetPinDirection+0xb2>
    2736:	8e 81       	ldd	r24, Y+6	; 0x06
    2738:	9f 81       	ldd	r25, Y+7	; 0x07
    273a:	84 30       	cpi	r24, 0x04	; 4
    273c:	91 05       	cpc	r25, r1
    273e:	e9 f1       	breq	.+122    	; 0x27ba <DIO_voidSetPinDirection+0xda>
    2740:	c8 c0       	rjmp	.+400    	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
		{
			case DIO_u8PORTA: SET_BIT(DDRA, Copy_u8PinNum); break;
    2742:	aa e3       	ldi	r26, 0x3A	; 58
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	ea e3       	ldi	r30, 0x3A	; 58
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	48 2f       	mov	r20, r24
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	02 2e       	mov	r0, r18
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <DIO_voidSetPinDirection+0x80>
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	0a 94       	dec	r0
    2762:	e2 f7       	brpl	.-8      	; 0x275c <DIO_voidSetPinDirection+0x7c>
    2764:	84 2b       	or	r24, r20
    2766:	8c 93       	st	X, r24
    2768:	b4 c0       	rjmp	.+360    	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
			case DIO_u8PORTB: SET_BIT(DDRB, Copy_u8PinNum); break;
    276a:	a7 e3       	ldi	r26, 0x37	; 55
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e7 e3       	ldi	r30, 0x37	; 55
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	48 2f       	mov	r20, r24
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	02 2e       	mov	r0, r18
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <DIO_voidSetPinDirection+0xa8>
    2784:	88 0f       	add	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	0a 94       	dec	r0
    278a:	e2 f7       	brpl	.-8      	; 0x2784 <DIO_voidSetPinDirection+0xa4>
    278c:	84 2b       	or	r24, r20
    278e:	8c 93       	st	X, r24
    2790:	a0 c0       	rjmp	.+320    	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
			case DIO_u8PORTC: SET_BIT(DDRC, Copy_u8PinNum); break;
    2792:	a4 e3       	ldi	r26, 0x34	; 52
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e4 e3       	ldi	r30, 0x34	; 52
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	48 2f       	mov	r20, r24
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	02 2e       	mov	r0, r18
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <DIO_voidSetPinDirection+0xd0>
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	0a 94       	dec	r0
    27b2:	e2 f7       	brpl	.-8      	; 0x27ac <DIO_voidSetPinDirection+0xcc>
    27b4:	84 2b       	or	r24, r20
    27b6:	8c 93       	st	X, r24
    27b8:	8c c0       	rjmp	.+280    	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
			case DIO_u8PORTD: SET_BIT(DDRD, Copy_u8PinNum); break;
    27ba:	a1 e3       	ldi	r26, 0x31	; 49
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	e1 e3       	ldi	r30, 0x31	; 49
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	48 2f       	mov	r20, r24
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	02 2e       	mov	r0, r18
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <DIO_voidSetPinDirection+0xf8>
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	0a 94       	dec	r0
    27da:	e2 f7       	brpl	.-8      	; 0x27d4 <DIO_voidSetPinDirection+0xf4>
    27dc:	84 2b       	or	r24, r20
    27de:	8c 93       	st	X, r24
    27e0:	78 c0       	rjmp	.+240    	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
			default:    /*return error*/      				 break;
		}
	} else if (Copy_u8Mode == DIO_u8INPUT){
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	88 23       	and	r24, r24
    27e6:	09 f0       	breq	.+2      	; 0x27ea <DIO_voidSetPinDirection+0x10a>
    27e8:	74 c0       	rjmp	.+232    	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
		switch (Copy_u8PortNum)
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	3d 83       	std	Y+5, r19	; 0x05
    27f2:	2c 83       	std	Y+4, r18	; 0x04
    27f4:	8c 81       	ldd	r24, Y+4	; 0x04
    27f6:	9d 81       	ldd	r25, Y+5	; 0x05
    27f8:	82 30       	cpi	r24, 0x02	; 2
    27fa:	91 05       	cpc	r25, r1
    27fc:	61 f1       	breq	.+88     	; 0x2856 <DIO_voidSetPinDirection+0x176>
    27fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2800:	3d 81       	ldd	r19, Y+5	; 0x05
    2802:	23 30       	cpi	r18, 0x03	; 3
    2804:	31 05       	cpc	r19, r1
    2806:	34 f4       	brge	.+12     	; 0x2814 <DIO_voidSetPinDirection+0x134>
    2808:	8c 81       	ldd	r24, Y+4	; 0x04
    280a:	9d 81       	ldd	r25, Y+5	; 0x05
    280c:	81 30       	cpi	r24, 0x01	; 1
    280e:	91 05       	cpc	r25, r1
    2810:	69 f0       	breq	.+26     	; 0x282c <DIO_voidSetPinDirection+0x14c>
    2812:	5f c0       	rjmp	.+190    	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
    2814:	2c 81       	ldd	r18, Y+4	; 0x04
    2816:	3d 81       	ldd	r19, Y+5	; 0x05
    2818:	23 30       	cpi	r18, 0x03	; 3
    281a:	31 05       	cpc	r19, r1
    281c:	89 f1       	breq	.+98     	; 0x2880 <DIO_voidSetPinDirection+0x1a0>
    281e:	8c 81       	ldd	r24, Y+4	; 0x04
    2820:	9d 81       	ldd	r25, Y+5	; 0x05
    2822:	84 30       	cpi	r24, 0x04	; 4
    2824:	91 05       	cpc	r25, r1
    2826:	09 f4       	brne	.+2      	; 0x282a <DIO_voidSetPinDirection+0x14a>
    2828:	40 c0       	rjmp	.+128    	; 0x28aa <DIO_voidSetPinDirection+0x1ca>
    282a:	53 c0       	rjmp	.+166    	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
		{
			case DIO_u8PORTA: CLR_BIT(DDRA, Copy_u8PinNum); break;
    282c:	aa e3       	ldi	r26, 0x3A	; 58
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	ea e3       	ldi	r30, 0x3A	; 58
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	48 2f       	mov	r20, r24
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	28 2f       	mov	r18, r24
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	02 2e       	mov	r0, r18
    2844:	02 c0       	rjmp	.+4      	; 0x284a <DIO_voidSetPinDirection+0x16a>
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	0a 94       	dec	r0
    284c:	e2 f7       	brpl	.-8      	; 0x2846 <DIO_voidSetPinDirection+0x166>
    284e:	80 95       	com	r24
    2850:	84 23       	and	r24, r20
    2852:	8c 93       	st	X, r24
    2854:	3e c0       	rjmp	.+124    	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
			case DIO_u8PORTB: CLR_BIT(DDRB, Copy_u8PinNum); break;
    2856:	a7 e3       	ldi	r26, 0x37	; 55
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e7 e3       	ldi	r30, 0x37	; 55
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	48 2f       	mov	r20, r24
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	28 2f       	mov	r18, r24
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	02 2e       	mov	r0, r18
    286e:	02 c0       	rjmp	.+4      	; 0x2874 <DIO_voidSetPinDirection+0x194>
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	0a 94       	dec	r0
    2876:	e2 f7       	brpl	.-8      	; 0x2870 <DIO_voidSetPinDirection+0x190>
    2878:	80 95       	com	r24
    287a:	84 23       	and	r24, r20
    287c:	8c 93       	st	X, r24
    287e:	29 c0       	rjmp	.+82     	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
			case DIO_u8PORTC: CLR_BIT(DDRC, Copy_u8PinNum); break;
    2880:	a4 e3       	ldi	r26, 0x34	; 52
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e4 e3       	ldi	r30, 0x34	; 52
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	48 2f       	mov	r20, r24
    288c:	8a 81       	ldd	r24, Y+2	; 0x02
    288e:	28 2f       	mov	r18, r24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	02 2e       	mov	r0, r18
    2898:	02 c0       	rjmp	.+4      	; 0x289e <DIO_voidSetPinDirection+0x1be>
    289a:	88 0f       	add	r24, r24
    289c:	99 1f       	adc	r25, r25
    289e:	0a 94       	dec	r0
    28a0:	e2 f7       	brpl	.-8      	; 0x289a <DIO_voidSetPinDirection+0x1ba>
    28a2:	80 95       	com	r24
    28a4:	84 23       	and	r24, r20
    28a6:	8c 93       	st	X, r24
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <DIO_voidSetPinDirection+0x1f2>
			case DIO_u8PORTD: CLR_BIT(DDRD, Copy_u8PinNum); break;
    28aa:	a1 e3       	ldi	r26, 0x31	; 49
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e1 e3       	ldi	r30, 0x31	; 49
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	48 2f       	mov	r20, r24
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	28 2f       	mov	r18, r24
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	02 2e       	mov	r0, r18
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <DIO_voidSetPinDirection+0x1e8>
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	0a 94       	dec	r0
    28ca:	e2 f7       	brpl	.-8      	; 0x28c4 <DIO_voidSetPinDirection+0x1e4>
    28cc:	80 95       	com	r24
    28ce:	84 23       	and	r24, r20
    28d0:	8c 93       	st	X, r24
			default:    /*return error*/      				 break;
		}
	} else{
		/*return error*/
	}
}
    28d2:	27 96       	adiw	r28, 0x07	; 7
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Copy_u8PortNum, u8 Copy_u8PinNum, u8 Copy_u8Value){
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	27 97       	sbiw	r28, 0x07	; 7
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	6a 83       	std	Y+2, r22	; 0x02
    28fc:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == DIO_u8HIGH){
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	09 f0       	breq	.+2      	; 0x2906 <DIO_voidSetPinValue+0x22>
    2904:	70 c0       	rjmp	.+224    	; 0x29e6 <DIO_voidSetPinValue+0x102>
		switch (Copy_u8PortNum)
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	28 2f       	mov	r18, r24
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	3f 83       	std	Y+7, r19	; 0x07
    290e:	2e 83       	std	Y+6, r18	; 0x06
    2910:	8e 81       	ldd	r24, Y+6	; 0x06
    2912:	9f 81       	ldd	r25, Y+7	; 0x07
    2914:	82 30       	cpi	r24, 0x02	; 2
    2916:	91 05       	cpc	r25, r1
    2918:	51 f1       	breq	.+84     	; 0x296e <DIO_voidSetPinValue+0x8a>
    291a:	2e 81       	ldd	r18, Y+6	; 0x06
    291c:	3f 81       	ldd	r19, Y+7	; 0x07
    291e:	23 30       	cpi	r18, 0x03	; 3
    2920:	31 05       	cpc	r19, r1
    2922:	34 f4       	brge	.+12     	; 0x2930 <DIO_voidSetPinValue+0x4c>
    2924:	8e 81       	ldd	r24, Y+6	; 0x06
    2926:	9f 81       	ldd	r25, Y+7	; 0x07
    2928:	81 30       	cpi	r24, 0x01	; 1
    292a:	91 05       	cpc	r25, r1
    292c:	61 f0       	breq	.+24     	; 0x2946 <DIO_voidSetPinValue+0x62>
    292e:	d3 c0       	rjmp	.+422    	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
    2930:	2e 81       	ldd	r18, Y+6	; 0x06
    2932:	3f 81       	ldd	r19, Y+7	; 0x07
    2934:	23 30       	cpi	r18, 0x03	; 3
    2936:	31 05       	cpc	r19, r1
    2938:	71 f1       	breq	.+92     	; 0x2996 <DIO_voidSetPinValue+0xb2>
    293a:	8e 81       	ldd	r24, Y+6	; 0x06
    293c:	9f 81       	ldd	r25, Y+7	; 0x07
    293e:	84 30       	cpi	r24, 0x04	; 4
    2940:	91 05       	cpc	r25, r1
    2942:	e9 f1       	breq	.+122    	; 0x29be <DIO_voidSetPinValue+0xda>
    2944:	c8 c0       	rjmp	.+400    	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
		{
			case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8PinNum); break;
    2946:	ab e3       	ldi	r26, 0x3B	; 59
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	eb e3       	ldi	r30, 0x3B	; 59
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	48 2f       	mov	r20, r24
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	28 2f       	mov	r18, r24
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	02 2e       	mov	r0, r18
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <DIO_voidSetPinValue+0x80>
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	0a 94       	dec	r0
    2966:	e2 f7       	brpl	.-8      	; 0x2960 <DIO_voidSetPinValue+0x7c>
    2968:	84 2b       	or	r24, r20
    296a:	8c 93       	st	X, r24
    296c:	b4 c0       	rjmp	.+360    	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8PinNum); break;
    296e:	a8 e3       	ldi	r26, 0x38	; 56
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e8 e3       	ldi	r30, 0x38	; 56
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	48 2f       	mov	r20, r24
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	28 2f       	mov	r18, r24
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	02 2e       	mov	r0, r18
    2986:	02 c0       	rjmp	.+4      	; 0x298c <DIO_voidSetPinValue+0xa8>
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	0a 94       	dec	r0
    298e:	e2 f7       	brpl	.-8      	; 0x2988 <DIO_voidSetPinValue+0xa4>
    2990:	84 2b       	or	r24, r20
    2992:	8c 93       	st	X, r24
    2994:	a0 c0       	rjmp	.+320    	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8PinNum); break;
    2996:	a5 e3       	ldi	r26, 0x35	; 53
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e5 e3       	ldi	r30, 0x35	; 53
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	48 2f       	mov	r20, r24
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	28 2f       	mov	r18, r24
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	02 2e       	mov	r0, r18
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <DIO_voidSetPinValue+0xd0>
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	0a 94       	dec	r0
    29b6:	e2 f7       	brpl	.-8      	; 0x29b0 <DIO_voidSetPinValue+0xcc>
    29b8:	84 2b       	or	r24, r20
    29ba:	8c 93       	st	X, r24
    29bc:	8c c0       	rjmp	.+280    	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8PinNum); break;
    29be:	a2 e3       	ldi	r26, 0x32	; 50
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	e2 e3       	ldi	r30, 0x32	; 50
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	48 2f       	mov	r20, r24
    29ca:	8a 81       	ldd	r24, Y+2	; 0x02
    29cc:	28 2f       	mov	r18, r24
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	02 2e       	mov	r0, r18
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <DIO_voidSetPinValue+0xf8>
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	0a 94       	dec	r0
    29de:	e2 f7       	brpl	.-8      	; 0x29d8 <DIO_voidSetPinValue+0xf4>
    29e0:	84 2b       	or	r24, r20
    29e2:	8c 93       	st	X, r24
    29e4:	78 c0       	rjmp	.+240    	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
			default:    /*return error*/      				  break;
		}
	} else if (Copy_u8Value == DIO_u8LOW){
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	88 23       	and	r24, r24
    29ea:	09 f0       	breq	.+2      	; 0x29ee <DIO_voidSetPinValue+0x10a>
    29ec:	74 c0       	rjmp	.+232    	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
		switch (Copy_u8PortNum)
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	3d 83       	std	Y+5, r19	; 0x05
    29f6:	2c 83       	std	Y+4, r18	; 0x04
    29f8:	8c 81       	ldd	r24, Y+4	; 0x04
    29fa:	9d 81       	ldd	r25, Y+5	; 0x05
    29fc:	82 30       	cpi	r24, 0x02	; 2
    29fe:	91 05       	cpc	r25, r1
    2a00:	61 f1       	breq	.+88     	; 0x2a5a <DIO_voidSetPinValue+0x176>
    2a02:	2c 81       	ldd	r18, Y+4	; 0x04
    2a04:	3d 81       	ldd	r19, Y+5	; 0x05
    2a06:	23 30       	cpi	r18, 0x03	; 3
    2a08:	31 05       	cpc	r19, r1
    2a0a:	34 f4       	brge	.+12     	; 0x2a18 <DIO_voidSetPinValue+0x134>
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a10:	81 30       	cpi	r24, 0x01	; 1
    2a12:	91 05       	cpc	r25, r1
    2a14:	69 f0       	breq	.+26     	; 0x2a30 <DIO_voidSetPinValue+0x14c>
    2a16:	5f c0       	rjmp	.+190    	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
    2a18:	2c 81       	ldd	r18, Y+4	; 0x04
    2a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a1c:	23 30       	cpi	r18, 0x03	; 3
    2a1e:	31 05       	cpc	r19, r1
    2a20:	89 f1       	breq	.+98     	; 0x2a84 <DIO_voidSetPinValue+0x1a0>
    2a22:	8c 81       	ldd	r24, Y+4	; 0x04
    2a24:	9d 81       	ldd	r25, Y+5	; 0x05
    2a26:	84 30       	cpi	r24, 0x04	; 4
    2a28:	91 05       	cpc	r25, r1
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <DIO_voidSetPinValue+0x14a>
    2a2c:	40 c0       	rjmp	.+128    	; 0x2aae <DIO_voidSetPinValue+0x1ca>
    2a2e:	53 c0       	rjmp	.+166    	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
		{
			case DIO_u8PORTA: CLR_BIT(PORTA, Copy_u8PinNum); break;
    2a30:	ab e3       	ldi	r26, 0x3B	; 59
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	eb e3       	ldi	r30, 0x3B	; 59
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	48 2f       	mov	r20, r24
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	02 2e       	mov	r0, r18
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <DIO_voidSetPinValue+0x16a>
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	0a 94       	dec	r0
    2a50:	e2 f7       	brpl	.-8      	; 0x2a4a <DIO_voidSetPinValue+0x166>
    2a52:	80 95       	com	r24
    2a54:	84 23       	and	r24, r20
    2a56:	8c 93       	st	X, r24
    2a58:	3e c0       	rjmp	.+124    	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTB: CLR_BIT(PORTB, Copy_u8PinNum); break;
    2a5a:	a8 e3       	ldi	r26, 0x38	; 56
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e8 e3       	ldi	r30, 0x38	; 56
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	48 2f       	mov	r20, r24
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	02 2e       	mov	r0, r18
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <DIO_voidSetPinValue+0x194>
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	0a 94       	dec	r0
    2a7a:	e2 f7       	brpl	.-8      	; 0x2a74 <DIO_voidSetPinValue+0x190>
    2a7c:	80 95       	com	r24
    2a7e:	84 23       	and	r24, r20
    2a80:	8c 93       	st	X, r24
    2a82:	29 c0       	rjmp	.+82     	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTC: CLR_BIT(PORTC, Copy_u8PinNum); break;
    2a84:	a5 e3       	ldi	r26, 0x35	; 53
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e5 e3       	ldi	r30, 0x35	; 53
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	48 2f       	mov	r20, r24
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	02 2e       	mov	r0, r18
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <DIO_voidSetPinValue+0x1be>
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	0a 94       	dec	r0
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <DIO_voidSetPinValue+0x1ba>
    2aa6:	80 95       	com	r24
    2aa8:	84 23       	and	r24, r20
    2aaa:	8c 93       	st	X, r24
    2aac:	14 c0       	rjmp	.+40     	; 0x2ad6 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTD: CLR_BIT(PORTD, Copy_u8PinNum); break;
    2aae:	a2 e3       	ldi	r26, 0x32	; 50
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	e2 e3       	ldi	r30, 0x32	; 50
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	48 2f       	mov	r20, r24
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	28 2f       	mov	r18, r24
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	02 2e       	mov	r0, r18
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <DIO_voidSetPinValue+0x1e8>
    2ac8:	88 0f       	add	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	0a 94       	dec	r0
    2ace:	e2 f7       	brpl	.-8      	; 0x2ac8 <DIO_voidSetPinValue+0x1e4>
    2ad0:	80 95       	com	r24
    2ad2:	84 23       	and	r24, r20
    2ad4:	8c 93       	st	X, r24
			default:    /*return error*/      				  break;
		}
	} else{
		/*return error*/
	}
}
    2ad6:	27 96       	adiw	r28, 0x07	; 7
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection(u8 Copy_u8PortNum, u8 Copy_u8Mode){
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <DIO_voidSetPortDirection+0x6>
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <DIO_voidSetPortDirection+0x8>
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	89 83       	std	Y+1, r24	; 0x01
    2af6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNum)
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	28 2f       	mov	r18, r24
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	3c 83       	std	Y+4, r19	; 0x04
    2b00:	2b 83       	std	Y+3, r18	; 0x03
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	9c 81       	ldd	r25, Y+4	; 0x04
    2b06:	82 30       	cpi	r24, 0x02	; 2
    2b08:	91 05       	cpc	r25, r1
    2b0a:	d9 f0       	breq	.+54     	; 0x2b42 <DIO_voidSetPortDirection+0x5a>
    2b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b10:	23 30       	cpi	r18, 0x03	; 3
    2b12:	31 05       	cpc	r19, r1
    2b14:	34 f4       	brge	.+12     	; 0x2b22 <DIO_voidSetPortDirection+0x3a>
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	61 f0       	breq	.+24     	; 0x2b38 <DIO_voidSetPortDirection+0x50>
    2b20:	1e c0       	rjmp	.+60     	; 0x2b5e <DIO_voidSetPortDirection+0x76>
    2b22:	2b 81       	ldd	r18, Y+3	; 0x03
    2b24:	3c 81       	ldd	r19, Y+4	; 0x04
    2b26:	23 30       	cpi	r18, 0x03	; 3
    2b28:	31 05       	cpc	r19, r1
    2b2a:	81 f0       	breq	.+32     	; 0x2b4c <DIO_voidSetPortDirection+0x64>
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b30:	84 30       	cpi	r24, 0x04	; 4
    2b32:	91 05       	cpc	r25, r1
    2b34:	81 f0       	breq	.+32     	; 0x2b56 <DIO_voidSetPortDirection+0x6e>
    2b36:	13 c0       	rjmp	.+38     	; 0x2b5e <DIO_voidSetPortDirection+0x76>
	{
		case DIO_u8PORTA: DDRA = Copy_u8Mode; break;
    2b38:	ea e3       	ldi	r30, 0x3A	; 58
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	80 83       	st	Z, r24
    2b40:	0e c0       	rjmp	.+28     	; 0x2b5e <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTB: DDRB = Copy_u8Mode; break;
    2b42:	e7 e3       	ldi	r30, 0x37	; 55
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	80 83       	st	Z, r24
    2b4a:	09 c0       	rjmp	.+18     	; 0x2b5e <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTC: DDRC = Copy_u8Mode; break;
    2b4c:	e4 e3       	ldi	r30, 0x34	; 52
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	80 83       	st	Z, r24
    2b54:	04 c0       	rjmp	.+8      	; 0x2b5e <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTD: DDRD = Copy_u8Mode; break;
    2b56:	e1 e3       	ldi	r30, 0x31	; 49
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5c:	80 83       	st	Z, r24
		default:    /*return error*/      	  break;
	}
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8PortNum, u8 Copy_u8Value){
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <DIO_voidSetPortValue+0x6>
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <DIO_voidSetPortValue+0x8>
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNum)
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	28 2f       	mov	r18, r24
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	3c 83       	std	Y+4, r19	; 0x04
    2b84:	2b 83       	std	Y+3, r18	; 0x03
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8a:	82 30       	cpi	r24, 0x02	; 2
    2b8c:	91 05       	cpc	r25, r1
    2b8e:	d9 f0       	breq	.+54     	; 0x2bc6 <DIO_voidSetPortValue+0x5a>
    2b90:	2b 81       	ldd	r18, Y+3	; 0x03
    2b92:	3c 81       	ldd	r19, Y+4	; 0x04
    2b94:	23 30       	cpi	r18, 0x03	; 3
    2b96:	31 05       	cpc	r19, r1
    2b98:	34 f4       	brge	.+12     	; 0x2ba6 <DIO_voidSetPortValue+0x3a>
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9e:	81 30       	cpi	r24, 0x01	; 1
    2ba0:	91 05       	cpc	r25, r1
    2ba2:	61 f0       	breq	.+24     	; 0x2bbc <DIO_voidSetPortValue+0x50>
    2ba4:	1e c0       	rjmp	.+60     	; 0x2be2 <DIO_voidSetPortValue+0x76>
    2ba6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba8:	3c 81       	ldd	r19, Y+4	; 0x04
    2baa:	23 30       	cpi	r18, 0x03	; 3
    2bac:	31 05       	cpc	r19, r1
    2bae:	81 f0       	breq	.+32     	; 0x2bd0 <DIO_voidSetPortValue+0x64>
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb4:	84 30       	cpi	r24, 0x04	; 4
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	81 f0       	breq	.+32     	; 0x2bda <DIO_voidSetPortValue+0x6e>
    2bba:	13 c0       	rjmp	.+38     	; 0x2be2 <DIO_voidSetPortValue+0x76>
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    2bbc:	eb e3       	ldi	r30, 0x3B	; 59
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	80 83       	st	Z, r24
    2bc4:	0e c0       	rjmp	.+28     	; 0x2be2 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    2bc6:	e8 e3       	ldi	r30, 0x38	; 56
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	80 83       	st	Z, r24
    2bce:	09 c0       	rjmp	.+18     	; 0x2be2 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    2bd0:	e5 e3       	ldi	r30, 0x35	; 53
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	80 83       	st	Z, r24
    2bd8:	04 c0       	rjmp	.+8      	; 0x2be2 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    2bda:	e2 e3       	ldi	r30, 0x32	; 50
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	80 83       	st	Z, r24
		default:    /*return error*/      	  break;
	}
}
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <DIO_voidToggleValue>:
void DIO_voidToggleValue(u8 Copy_u8PortNum, u8 Copy_u8PinNum){
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <DIO_voidToggleValue+0x6>
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <DIO_voidToggleValue+0x8>
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	89 83       	std	Y+1, r24	; 0x01
    2bfe:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNum)
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	28 2f       	mov	r18, r24
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	3c 83       	std	Y+4, r19	; 0x04
    2c08:	2b 83       	std	Y+3, r18	; 0x03
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0e:	82 30       	cpi	r24, 0x02	; 2
    2c10:	91 05       	cpc	r25, r1
    2c12:	51 f1       	breq	.+84     	; 0x2c68 <DIO_voidToggleValue+0x78>
    2c14:	2b 81       	ldd	r18, Y+3	; 0x03
    2c16:	3c 81       	ldd	r19, Y+4	; 0x04
    2c18:	23 30       	cpi	r18, 0x03	; 3
    2c1a:	31 05       	cpc	r19, r1
    2c1c:	34 f4       	brge	.+12     	; 0x2c2a <DIO_voidToggleValue+0x3a>
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	9c 81       	ldd	r25, Y+4	; 0x04
    2c22:	81 30       	cpi	r24, 0x01	; 1
    2c24:	91 05       	cpc	r25, r1
    2c26:	61 f0       	breq	.+24     	; 0x2c40 <DIO_voidToggleValue+0x50>
    2c28:	5a c0       	rjmp	.+180    	; 0x2cde <DIO_voidToggleValue+0xee>
    2c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c2e:	23 30       	cpi	r18, 0x03	; 3
    2c30:	31 05       	cpc	r19, r1
    2c32:	71 f1       	breq	.+92     	; 0x2c90 <DIO_voidToggleValue+0xa0>
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	84 30       	cpi	r24, 0x04	; 4
    2c3a:	91 05       	cpc	r25, r1
    2c3c:	e9 f1       	breq	.+122    	; 0x2cb8 <DIO_voidToggleValue+0xc8>
    2c3e:	4f c0       	rjmp	.+158    	; 0x2cde <DIO_voidToggleValue+0xee>
	{
		case DIO_u8PORTA: TOGGLE_BIT(PORTA,Copy_u8PinNum); break;
    2c40:	ab e3       	ldi	r26, 0x3B	; 59
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	eb e3       	ldi	r30, 0x3B	; 59
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	48 2f       	mov	r20, r24
    2c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4e:	28 2f       	mov	r18, r24
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	02 2e       	mov	r0, r18
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <DIO_voidToggleValue+0x6e>
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	0a 94       	dec	r0
    2c60:	e2 f7       	brpl	.-8      	; 0x2c5a <DIO_voidToggleValue+0x6a>
    2c62:	84 27       	eor	r24, r20
    2c64:	8c 93       	st	X, r24
    2c66:	3b c0       	rjmp	.+118    	; 0x2cde <DIO_voidToggleValue+0xee>
		case DIO_u8PORTB: TOGGLE_BIT(PORTB,Copy_u8PinNum); break;
    2c68:	a8 e3       	ldi	r26, 0x38	; 56
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	e8 e3       	ldi	r30, 0x38	; 56
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	48 2f       	mov	r20, r24
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	28 2f       	mov	r18, r24
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	02 2e       	mov	r0, r18
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <DIO_voidToggleValue+0x96>
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	0a 94       	dec	r0
    2c88:	e2 f7       	brpl	.-8      	; 0x2c82 <DIO_voidToggleValue+0x92>
    2c8a:	84 27       	eor	r24, r20
    2c8c:	8c 93       	st	X, r24
    2c8e:	27 c0       	rjmp	.+78     	; 0x2cde <DIO_voidToggleValue+0xee>
		case DIO_u8PORTC: TOGGLE_BIT(PORTC,Copy_u8PinNum); break;
    2c90:	a5 e3       	ldi	r26, 0x35	; 53
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e5 e3       	ldi	r30, 0x35	; 53
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	48 2f       	mov	r20, r24
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	02 2e       	mov	r0, r18
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <DIO_voidToggleValue+0xbe>
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	0a 94       	dec	r0
    2cb0:	e2 f7       	brpl	.-8      	; 0x2caa <DIO_voidToggleValue+0xba>
    2cb2:	84 27       	eor	r24, r20
    2cb4:	8c 93       	st	X, r24
    2cb6:	13 c0       	rjmp	.+38     	; 0x2cde <DIO_voidToggleValue+0xee>
		case DIO_u8PORTD: TOGGLE_BIT(PORTD,Copy_u8PinNum); break;
    2cb8:	a2 e3       	ldi	r26, 0x32	; 50
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e2 e3       	ldi	r30, 0x32	; 50
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	48 2f       	mov	r20, r24
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	02 2e       	mov	r0, r18
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <DIO_voidToggleValue+0xe6>
    2cd2:	88 0f       	add	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	0a 94       	dec	r0
    2cd8:	e2 f7       	brpl	.-8      	; 0x2cd2 <DIO_voidToggleValue+0xe2>
    2cda:	84 27       	eor	r24, r20
    2cdc:	8c 93       	st	X, r24
		default:    /*return error*/      	  break;
	}
}
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortNum, u8 Copy_u8PinNum){
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <DIO_u8GetPinValue+0x6>
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <DIO_u8GetPinValue+0x8>
    2cf4:	0f 92       	push	r0
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	8a 83       	std	Y+2, r24	; 0x02
    2cfc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    2cfe:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8PortNum)
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	3d 83       	std	Y+5, r19	; 0x05
    2d08:	2c 83       	std	Y+4, r18	; 0x04
    2d0a:	4c 81       	ldd	r20, Y+4	; 0x04
    2d0c:	5d 81       	ldd	r21, Y+5	; 0x05
    2d0e:	42 30       	cpi	r20, 0x02	; 2
    2d10:	51 05       	cpc	r21, r1
    2d12:	41 f1       	breq	.+80     	; 0x2d64 <DIO_u8GetPinValue+0x78>
    2d14:	8c 81       	ldd	r24, Y+4	; 0x04
    2d16:	9d 81       	ldd	r25, Y+5	; 0x05
    2d18:	83 30       	cpi	r24, 0x03	; 3
    2d1a:	91 05       	cpc	r25, r1
    2d1c:	34 f4       	brge	.+12     	; 0x2d2a <DIO_u8GetPinValue+0x3e>
    2d1e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d20:	3d 81       	ldd	r19, Y+5	; 0x05
    2d22:	21 30       	cpi	r18, 0x01	; 1
    2d24:	31 05       	cpc	r19, r1
    2d26:	61 f0       	breq	.+24     	; 0x2d40 <DIO_u8GetPinValue+0x54>
    2d28:	52 c0       	rjmp	.+164    	; 0x2dce <DIO_u8GetPinValue+0xe2>
    2d2a:	4c 81       	ldd	r20, Y+4	; 0x04
    2d2c:	5d 81       	ldd	r21, Y+5	; 0x05
    2d2e:	43 30       	cpi	r20, 0x03	; 3
    2d30:	51 05       	cpc	r21, r1
    2d32:	51 f1       	breq	.+84     	; 0x2d88 <DIO_u8GetPinValue+0x9c>
    2d34:	8c 81       	ldd	r24, Y+4	; 0x04
    2d36:	9d 81       	ldd	r25, Y+5	; 0x05
    2d38:	84 30       	cpi	r24, 0x04	; 4
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	b9 f1       	breq	.+110    	; 0x2dac <DIO_u8GetPinValue+0xc0>
    2d3e:	47 c0       	rjmp	.+142    	; 0x2dce <DIO_u8GetPinValue+0xe2>
	{
		case DIO_u8PORTA: Local_u8Result = GET_BIT(PINA, Copy_u8PinNum); break;
    2d40:	e9 e3       	ldi	r30, 0x39	; 57
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	88 2f       	mov	r24, r24
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	a9 01       	movw	r20, r18
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <DIO_u8GetPinValue+0x6c>
    2d54:	55 95       	asr	r21
    2d56:	47 95       	ror	r20
    2d58:	8a 95       	dec	r24
    2d5a:	e2 f7       	brpl	.-8      	; 0x2d54 <DIO_u8GetPinValue+0x68>
    2d5c:	ca 01       	movw	r24, r20
    2d5e:	81 70       	andi	r24, 0x01	; 1
    2d60:	89 83       	std	Y+1, r24	; 0x01
    2d62:	35 c0       	rjmp	.+106    	; 0x2dce <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTB: Local_u8Result = GET_BIT(PINB, Copy_u8PinNum); break;
    2d64:	e6 e3       	ldi	r30, 0x36	; 54
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	88 2f       	mov	r24, r24
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	a9 01       	movw	r20, r18
    2d76:	02 c0       	rjmp	.+4      	; 0x2d7c <DIO_u8GetPinValue+0x90>
    2d78:	55 95       	asr	r21
    2d7a:	47 95       	ror	r20
    2d7c:	8a 95       	dec	r24
    2d7e:	e2 f7       	brpl	.-8      	; 0x2d78 <DIO_u8GetPinValue+0x8c>
    2d80:	ca 01       	movw	r24, r20
    2d82:	81 70       	andi	r24, 0x01	; 1
    2d84:	89 83       	std	Y+1, r24	; 0x01
    2d86:	23 c0       	rjmp	.+70     	; 0x2dce <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTC: Local_u8Result = GET_BIT(PINC, Copy_u8PinNum); break;
    2d88:	e3 e3       	ldi	r30, 0x33	; 51
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	8b 81       	ldd	r24, Y+3	; 0x03
    2d94:	88 2f       	mov	r24, r24
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	a9 01       	movw	r20, r18
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <DIO_u8GetPinValue+0xb4>
    2d9c:	55 95       	asr	r21
    2d9e:	47 95       	ror	r20
    2da0:	8a 95       	dec	r24
    2da2:	e2 f7       	brpl	.-8      	; 0x2d9c <DIO_u8GetPinValue+0xb0>
    2da4:	ca 01       	movw	r24, r20
    2da6:	81 70       	andi	r24, 0x01	; 1
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	11 c0       	rjmp	.+34     	; 0x2dce <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTD: Local_u8Result = GET_BIT(PIND, Copy_u8PinNum); break;
    2dac:	e0 e3       	ldi	r30, 0x30	; 48
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	8b 81       	ldd	r24, Y+3	; 0x03
    2db8:	88 2f       	mov	r24, r24
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	a9 01       	movw	r20, r18
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <DIO_u8GetPinValue+0xd8>
    2dc0:	55 95       	asr	r21
    2dc2:	47 95       	ror	r20
    2dc4:	8a 95       	dec	r24
    2dc6:	e2 f7       	brpl	.-8      	; 0x2dc0 <DIO_u8GetPinValue+0xd4>
    2dc8:	ca 01       	movw	r24, r20
    2dca:	81 70       	andi	r24, 0x01	; 1
    2dcc:	89 83       	std	Y+1, r24	; 0x01
		default:    /*return error*/      								   break;
	}
	return Local_u8Result;
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <DCMotor_init>:
 *      Author: hp
 */

#include "DC_Motor_Interface.h"

void DCMotor_init(Motor *motor){
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <DCMotor_init+0x6>
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	9a 83       	std	Y+2, r25	; 0x02
    2dec:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(motor->motor_port, motor->motor_pin1, DIO_u8OUTPUT);
    2dee:	e9 81       	ldd	r30, Y+1	; 0x01
    2df0:	fa 81       	ldd	r31, Y+2	; 0x02
    2df2:	80 81       	ld	r24, Z
    2df4:	e9 81       	ldd	r30, Y+1	; 0x01
    2df6:	fa 81       	ldd	r31, Y+2	; 0x02
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	69 2f       	mov	r22, r25
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(motor->motor_port, motor->motor_pin2, DIO_u8OUTPUT);
    2e02:	e9 81       	ldd	r30, Y+1	; 0x01
    2e04:	fa 81       	ldd	r31, Y+2	; 0x02
    2e06:	80 81       	ld	r24, Z
    2e08:	e9 81       	ldd	r30, Y+1	; 0x01
    2e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e0c:	92 81       	ldd	r25, Z+2	; 0x02
    2e0e:	69 2f       	mov	r22, r25
    2e10:	41 e0       	ldi	r20, 0x01	; 1
    2e12:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(motor->motor_port, motor->motor_pin3, DIO_u8OUTPUT);
    2e16:	e9 81       	ldd	r30, Y+1	; 0x01
    2e18:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1a:	80 81       	ld	r24, Z
    2e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e20:	93 81       	ldd	r25, Z+3	; 0x03
    2e22:	69 2f       	mov	r22, r25
    2e24:	41 e0       	ldi	r20, 0x01	; 1
    2e26:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(motor->motor_port, motor->motor_pin4, DIO_u8OUTPUT);
    2e2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2e:	80 81       	ld	r24, Z
    2e30:	e9 81       	ldd	r30, Y+1	; 0x01
    2e32:	fa 81       	ldd	r31, Y+2	; 0x02
    2e34:	94 81       	ldd	r25, Z+4	; 0x04
    2e36:	69 2f       	mov	r22, r25
    2e38:	41 e0       	ldi	r20, 0x01	; 1
    2e3a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
}
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <DCMotor_OFF>:

void DCMotor_OFF(Motor *motor){
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <DCMotor_OFF+0x6>
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	9a 83       	std	Y+2, r25	; 0x02
    2e54:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin1, DIO_u8LOW);
    2e56:	e9 81       	ldd	r30, Y+1	; 0x01
    2e58:	fa 81       	ldd	r31, Y+2	; 0x02
    2e5a:	80 81       	ld	r24, Z
    2e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	69 2f       	mov	r22, r25
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin2, DIO_u8LOW);
    2e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e6e:	80 81       	ld	r24, Z
    2e70:	e9 81       	ldd	r30, Y+1	; 0x01
    2e72:	fa 81       	ldd	r31, Y+2	; 0x02
    2e74:	92 81       	ldd	r25, Z+2	; 0x02
    2e76:	69 2f       	mov	r22, r25
    2e78:	40 e0       	ldi	r20, 0x00	; 0
    2e7a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin3, DIO_u8LOW);
    2e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e80:	fa 81       	ldd	r31, Y+2	; 0x02
    2e82:	80 81       	ld	r24, Z
    2e84:	e9 81       	ldd	r30, Y+1	; 0x01
    2e86:	fa 81       	ldd	r31, Y+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	69 2f       	mov	r22, r25
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin4, DIO_u8LOW);
    2e92:	e9 81       	ldd	r30, Y+1	; 0x01
    2e94:	fa 81       	ldd	r31, Y+2	; 0x02
    2e96:	80 81       	ld	r24, Z
    2e98:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e9c:	94 81       	ldd	r25, Z+4	; 0x04
    2e9e:	69 2f       	mov	r22, r25
    2ea0:	40 e0       	ldi	r20, 0x00	; 0
    2ea2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
}
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <DCMotor_SetCW>:
/*
 * CW  -> pin 2,3
 * CCW -> pin 1,4
 * */

void DCMotor_SetCW(Motor *motor){
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <DCMotor_SetCW+0x6>
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	9a 83       	std	Y+2, r25	; 0x02
    2ebc:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin1, DIO_u8LOW);
    2ebe:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec2:	80 81       	ld	r24, Z
    2ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	69 2f       	mov	r22, r25
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin2, DIO_u8HIGH);
    2ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed6:	80 81       	ld	r24, Z
    2ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eda:	fa 81       	ldd	r31, Y+2	; 0x02
    2edc:	92 81       	ldd	r25, Z+2	; 0x02
    2ede:	69 2f       	mov	r22, r25
    2ee0:	41 e0       	ldi	r20, 0x01	; 1
    2ee2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin3, DIO_u8HIGH);
    2ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eea:	80 81       	ld	r24, Z
    2eec:	e9 81       	ldd	r30, Y+1	; 0x01
    2eee:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef0:	93 81       	ldd	r25, Z+3	; 0x03
    2ef2:	69 2f       	mov	r22, r25
    2ef4:	41 e0       	ldi	r20, 0x01	; 1
    2ef6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin4, DIO_u8LOW);
    2efa:	e9 81       	ldd	r30, Y+1	; 0x01
    2efc:	fa 81       	ldd	r31, Y+2	; 0x02
    2efe:	80 81       	ld	r24, Z
    2f00:	e9 81       	ldd	r30, Y+1	; 0x01
    2f02:	fa 81       	ldd	r31, Y+2	; 0x02
    2f04:	94 81       	ldd	r25, Z+4	; 0x04
    2f06:	69 2f       	mov	r22, r25
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
}
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <DCMotor_SetCCW>:

void DCMotor_SetCCW(Motor *motor){
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <DCMotor_SetCCW+0x6>
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	9a 83       	std	Y+2, r25	; 0x02
    2f24:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin1, DIO_u8HIGH);
    2f26:	e9 81       	ldd	r30, Y+1	; 0x01
    2f28:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2a:	80 81       	ld	r24, Z
    2f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	69 2f       	mov	r22, r25
    2f34:	41 e0       	ldi	r20, 0x01	; 1
    2f36:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin2, DIO_u8LOW);
    2f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f3e:	80 81       	ld	r24, Z
    2f40:	e9 81       	ldd	r30, Y+1	; 0x01
    2f42:	fa 81       	ldd	r31, Y+2	; 0x02
    2f44:	92 81       	ldd	r25, Z+2	; 0x02
    2f46:	69 2f       	mov	r22, r25
    2f48:	40 e0       	ldi	r20, 0x00	; 0
    2f4a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin3, DIO_u8LOW);
    2f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f50:	fa 81       	ldd	r31, Y+2	; 0x02
    2f52:	80 81       	ld	r24, Z
    2f54:	e9 81       	ldd	r30, Y+1	; 0x01
    2f56:	fa 81       	ldd	r31, Y+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	69 2f       	mov	r22, r25
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor->motor_port, motor->motor_pin4, DIO_u8HIGH);
    2f62:	e9 81       	ldd	r30, Y+1	; 0x01
    2f64:	fa 81       	ldd	r31, Y+2	; 0x02
    2f66:	80 81       	ld	r24, Z
    2f68:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6c:	94 81       	ldd	r25, Z+4	; 0x04
    2f6e:	69 2f       	mov	r22, r25
    2f70:	41 e0       	ldi	r20, 0x01	; 1
    2f72:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
}
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <DCMotor_Toggle>:

void DCMotor_Toggle(Motor *motor){
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <DCMotor_Toggle+0x6>
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	9a 83       	std	Y+2, r25	; 0x02
    2f8c:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidToggleValue(motor->motor_port, motor->motor_pin1);
    2f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f90:	fa 81       	ldd	r31, Y+2	; 0x02
    2f92:	80 81       	ld	r24, Z
    2f94:	e9 81       	ldd	r30, Y+1	; 0x01
    2f96:	fa 81       	ldd	r31, Y+2	; 0x02
    2f98:	91 81       	ldd	r25, Z+1	; 0x01
    2f9a:	69 2f       	mov	r22, r25
    2f9c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <DIO_voidToggleValue>
	DIO_voidToggleValue(motor->motor_port, motor->motor_pin2);
    2fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa4:	80 81       	ld	r24, Z
    2fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    2faa:	92 81       	ldd	r25, Z+2	; 0x02
    2fac:	69 2f       	mov	r22, r25
    2fae:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <DIO_voidToggleValue>
	DIO_voidToggleValue(motor->motor_port, motor->motor_pin3);
    2fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb6:	80 81       	ld	r24, Z
    2fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fba:	fa 81       	ldd	r31, Y+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	69 2f       	mov	r22, r25
    2fc0:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <DIO_voidToggleValue>
	DIO_voidToggleValue(motor->motor_port, motor->motor_pin4);
    2fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc8:	80 81       	ld	r24, Z
    2fca:	e9 81       	ldd	r30, Y+1	; 0x01
    2fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fce:	94 81       	ldd	r25, Z+4	; 0x04
    2fd0:	69 2f       	mov	r22, r25
    2fd2:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <DIO_voidToggleValue>
}
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <KPD_init>:
u8 static KPD_Arr[4][4] = { {'7','8','9','/'},
							{'4','5','6','*'},
							{'1','2','3','-'},
							{'C','0','=','+'} };

void KPD_init(void){
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <KPD_init+0x6>
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
	//R0->R3 (rows)    //C0->C3 //0x0f
	//C0->C3 (columns) //C4->C7 //0xf0
	for (u8 i=0;i<4;i++){
    2fea:	1a 82       	std	Y+2, r1	; 0x02
    2fec:	08 c0       	rjmp	.+16     	; 0x2ffe <KPD_init+0x1e>
		DIO_voidSetPinDirection(KPD_PORT, i, DIO_u8OUTPUT);
    2fee:	83 e0       	ldi	r24, 0x03	; 3
    2ff0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ff2:	41 e0       	ldi	r20, 0x01	; 1
    2ff4:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
							{'C','0','=','+'} };

void KPD_init(void){
	//R0->R3 (rows)    //C0->C3 //0x0f
	//C0->C3 (columns) //C4->C7 //0xf0
	for (u8 i=0;i<4;i++){
    2ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffa:	8f 5f       	subi	r24, 0xFF	; 255
    2ffc:	8a 83       	std	Y+2, r24	; 0x02
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	84 30       	cpi	r24, 0x04	; 4
    3002:	a8 f3       	brcs	.-22     	; 0x2fee <KPD_init+0xe>
		DIO_voidSetPinDirection(KPD_PORT, i, DIO_u8OUTPUT);
	}
	for (u8 i=4;i<8;i++){
    3004:	84 e0       	ldi	r24, 0x04	; 4
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	08 c0       	rjmp	.+16     	; 0x301a <KPD_init+0x3a>
		DIO_voidSetPinDirection(KPD_PORT, i, DIO_u8INPUT);
    300a:	83 e0       	ldi	r24, 0x03	; 3
    300c:	69 81       	ldd	r22, Y+1	; 0x01
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
	//R0->R3 (rows)    //C0->C3 //0x0f
	//C0->C3 (columns) //C4->C7 //0xf0
	for (u8 i=0;i<4;i++){
		DIO_voidSetPinDirection(KPD_PORT, i, DIO_u8OUTPUT);
	}
	for (u8 i=4;i<8;i++){
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	8f 5f       	subi	r24, 0xFF	; 255
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	88 30       	cpi	r24, 0x08	; 8
    301e:	a8 f3       	brcs	.-22     	; 0x300a <KPD_init+0x2a>
		DIO_voidSetPinDirection(KPD_PORT, i, DIO_u8INPUT);
	}
	DIO_voidSetPortValue(KPD_PORT, 0xff); //PORTC =
    3020:	83 e0       	ldi	r24, 0x03	; 3
    3022:	6f ef       	ldi	r22, 0xFF	; 255
    3024:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <DIO_voidSetPortValue>
}
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <KPD_GetPressedKey>:

u8 KPD_GetPressedKey(void){
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	61 97       	sbiw	r28, 0x11	; 17
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	f8 94       	cli
    3040:	de bf       	out	0x3e, r29	; 62
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	cd bf       	out	0x3d, r28	; 61
	u8 Key = 0;
    3046:	19 8a       	std	Y+17, r1	; 0x11
	u8 row,col;
	for (row = 0; row < 4; row++){
    3048:	18 8a       	std	Y+16, r1	; 0x10
    304a:	b6 c0       	rjmp	.+364    	; 0x31b8 <KPD_GetPressedKey+0x186>
		DIO_voidSetPinValue(KPD_PORT, row, DIO_u8LOW);
    304c:	83 e0       	ldi	r24, 0x03	; 3
    304e:	68 89       	ldd	r22, Y+16	; 0x10
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
		for(col = 4; col < 8; col++){
    3056:	84 e0       	ldi	r24, 0x04	; 4
    3058:	8f 87       	std	Y+15, r24	; 0x0f
    305a:	a2 c0       	rjmp	.+324    	; 0x31a0 <KPD_GetPressedKey+0x16e>
			if (DIO_u8GetPinValue(KPD_PORT, col) == 0){
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3060:	0e 94 76 16 	call	0x2cec	; 0x2cec <DIO_u8GetPinValue>
    3064:	88 23       	and	r24, r24
    3066:	09 f0       	breq	.+2      	; 0x306a <KPD_GetPressedKey+0x38>
    3068:	98 c0       	rjmp	.+304    	; 0x319a <KPD_GetPressedKey+0x168>
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	a0 ef       	ldi	r26, 0xF0	; 240
    3070:	b1 e4       	ldi	r27, 0x41	; 65
    3072:	8b 87       	std	Y+11, r24	; 0x0b
    3074:	9c 87       	std	Y+12, r25	; 0x0c
    3076:	ad 87       	std	Y+13, r26	; 0x0d
    3078:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307a:	6b 85       	ldd	r22, Y+11	; 0x0b
    307c:	7c 85       	ldd	r23, Y+12	; 0x0c
    307e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3080:	9e 85       	ldd	r25, Y+14	; 0x0e
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	4a ef       	ldi	r20, 0xFA	; 250
    3088:	54 e4       	ldi	r21, 0x44	; 68
    308a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	8f 83       	std	Y+7, r24	; 0x07
    3094:	98 87       	std	Y+8, r25	; 0x08
    3096:	a9 87       	std	Y+9, r26	; 0x09
    3098:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    309a:	6f 81       	ldd	r22, Y+7	; 0x07
    309c:	78 85       	ldd	r23, Y+8	; 0x08
    309e:	89 85       	ldd	r24, Y+9	; 0x09
    30a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 e8       	ldi	r20, 0x80	; 128
    30a8:	5f e3       	ldi	r21, 0x3F	; 63
    30aa:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    30ae:	88 23       	and	r24, r24
    30b0:	2c f4       	brge	.+10     	; 0x30bc <KPD_GetPressedKey+0x8a>
		__ticks = 1;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	9e 83       	std	Y+6, r25	; 0x06
    30b8:	8d 83       	std	Y+5, r24	; 0x05
    30ba:	3f c0       	rjmp	.+126    	; 0x313a <KPD_GetPressedKey+0x108>
	else if (__tmp > 65535)
    30bc:	6f 81       	ldd	r22, Y+7	; 0x07
    30be:	78 85       	ldd	r23, Y+8	; 0x08
    30c0:	89 85       	ldd	r24, Y+9	; 0x09
    30c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	3f ef       	ldi	r19, 0xFF	; 255
    30c8:	4f e7       	ldi	r20, 0x7F	; 127
    30ca:	57 e4       	ldi	r21, 0x47	; 71
    30cc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    30d0:	18 16       	cp	r1, r24
    30d2:	4c f5       	brge	.+82     	; 0x3126 <KPD_GetPressedKey+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30da:	9e 85       	ldd	r25, Y+14	; 0x0e
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e2       	ldi	r20, 0x20	; 32
    30e2:	51 e4       	ldi	r21, 0x41	; 65
    30e4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	9e 83       	std	Y+6, r25	; 0x06
    30fa:	8d 83       	std	Y+5, r24	; 0x05
    30fc:	0f c0       	rjmp	.+30     	; 0x311c <KPD_GetPressedKey+0xea>
    30fe:	88 ec       	ldi	r24, 0xC8	; 200
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9c 83       	std	Y+4, r25	; 0x04
    3104:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <KPD_GetPressedKey+0xd8>
    310e:	9c 83       	std	Y+4, r25	; 0x04
    3110:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	9e 81       	ldd	r25, Y+6	; 0x06
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	9e 83       	std	Y+6, r25	; 0x06
    311a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311c:	8d 81       	ldd	r24, Y+5	; 0x05
    311e:	9e 81       	ldd	r25, Y+6	; 0x06
    3120:	00 97       	sbiw	r24, 0x00	; 0
    3122:	69 f7       	brne	.-38     	; 0x30fe <KPD_GetPressedKey+0xcc>
    3124:	14 c0       	rjmp	.+40     	; 0x314e <KPD_GetPressedKey+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3126:	6f 81       	ldd	r22, Y+7	; 0x07
    3128:	78 85       	ldd	r23, Y+8	; 0x08
    312a:	89 85       	ldd	r24, Y+9	; 0x09
    312c:	9a 85       	ldd	r25, Y+10	; 0x0a
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	9e 83       	std	Y+6, r25	; 0x06
    3138:	8d 83       	std	Y+5, r24	; 0x05
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	9a 83       	std	Y+2, r25	; 0x02
    3140:	89 83       	std	Y+1, r24	; 0x01
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <KPD_GetPressedKey+0x114>
    314a:	9a 83       	std	Y+2, r25	; 0x02
    314c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(30);
				if (DIO_u8GetPinValue(KPD_PORT, col) == 0){
    314e:	83 e0       	ldi	r24, 0x03	; 3
    3150:	6f 85       	ldd	r22, Y+15	; 0x0f
    3152:	0e 94 76 16 	call	0x2cec	; 0x2cec <DIO_u8GetPinValue>
    3156:	88 23       	and	r24, r24
    3158:	01 f5       	brne	.+64     	; 0x319a <KPD_GetPressedKey+0x168>
					while(DIO_u8GetPinValue(KPD_PORT, col) == 0);
    315a:	83 e0       	ldi	r24, 0x03	; 3
    315c:	6f 85       	ldd	r22, Y+15	; 0x0f
    315e:	0e 94 76 16 	call	0x2cec	; 0x2cec <DIO_u8GetPinValue>
    3162:	88 23       	and	r24, r24
    3164:	d1 f3       	breq	.-12     	; 0x315a <KPD_GetPressedKey+0x128>
					Key = KPD_Arr[row][col-4];
    3166:	88 89       	ldd	r24, Y+16	; 0x10
    3168:	48 2f       	mov	r20, r24
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	8f 85       	ldd	r24, Y+15	; 0x0f
    316e:	88 2f       	mov	r24, r24
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9c 01       	movw	r18, r24
    3174:	24 50       	subi	r18, 0x04	; 4
    3176:	30 40       	sbci	r19, 0x00	; 0
    3178:	ca 01       	movw	r24, r20
    317a:	88 0f       	add	r24, r24
    317c:	99 1f       	adc	r25, r25
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	82 0f       	add	r24, r18
    3184:	93 1f       	adc	r25, r19
    3186:	fc 01       	movw	r30, r24
    3188:	e5 58       	subi	r30, 0x85	; 133
    318a:	fe 4f       	sbci	r31, 0xFE	; 254
    318c:	80 81       	ld	r24, Z
    318e:	89 8b       	std	Y+17, r24	; 0x11
					DIO_voidSetPinValue(KPD_PORT,row,DIO_u8HIGH);
    3190:	83 e0       	ldi	r24, 0x03	; 3
    3192:	68 89       	ldd	r22, Y+16	; 0x10
    3194:	41 e0       	ldi	r20, 0x01	; 1
    3196:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
u8 KPD_GetPressedKey(void){
	u8 Key = 0;
	u8 row,col;
	for (row = 0; row < 4; row++){
		DIO_voidSetPinValue(KPD_PORT, row, DIO_u8LOW);
		for(col = 4; col < 8; col++){
    319a:	8f 85       	ldd	r24, Y+15	; 0x0f
    319c:	8f 5f       	subi	r24, 0xFF	; 255
    319e:	8f 87       	std	Y+15, r24	; 0x0f
    31a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a2:	88 30       	cpi	r24, 0x08	; 8
    31a4:	08 f4       	brcc	.+2      	; 0x31a8 <KPD_GetPressedKey+0x176>
    31a6:	5a cf       	rjmp	.-332    	; 0x305c <KPD_GetPressedKey+0x2a>
					Key = KPD_Arr[row][col-4];
					DIO_voidSetPinValue(KPD_PORT,row,DIO_u8HIGH);
				}
			}
		}
		DIO_voidSetPinValue(KPD_PORT,row,DIO_u8HIGH);
    31a8:	83 e0       	ldi	r24, 0x03	; 3
    31aa:	68 89       	ldd	r22, Y+16	; 0x10
    31ac:	41 e0       	ldi	r20, 0x01	; 1
    31ae:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
}

u8 KPD_GetPressedKey(void){
	u8 Key = 0;
	u8 row,col;
	for (row = 0; row < 4; row++){
    31b2:	88 89       	ldd	r24, Y+16	; 0x10
    31b4:	8f 5f       	subi	r24, 0xFF	; 255
    31b6:	88 8b       	std	Y+16, r24	; 0x10
    31b8:	88 89       	ldd	r24, Y+16	; 0x10
    31ba:	84 30       	cpi	r24, 0x04	; 4
    31bc:	08 f4       	brcc	.+2      	; 0x31c0 <KPD_GetPressedKey+0x18e>
    31be:	46 cf       	rjmp	.-372    	; 0x304c <KPD_GetPressedKey+0x1a>
			}
		}
		DIO_voidSetPinValue(KPD_PORT,row,DIO_u8HIGH);
	}
	//not pressed
	return Key;
    31c0:	89 89       	ldd	r24, Y+17	; 0x11
}
    31c2:	61 96       	adiw	r28, 0x11	; 17
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <CLCD_init>:
 */

#include "util/delay.h"
#include "../04-CLCD/CLCD_Interface.h"

void CLCD_init(void){
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	6c 97       	sbiw	r28, 0x1c	; 28
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
	/* data port output */
	DIO_voidSetPortDirection(CLCD_Data_Port, 255);
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	6f ef       	ldi	r22, 0xFF	; 255
    31ec:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <DIO_voidSetPortDirection>
	/* RS output */
	DIO_voidSetPinDirection(CLCD_Control_Port, CLCD_RS_PIN, DIO_u8OUTPUT);
    31f0:	82 e0       	ldi	r24, 0x02	; 2
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	41 e0       	ldi	r20, 0x01	; 1
    31f6:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
	/* RW output */
	DIO_voidSetPinDirection(CLCD_Control_Port, CLCD_RW_PIN, DIO_u8OUTPUT);
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	61 e0       	ldi	r22, 0x01	; 1
    31fe:	41 e0       	ldi	r20, 0x01	; 1
    3200:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
	/* EN output */
	DIO_voidSetPinDirection(CLCD_Control_Port, CLCD_EN_PIN, DIO_u8OUTPUT);
    3204:	82 e0       	ldi	r24, 0x02	; 2
    3206:	62 e0       	ldi	r22, 0x02	; 2
    3208:	41 e0       	ldi	r20, 0x01	; 1
    320a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	a8 e4       	ldi	r26, 0x48	; 72
    3214:	b2 e4       	ldi	r27, 0x42	; 66
    3216:	89 8f       	std	Y+25, r24	; 0x19
    3218:	9a 8f       	std	Y+26, r25	; 0x1a
    321a:	ab 8f       	std	Y+27, r26	; 0x1b
    321c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321e:	69 8d       	ldd	r22, Y+25	; 0x19
    3220:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3222:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3224:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	4a ef       	ldi	r20, 0xFA	; 250
    322c:	54 e4       	ldi	r21, 0x44	; 68
    322e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	8d 8b       	std	Y+21, r24	; 0x15
    3238:	9e 8b       	std	Y+22, r25	; 0x16
    323a:	af 8b       	std	Y+23, r26	; 0x17
    323c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    323e:	6d 89       	ldd	r22, Y+21	; 0x15
    3240:	7e 89       	ldd	r23, Y+22	; 0x16
    3242:	8f 89       	ldd	r24, Y+23	; 0x17
    3244:	98 8d       	ldd	r25, Y+24	; 0x18
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e8       	ldi	r20, 0x80	; 128
    324c:	5f e3       	ldi	r21, 0x3F	; 63
    324e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    3252:	88 23       	and	r24, r24
    3254:	2c f4       	brge	.+10     	; 0x3260 <CLCD_init+0x8c>
		__ticks = 1;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	9c 8b       	std	Y+20, r25	; 0x14
    325c:	8b 8b       	std	Y+19, r24	; 0x13
    325e:	3f c0       	rjmp	.+126    	; 0x32de <CLCD_init+0x10a>
	else if (__tmp > 65535)
    3260:	6d 89       	ldd	r22, Y+21	; 0x15
    3262:	7e 89       	ldd	r23, Y+22	; 0x16
    3264:	8f 89       	ldd	r24, Y+23	; 0x17
    3266:	98 8d       	ldd	r25, Y+24	; 0x18
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	3f ef       	ldi	r19, 0xFF	; 255
    326c:	4f e7       	ldi	r20, 0x7F	; 127
    326e:	57 e4       	ldi	r21, 0x47	; 71
    3270:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    3274:	18 16       	cp	r1, r24
    3276:	4c f5       	brge	.+82     	; 0x32ca <CLCD_init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3278:	69 8d       	ldd	r22, Y+25	; 0x19
    327a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    327c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    327e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	40 e2       	ldi	r20, 0x20	; 32
    3286:	51 e4       	ldi	r21, 0x41	; 65
    3288:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	bc 01       	movw	r22, r24
    3292:	cd 01       	movw	r24, r26
    3294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	9c 8b       	std	Y+20, r25	; 0x14
    329e:	8b 8b       	std	Y+19, r24	; 0x13
    32a0:	0f c0       	rjmp	.+30     	; 0x32c0 <CLCD_init+0xec>
    32a2:	88 ec       	ldi	r24, 0xC8	; 200
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	9a 8b       	std	Y+18, r25	; 0x12
    32a8:	89 8b       	std	Y+17, r24	; 0x11
    32aa:	89 89       	ldd	r24, Y+17	; 0x11
    32ac:	9a 89       	ldd	r25, Y+18	; 0x12
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <CLCD_init+0xda>
    32b2:	9a 8b       	std	Y+18, r25	; 0x12
    32b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b6:	8b 89       	ldd	r24, Y+19	; 0x13
    32b8:	9c 89       	ldd	r25, Y+20	; 0x14
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	9c 8b       	std	Y+20, r25	; 0x14
    32be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c0:	8b 89       	ldd	r24, Y+19	; 0x13
    32c2:	9c 89       	ldd	r25, Y+20	; 0x14
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	69 f7       	brne	.-38     	; 0x32a2 <CLCD_init+0xce>
    32c8:	14 c0       	rjmp	.+40     	; 0x32f2 <CLCD_init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ca:	6d 89       	ldd	r22, Y+21	; 0x15
    32cc:	7e 89       	ldd	r23, Y+22	; 0x16
    32ce:	8f 89       	ldd	r24, Y+23	; 0x17
    32d0:	98 8d       	ldd	r25, Y+24	; 0x18
    32d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	9c 8b       	std	Y+20, r25	; 0x14
    32dc:	8b 8b       	std	Y+19, r24	; 0x13
    32de:	8b 89       	ldd	r24, Y+19	; 0x13
    32e0:	9c 89       	ldd	r25, Y+20	; 0x14
    32e2:	98 8b       	std	Y+16, r25	; 0x10
    32e4:	8f 87       	std	Y+15, r24	; 0x0f
    32e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e8:	98 89       	ldd	r25, Y+16	; 0x10
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <CLCD_init+0x116>
    32ee:	98 8b       	std	Y+16, r25	; 0x10
    32f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	CLCD_WriteInes(0x38); //0b00111000 //FUNCTION_SET
    32f2:	88 e3       	ldi	r24, 0x38	; 56
    32f4:	0e 94 00 1a 	call	0x3400	; 0x3400 <CLCD_WriteInes>
	CLCD_WriteInes(0x0C); //0b00001111 //DISPLAY_ON
    32f8:	8c e0       	ldi	r24, 0x0C	; 12
    32fa:	0e 94 00 1a 	call	0x3400	; 0x3400 <CLCD_WriteInes>
	CLCD_WriteInes(0x01); //0b00000001 //DISPLAY_CLEAR
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	0e 94 00 1a 	call	0x3400	; 0x3400 <CLCD_WriteInes>
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	a0 e8       	ldi	r26, 0x80	; 128
    330a:	bf e3       	ldi	r27, 0x3F	; 63
    330c:	8b 87       	std	Y+11, r24	; 0x0b
    330e:	9c 87       	std	Y+12, r25	; 0x0c
    3310:	ad 87       	std	Y+13, r26	; 0x0d
    3312:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3314:	6b 85       	ldd	r22, Y+11	; 0x0b
    3316:	7c 85       	ldd	r23, Y+12	; 0x0c
    3318:	8d 85       	ldd	r24, Y+13	; 0x0d
    331a:	9e 85       	ldd	r25, Y+14	; 0x0e
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	4a ef       	ldi	r20, 0xFA	; 250
    3322:	54 e4       	ldi	r21, 0x44	; 68
    3324:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	8f 83       	std	Y+7, r24	; 0x07
    332e:	98 87       	std	Y+8, r25	; 0x08
    3330:	a9 87       	std	Y+9, r26	; 0x09
    3332:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3334:	6f 81       	ldd	r22, Y+7	; 0x07
    3336:	78 85       	ldd	r23, Y+8	; 0x08
    3338:	89 85       	ldd	r24, Y+9	; 0x09
    333a:	9a 85       	ldd	r25, Y+10	; 0x0a
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e8       	ldi	r20, 0x80	; 128
    3342:	5f e3       	ldi	r21, 0x3F	; 63
    3344:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    3348:	88 23       	and	r24, r24
    334a:	2c f4       	brge	.+10     	; 0x3356 <CLCD_init+0x182>
		__ticks = 1;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	9e 83       	std	Y+6, r25	; 0x06
    3352:	8d 83       	std	Y+5, r24	; 0x05
    3354:	3f c0       	rjmp	.+126    	; 0x33d4 <CLCD_init+0x200>
	else if (__tmp > 65535)
    3356:	6f 81       	ldd	r22, Y+7	; 0x07
    3358:	78 85       	ldd	r23, Y+8	; 0x08
    335a:	89 85       	ldd	r24, Y+9	; 0x09
    335c:	9a 85       	ldd	r25, Y+10	; 0x0a
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	3f ef       	ldi	r19, 0xFF	; 255
    3362:	4f e7       	ldi	r20, 0x7F	; 127
    3364:	57 e4       	ldi	r21, 0x47	; 71
    3366:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    336a:	18 16       	cp	r1, r24
    336c:	4c f5       	brge	.+82     	; 0x33c0 <CLCD_init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3370:	7c 85       	ldd	r23, Y+12	; 0x0c
    3372:	8d 85       	ldd	r24, Y+13	; 0x0d
    3374:	9e 85       	ldd	r25, Y+14	; 0x0e
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	40 e2       	ldi	r20, 0x20	; 32
    337c:	51 e4       	ldi	r21, 0x41	; 65
    337e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	bc 01       	movw	r22, r24
    3388:	cd 01       	movw	r24, r26
    338a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	9e 83       	std	Y+6, r25	; 0x06
    3394:	8d 83       	std	Y+5, r24	; 0x05
    3396:	0f c0       	rjmp	.+30     	; 0x33b6 <CLCD_init+0x1e2>
    3398:	88 ec       	ldi	r24, 0xC8	; 200
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	9c 83       	std	Y+4, r25	; 0x04
    339e:	8b 83       	std	Y+3, r24	; 0x03
    33a0:	8b 81       	ldd	r24, Y+3	; 0x03
    33a2:	9c 81       	ldd	r25, Y+4	; 0x04
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <CLCD_init+0x1d0>
    33a8:	9c 83       	std	Y+4, r25	; 0x04
    33aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ac:	8d 81       	ldd	r24, Y+5	; 0x05
    33ae:	9e 81       	ldd	r25, Y+6	; 0x06
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	9e 83       	std	Y+6, r25	; 0x06
    33b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b6:	8d 81       	ldd	r24, Y+5	; 0x05
    33b8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ba:	00 97       	sbiw	r24, 0x00	; 0
    33bc:	69 f7       	brne	.-38     	; 0x3398 <CLCD_init+0x1c4>
    33be:	14 c0       	rjmp	.+40     	; 0x33e8 <CLCD_init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c0:	6f 81       	ldd	r22, Y+7	; 0x07
    33c2:	78 85       	ldd	r23, Y+8	; 0x08
    33c4:	89 85       	ldd	r24, Y+9	; 0x09
    33c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	9e 83       	std	Y+6, r25	; 0x06
    33d2:	8d 83       	std	Y+5, r24	; 0x05
    33d4:	8d 81       	ldd	r24, Y+5	; 0x05
    33d6:	9e 81       	ldd	r25, Y+6	; 0x06
    33d8:	9a 83       	std	Y+2, r25	; 0x02
    33da:	89 83       	std	Y+1, r24	; 0x01
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	9a 81       	ldd	r25, Y+2	; 0x02
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	f1 f7       	brne	.-4      	; 0x33e0 <CLCD_init+0x20c>
    33e4:	9a 83       	std	Y+2, r25	; 0x02
    33e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLCD_WriteInes(0x06); //0b00000110 //ENTRY_MODE_SET
    33e8:	86 e0       	ldi	r24, 0x06	; 6
    33ea:	0e 94 00 1a 	call	0x3400	; 0x3400 <CLCD_WriteInes>
}
    33ee:	6c 96       	adiw	r28, 0x1c	; 28
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	f8 94       	cli
    33f4:	de bf       	out	0x3e, r29	; 62
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	cd bf       	out	0x3d, r28	; 61
    33fa:	cf 91       	pop	r28
    33fc:	df 91       	pop	r29
    33fe:	08 95       	ret

00003400 <CLCD_WriteInes>:

void CLCD_WriteInes(u8 A_u8Command){
    3400:	df 93       	push	r29
    3402:	cf 93       	push	r28
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62
    3408:	6d 97       	sbiw	r28, 0x1d	; 29
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
    3414:	8d 8f       	std	Y+29, r24	; 0x1d
	/* RS = 0 (Command mode) */
	DIO_voidSetPinValue(CLCD_Control_Port, CLCD_RS_PIN, DIO_u8LOW); //send commend
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	60 e0       	ldi	r22, 0x00	; 0
    341a:	40 e0       	ldi	r20, 0x00	; 0
    341c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	/* RW = 0 (Write mode) */
	DIO_voidSetPinValue(CLCD_Control_Port, CLCD_RW_PIN, DIO_u8LOW);
    3420:	82 e0       	ldi	r24, 0x02	; 2
    3422:	61 e0       	ldi	r22, 0x01	; 1
    3424:	40 e0       	ldi	r20, 0x00	; 0
    3426:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	/* send command through the port */
	DIO_voidSetPortValue(CLCD_Data_Port, A_u8Command); //function set
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    342e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <DIO_voidSetPortValue>
	/* Enable sequence */
	DIO_voidSetPinValue(CLCD_Control_Port, CLCD_EN_PIN, DIO_u8HIGH);
    3432:	82 e0       	ldi	r24, 0x02	; 2
    3434:	62 e0       	ldi	r22, 0x02	; 2
    3436:	41 e0       	ldi	r20, 0x01	; 1
    3438:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	a0 e8       	ldi	r26, 0x80	; 128
    3442:	bf e3       	ldi	r27, 0x3F	; 63
    3444:	89 8f       	std	Y+25, r24	; 0x19
    3446:	9a 8f       	std	Y+26, r25	; 0x1a
    3448:	ab 8f       	std	Y+27, r26	; 0x1b
    344a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344c:	69 8d       	ldd	r22, Y+25	; 0x19
    344e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3450:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3452:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	4a ef       	ldi	r20, 0xFA	; 250
    345a:	54 e4       	ldi	r21, 0x44	; 68
    345c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	8d 8b       	std	Y+21, r24	; 0x15
    3466:	9e 8b       	std	Y+22, r25	; 0x16
    3468:	af 8b       	std	Y+23, r26	; 0x17
    346a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    346c:	6d 89       	ldd	r22, Y+21	; 0x15
    346e:	7e 89       	ldd	r23, Y+22	; 0x16
    3470:	8f 89       	ldd	r24, Y+23	; 0x17
    3472:	98 8d       	ldd	r25, Y+24	; 0x18
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	40 e8       	ldi	r20, 0x80	; 128
    347a:	5f e3       	ldi	r21, 0x3F	; 63
    347c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    3480:	88 23       	and	r24, r24
    3482:	2c f4       	brge	.+10     	; 0x348e <CLCD_WriteInes+0x8e>
		__ticks = 1;
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	9c 8b       	std	Y+20, r25	; 0x14
    348a:	8b 8b       	std	Y+19, r24	; 0x13
    348c:	3f c0       	rjmp	.+126    	; 0x350c <CLCD_WriteInes+0x10c>
	else if (__tmp > 65535)
    348e:	6d 89       	ldd	r22, Y+21	; 0x15
    3490:	7e 89       	ldd	r23, Y+22	; 0x16
    3492:	8f 89       	ldd	r24, Y+23	; 0x17
    3494:	98 8d       	ldd	r25, Y+24	; 0x18
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	3f ef       	ldi	r19, 0xFF	; 255
    349a:	4f e7       	ldi	r20, 0x7F	; 127
    349c:	57 e4       	ldi	r21, 0x47	; 71
    349e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    34a2:	18 16       	cp	r1, r24
    34a4:	4c f5       	brge	.+82     	; 0x34f8 <CLCD_WriteInes+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a6:	69 8d       	ldd	r22, Y+25	; 0x19
    34a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e2       	ldi	r20, 0x20	; 32
    34b4:	51 e4       	ldi	r21, 0x41	; 65
    34b6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	bc 01       	movw	r22, r24
    34c0:	cd 01       	movw	r24, r26
    34c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	9c 8b       	std	Y+20, r25	; 0x14
    34cc:	8b 8b       	std	Y+19, r24	; 0x13
    34ce:	0f c0       	rjmp	.+30     	; 0x34ee <CLCD_WriteInes+0xee>
    34d0:	88 ec       	ldi	r24, 0xC8	; 200
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	9a 8b       	std	Y+18, r25	; 0x12
    34d6:	89 8b       	std	Y+17, r24	; 0x11
    34d8:	89 89       	ldd	r24, Y+17	; 0x11
    34da:	9a 89       	ldd	r25, Y+18	; 0x12
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <CLCD_WriteInes+0xdc>
    34e0:	9a 8b       	std	Y+18, r25	; 0x12
    34e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e4:	8b 89       	ldd	r24, Y+19	; 0x13
    34e6:	9c 89       	ldd	r25, Y+20	; 0x14
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	9c 8b       	std	Y+20, r25	; 0x14
    34ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ee:	8b 89       	ldd	r24, Y+19	; 0x13
    34f0:	9c 89       	ldd	r25, Y+20	; 0x14
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	69 f7       	brne	.-38     	; 0x34d0 <CLCD_WriteInes+0xd0>
    34f6:	14 c0       	rjmp	.+40     	; 0x3520 <CLCD_WriteInes+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f8:	6d 89       	ldd	r22, Y+21	; 0x15
    34fa:	7e 89       	ldd	r23, Y+22	; 0x16
    34fc:	8f 89       	ldd	r24, Y+23	; 0x17
    34fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	9c 8b       	std	Y+20, r25	; 0x14
    350a:	8b 8b       	std	Y+19, r24	; 0x13
    350c:	8b 89       	ldd	r24, Y+19	; 0x13
    350e:	9c 89       	ldd	r25, Y+20	; 0x14
    3510:	98 8b       	std	Y+16, r25	; 0x10
    3512:	8f 87       	std	Y+15, r24	; 0x0f
    3514:	8f 85       	ldd	r24, Y+15	; 0x0f
    3516:	98 89       	ldd	r25, Y+16	; 0x10
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <CLCD_WriteInes+0x118>
    351c:	98 8b       	std	Y+16, r25	; 0x10
    351e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_Control_Port,CLCD_EN_PIN, DIO_u8LOW);
    3520:	82 e0       	ldi	r24, 0x02	; 2
    3522:	62 e0       	ldi	r22, 0x02	; 2
    3524:	40 e0       	ldi	r20, 0x00	; 0
    3526:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	a0 e8       	ldi	r26, 0x80	; 128
    3530:	bf e3       	ldi	r27, 0x3F	; 63
    3532:	8b 87       	std	Y+11, r24	; 0x0b
    3534:	9c 87       	std	Y+12, r25	; 0x0c
    3536:	ad 87       	std	Y+13, r26	; 0x0d
    3538:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353a:	6b 85       	ldd	r22, Y+11	; 0x0b
    353c:	7c 85       	ldd	r23, Y+12	; 0x0c
    353e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3540:	9e 85       	ldd	r25, Y+14	; 0x0e
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	4a ef       	ldi	r20, 0xFA	; 250
    3548:	54 e4       	ldi	r21, 0x44	; 68
    354a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	8f 83       	std	Y+7, r24	; 0x07
    3554:	98 87       	std	Y+8, r25	; 0x08
    3556:	a9 87       	std	Y+9, r26	; 0x09
    3558:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    355a:	6f 81       	ldd	r22, Y+7	; 0x07
    355c:	78 85       	ldd	r23, Y+8	; 0x08
    355e:	89 85       	ldd	r24, Y+9	; 0x09
    3560:	9a 85       	ldd	r25, Y+10	; 0x0a
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e8       	ldi	r20, 0x80	; 128
    3568:	5f e3       	ldi	r21, 0x3F	; 63
    356a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    356e:	88 23       	and	r24, r24
    3570:	2c f4       	brge	.+10     	; 0x357c <CLCD_WriteInes+0x17c>
		__ticks = 1;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9e 83       	std	Y+6, r25	; 0x06
    3578:	8d 83       	std	Y+5, r24	; 0x05
    357a:	3f c0       	rjmp	.+126    	; 0x35fa <CLCD_WriteInes+0x1fa>
	else if (__tmp > 65535)
    357c:	6f 81       	ldd	r22, Y+7	; 0x07
    357e:	78 85       	ldd	r23, Y+8	; 0x08
    3580:	89 85       	ldd	r24, Y+9	; 0x09
    3582:	9a 85       	ldd	r25, Y+10	; 0x0a
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	3f ef       	ldi	r19, 0xFF	; 255
    3588:	4f e7       	ldi	r20, 0x7F	; 127
    358a:	57 e4       	ldi	r21, 0x47	; 71
    358c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    3590:	18 16       	cp	r1, r24
    3592:	4c f5       	brge	.+82     	; 0x35e6 <CLCD_WriteInes+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3594:	6b 85       	ldd	r22, Y+11	; 0x0b
    3596:	7c 85       	ldd	r23, Y+12	; 0x0c
    3598:	8d 85       	ldd	r24, Y+13	; 0x0d
    359a:	9e 85       	ldd	r25, Y+14	; 0x0e
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e2       	ldi	r20, 0x20	; 32
    35a2:	51 e4       	ldi	r21, 0x41	; 65
    35a4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9e 83       	std	Y+6, r25	; 0x06
    35ba:	8d 83       	std	Y+5, r24	; 0x05
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <CLCD_WriteInes+0x1dc>
    35be:	88 ec       	ldi	r24, 0xC8	; 200
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	9c 83       	std	Y+4, r25	; 0x04
    35c4:	8b 83       	std	Y+3, r24	; 0x03
    35c6:	8b 81       	ldd	r24, Y+3	; 0x03
    35c8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <CLCD_WriteInes+0x1ca>
    35ce:	9c 83       	std	Y+4, r25	; 0x04
    35d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d2:	8d 81       	ldd	r24, Y+5	; 0x05
    35d4:	9e 81       	ldd	r25, Y+6	; 0x06
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	9e 83       	std	Y+6, r25	; 0x06
    35da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35dc:	8d 81       	ldd	r24, Y+5	; 0x05
    35de:	9e 81       	ldd	r25, Y+6	; 0x06
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	69 f7       	brne	.-38     	; 0x35be <CLCD_WriteInes+0x1be>
    35e4:	14 c0       	rjmp	.+40     	; 0x360e <CLCD_WriteInes+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e6:	6f 81       	ldd	r22, Y+7	; 0x07
    35e8:	78 85       	ldd	r23, Y+8	; 0x08
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	9e 83       	std	Y+6, r25	; 0x06
    35f8:	8d 83       	std	Y+5, r24	; 0x05
    35fa:	8d 81       	ldd	r24, Y+5	; 0x05
    35fc:	9e 81       	ldd	r25, Y+6	; 0x06
    35fe:	9a 83       	std	Y+2, r25	; 0x02
    3600:	89 83       	std	Y+1, r24	; 0x01
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	9a 81       	ldd	r25, Y+2	; 0x02
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <CLCD_WriteInes+0x206>
    360a:	9a 83       	std	Y+2, r25	; 0x02
    360c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    360e:	6d 96       	adiw	r28, 0x1d	; 29
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61
    361a:	cf 91       	pop	r28
    361c:	df 91       	pop	r29
    361e:	08 95       	ret

00003620 <CLCD_WriteData>:

void CLCD_WriteData(u8 Data){
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
    3628:	6d 97       	sbiw	r28, 0x1d	; 29
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	de bf       	out	0x3e, r29	; 62
    3630:	0f be       	out	0x3f, r0	; 63
    3632:	cd bf       	out	0x3d, r28	; 61
    3634:	8d 8f       	std	Y+29, r24	; 0x1d
	/* RS = 1 (Command mode) */
	DIO_voidSetPinValue(CLCD_Control_Port, CLCD_RS_PIN, DIO_u8HIGH); //send commend
    3636:	82 e0       	ldi	r24, 0x02	; 2
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	41 e0       	ldi	r20, 0x01	; 1
    363c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	/* RW = 0 (Write mode) */
	DIO_voidSetPinValue(CLCD_Control_Port, CLCD_RW_PIN, DIO_u8LOW);
    3640:	82 e0       	ldi	r24, 0x02	; 2
    3642:	61 e0       	ldi	r22, 0x01	; 1
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
	/* send command through the port */
	DIO_voidSetPortValue(CLCD_Data_Port, Data); //function set
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    364e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <DIO_voidSetPortValue>
	/* Enable sequence */
	DIO_voidSetPinValue(CLCD_Control_Port, CLCD_EN_PIN, DIO_u8HIGH);
    3652:	82 e0       	ldi	r24, 0x02	; 2
    3654:	62 e0       	ldi	r22, 0x02	; 2
    3656:	41 e0       	ldi	r20, 0x01	; 1
    3658:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	a0 e8       	ldi	r26, 0x80	; 128
    3662:	bf e3       	ldi	r27, 0x3F	; 63
    3664:	89 8f       	std	Y+25, r24	; 0x19
    3666:	9a 8f       	std	Y+26, r25	; 0x1a
    3668:	ab 8f       	std	Y+27, r26	; 0x1b
    366a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366c:	69 8d       	ldd	r22, Y+25	; 0x19
    366e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3672:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	4a ef       	ldi	r20, 0xFA	; 250
    367a:	54 e4       	ldi	r21, 0x44	; 68
    367c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	8d 8b       	std	Y+21, r24	; 0x15
    3686:	9e 8b       	std	Y+22, r25	; 0x16
    3688:	af 8b       	std	Y+23, r26	; 0x17
    368a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    368c:	6d 89       	ldd	r22, Y+21	; 0x15
    368e:	7e 89       	ldd	r23, Y+22	; 0x16
    3690:	8f 89       	ldd	r24, Y+23	; 0x17
    3692:	98 8d       	ldd	r25, Y+24	; 0x18
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	40 e8       	ldi	r20, 0x80	; 128
    369a:	5f e3       	ldi	r21, 0x3F	; 63
    369c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    36a0:	88 23       	and	r24, r24
    36a2:	2c f4       	brge	.+10     	; 0x36ae <CLCD_WriteData+0x8e>
		__ticks = 1;
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	9c 8b       	std	Y+20, r25	; 0x14
    36aa:	8b 8b       	std	Y+19, r24	; 0x13
    36ac:	3f c0       	rjmp	.+126    	; 0x372c <CLCD_WriteData+0x10c>
	else if (__tmp > 65535)
    36ae:	6d 89       	ldd	r22, Y+21	; 0x15
    36b0:	7e 89       	ldd	r23, Y+22	; 0x16
    36b2:	8f 89       	ldd	r24, Y+23	; 0x17
    36b4:	98 8d       	ldd	r25, Y+24	; 0x18
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	3f ef       	ldi	r19, 0xFF	; 255
    36ba:	4f e7       	ldi	r20, 0x7F	; 127
    36bc:	57 e4       	ldi	r21, 0x47	; 71
    36be:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    36c2:	18 16       	cp	r1, r24
    36c4:	4c f5       	brge	.+82     	; 0x3718 <CLCD_WriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c6:	69 8d       	ldd	r22, Y+25	; 0x19
    36c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e2       	ldi	r20, 0x20	; 32
    36d4:	51 e4       	ldi	r21, 0x41	; 65
    36d6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	bc 01       	movw	r22, r24
    36e0:	cd 01       	movw	r24, r26
    36e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	9c 8b       	std	Y+20, r25	; 0x14
    36ec:	8b 8b       	std	Y+19, r24	; 0x13
    36ee:	0f c0       	rjmp	.+30     	; 0x370e <CLCD_WriteData+0xee>
    36f0:	88 ec       	ldi	r24, 0xC8	; 200
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	9a 8b       	std	Y+18, r25	; 0x12
    36f6:	89 8b       	std	Y+17, r24	; 0x11
    36f8:	89 89       	ldd	r24, Y+17	; 0x11
    36fa:	9a 89       	ldd	r25, Y+18	; 0x12
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	f1 f7       	brne	.-4      	; 0x36fc <CLCD_WriteData+0xdc>
    3700:	9a 8b       	std	Y+18, r25	; 0x12
    3702:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3704:	8b 89       	ldd	r24, Y+19	; 0x13
    3706:	9c 89       	ldd	r25, Y+20	; 0x14
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	9c 8b       	std	Y+20, r25	; 0x14
    370c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370e:	8b 89       	ldd	r24, Y+19	; 0x13
    3710:	9c 89       	ldd	r25, Y+20	; 0x14
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	69 f7       	brne	.-38     	; 0x36f0 <CLCD_WriteData+0xd0>
    3716:	14 c0       	rjmp	.+40     	; 0x3740 <CLCD_WriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3718:	6d 89       	ldd	r22, Y+21	; 0x15
    371a:	7e 89       	ldd	r23, Y+22	; 0x16
    371c:	8f 89       	ldd	r24, Y+23	; 0x17
    371e:	98 8d       	ldd	r25, Y+24	; 0x18
    3720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	9c 8b       	std	Y+20, r25	; 0x14
    372a:	8b 8b       	std	Y+19, r24	; 0x13
    372c:	8b 89       	ldd	r24, Y+19	; 0x13
    372e:	9c 89       	ldd	r25, Y+20	; 0x14
    3730:	98 8b       	std	Y+16, r25	; 0x10
    3732:	8f 87       	std	Y+15, r24	; 0x0f
    3734:	8f 85       	ldd	r24, Y+15	; 0x0f
    3736:	98 89       	ldd	r25, Y+16	; 0x10
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	f1 f7       	brne	.-4      	; 0x3738 <CLCD_WriteData+0x118>
    373c:	98 8b       	std	Y+16, r25	; 0x10
    373e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_Control_Port,CLCD_EN_PIN, DIO_u8LOW);
    3740:	82 e0       	ldi	r24, 0x02	; 2
    3742:	62 e0       	ldi	r22, 0x02	; 2
    3744:	40 e0       	ldi	r20, 0x00	; 0
    3746:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	a0 e8       	ldi	r26, 0x80	; 128
    3750:	bf e3       	ldi	r27, 0x3F	; 63
    3752:	8b 87       	std	Y+11, r24	; 0x0b
    3754:	9c 87       	std	Y+12, r25	; 0x0c
    3756:	ad 87       	std	Y+13, r26	; 0x0d
    3758:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    375a:	6b 85       	ldd	r22, Y+11	; 0x0b
    375c:	7c 85       	ldd	r23, Y+12	; 0x0c
    375e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3760:	9e 85       	ldd	r25, Y+14	; 0x0e
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	4a ef       	ldi	r20, 0xFA	; 250
    3768:	54 e4       	ldi	r21, 0x44	; 68
    376a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	8f 83       	std	Y+7, r24	; 0x07
    3774:	98 87       	std	Y+8, r25	; 0x08
    3776:	a9 87       	std	Y+9, r26	; 0x09
    3778:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    377a:	6f 81       	ldd	r22, Y+7	; 0x07
    377c:	78 85       	ldd	r23, Y+8	; 0x08
    377e:	89 85       	ldd	r24, Y+9	; 0x09
    3780:	9a 85       	ldd	r25, Y+10	; 0x0a
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	40 e8       	ldi	r20, 0x80	; 128
    3788:	5f e3       	ldi	r21, 0x3F	; 63
    378a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    378e:	88 23       	and	r24, r24
    3790:	2c f4       	brge	.+10     	; 0x379c <CLCD_WriteData+0x17c>
		__ticks = 1;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	9e 83       	std	Y+6, r25	; 0x06
    3798:	8d 83       	std	Y+5, r24	; 0x05
    379a:	3f c0       	rjmp	.+126    	; 0x381a <CLCD_WriteData+0x1fa>
	else if (__tmp > 65535)
    379c:	6f 81       	ldd	r22, Y+7	; 0x07
    379e:	78 85       	ldd	r23, Y+8	; 0x08
    37a0:	89 85       	ldd	r24, Y+9	; 0x09
    37a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	3f ef       	ldi	r19, 0xFF	; 255
    37a8:	4f e7       	ldi	r20, 0x7F	; 127
    37aa:	57 e4       	ldi	r21, 0x47	; 71
    37ac:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    37b0:	18 16       	cp	r1, r24
    37b2:	4c f5       	brge	.+82     	; 0x3806 <CLCD_WriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e2       	ldi	r20, 0x20	; 32
    37c2:	51 e4       	ldi	r21, 0x41	; 65
    37c4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	bc 01       	movw	r22, r24
    37ce:	cd 01       	movw	r24, r26
    37d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	9e 83       	std	Y+6, r25	; 0x06
    37da:	8d 83       	std	Y+5, r24	; 0x05
    37dc:	0f c0       	rjmp	.+30     	; 0x37fc <CLCD_WriteData+0x1dc>
    37de:	88 ec       	ldi	r24, 0xC8	; 200
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	9c 83       	std	Y+4, r25	; 0x04
    37e4:	8b 83       	std	Y+3, r24	; 0x03
    37e6:	8b 81       	ldd	r24, Y+3	; 0x03
    37e8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ea:	01 97       	sbiw	r24, 0x01	; 1
    37ec:	f1 f7       	brne	.-4      	; 0x37ea <CLCD_WriteData+0x1ca>
    37ee:	9c 83       	std	Y+4, r25	; 0x04
    37f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f2:	8d 81       	ldd	r24, Y+5	; 0x05
    37f4:	9e 81       	ldd	r25, Y+6	; 0x06
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	9e 83       	std	Y+6, r25	; 0x06
    37fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fc:	8d 81       	ldd	r24, Y+5	; 0x05
    37fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3800:	00 97       	sbiw	r24, 0x00	; 0
    3802:	69 f7       	brne	.-38     	; 0x37de <CLCD_WriteData+0x1be>
    3804:	14 c0       	rjmp	.+40     	; 0x382e <CLCD_WriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3806:	6f 81       	ldd	r22, Y+7	; 0x07
    3808:	78 85       	ldd	r23, Y+8	; 0x08
    380a:	89 85       	ldd	r24, Y+9	; 0x09
    380c:	9a 85       	ldd	r25, Y+10	; 0x0a
    380e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	9e 83       	std	Y+6, r25	; 0x06
    3818:	8d 83       	std	Y+5, r24	; 0x05
    381a:	8d 81       	ldd	r24, Y+5	; 0x05
    381c:	9e 81       	ldd	r25, Y+6	; 0x06
    381e:	9a 83       	std	Y+2, r25	; 0x02
    3820:	89 83       	std	Y+1, r24	; 0x01
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	9a 81       	ldd	r25, Y+2	; 0x02
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	f1 f7       	brne	.-4      	; 0x3826 <CLCD_WriteData+0x206>
    382a:	9a 83       	std	Y+2, r25	; 0x02
    382c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    382e:	6d 96       	adiw	r28, 0x1d	; 29
    3830:	0f b6       	in	r0, 0x3f	; 63
    3832:	f8 94       	cli
    3834:	de bf       	out	0x3e, r29	; 62
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	cd bf       	out	0x3d, r28	; 61
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	08 95       	ret

00003840 <CLCD_WriteChar>:

void CLCD_WriteChar(u8 Char){
    3840:	df 93       	push	r29
    3842:	cf 93       	push	r28
    3844:	0f 92       	push	r0
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	89 83       	std	Y+1, r24	; 0x01
	CLCD_WriteData(Char);
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
}
    3852:	0f 90       	pop	r0
    3854:	cf 91       	pop	r28
    3856:	df 91       	pop	r29
    3858:	08 95       	ret

0000385a <CLCD_WriteString>:

void CLCD_WriteString(u8 * String){
    385a:	df 93       	push	r29
    385c:	cf 93       	push	r28
    385e:	00 d0       	rcall	.+0      	; 0x3860 <CLCD_WriteString+0x6>
    3860:	cd b7       	in	r28, 0x3d	; 61
    3862:	de b7       	in	r29, 0x3e	; 62
    3864:	9a 83       	std	Y+2, r25	; 0x02
    3866:	89 83       	std	Y+1, r24	; 0x01
    3868:	0a c0       	rjmp	.+20     	; 0x387e <CLCD_WriteString+0x24>
	while (*String != '\0'){
		CLCD_WriteData(*String);
    386a:	e9 81       	ldd	r30, Y+1	; 0x01
    386c:	fa 81       	ldd	r31, Y+2	; 0x02
    386e:	80 81       	ld	r24, Z
    3870:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
		String++;
    3874:	89 81       	ldd	r24, Y+1	; 0x01
    3876:	9a 81       	ldd	r25, Y+2	; 0x02
    3878:	01 96       	adiw	r24, 0x01	; 1
    387a:	9a 83       	std	Y+2, r25	; 0x02
    387c:	89 83       	std	Y+1, r24	; 0x01
void CLCD_WriteChar(u8 Char){
	CLCD_WriteData(Char);
}

void CLCD_WriteString(u8 * String){
	while (*String != '\0'){
    387e:	e9 81       	ldd	r30, Y+1	; 0x01
    3880:	fa 81       	ldd	r31, Y+2	; 0x02
    3882:	80 81       	ld	r24, Z
    3884:	88 23       	and	r24, r24
    3886:	89 f7       	brne	.-30     	; 0x386a <CLCD_WriteString+0x10>
		CLCD_WriteData(*String);
		String++;
	}
}
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	08 95       	ret

00003892 <CLCD_GoTo>:

void CLCD_GoTo(u8 Row, u8 Col){
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	00 d0       	rcall	.+0      	; 0x3898 <CLCD_GoTo+0x6>
    3898:	00 d0       	rcall	.+0      	; 0x389a <CLCD_GoTo+0x8>
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	89 83       	std	Y+1, r24	; 0x01
    38a0:	6a 83       	std	Y+2, r22	; 0x02
	Col--;
    38a2:	8a 81       	ldd	r24, Y+2	; 0x02
    38a4:	81 50       	subi	r24, 0x01	; 1
    38a6:	8a 83       	std	Y+2, r24	; 0x02
	Row--;
    38a8:	89 81       	ldd	r24, Y+1	; 0x01
    38aa:	81 50       	subi	r24, 0x01	; 1
    38ac:	89 83       	std	Y+1, r24	; 0x01

	switch(Row)
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	28 2f       	mov	r18, r24
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	3c 83       	std	Y+4, r19	; 0x04
    38b6:	2b 83       	std	Y+3, r18	; 0x03
    38b8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ba:	9c 81       	ldd	r25, Y+4	; 0x04
    38bc:	00 97       	sbiw	r24, 0x00	; 0
    38be:	31 f0       	breq	.+12     	; 0x38cc <CLCD_GoTo+0x3a>
    38c0:	2b 81       	ldd	r18, Y+3	; 0x03
    38c2:	3c 81       	ldd	r19, Y+4	; 0x04
    38c4:	21 30       	cpi	r18, 0x01	; 1
    38c6:	31 05       	cpc	r19, r1
    38c8:	31 f0       	breq	.+12     	; 0x38d6 <CLCD_GoTo+0x44>
    38ca:	09 c0       	rjmp	.+18     	; 0x38de <CLCD_GoTo+0x4c>
	{
		case 0: CLCD_WriteInes(0x80+Col); break;
    38cc:	8a 81       	ldd	r24, Y+2	; 0x02
    38ce:	80 58       	subi	r24, 0x80	; 128
    38d0:	0e 94 00 1a 	call	0x3400	; 0x3400 <CLCD_WriteInes>
    38d4:	04 c0       	rjmp	.+8      	; 0x38de <CLCD_GoTo+0x4c>
		case 1: CLCD_WriteInes(0xC0+Col); break;
    38d6:	8a 81       	ldd	r24, Y+2	; 0x02
    38d8:	80 54       	subi	r24, 0x40	; 64
    38da:	0e 94 00 1a 	call	0x3400	; 0x3400 <CLCD_WriteInes>
	}
}
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	0f 90       	pop	r0
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	08 95       	ret

000038ec <CLCD_DisplayClear>:

void CLCD_DisplayClear(void){
    38ec:	df 93       	push	r29
    38ee:	cf 93       	push	r28
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
	CLCD_WriteInes(0x01);
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	0e 94 00 1a 	call	0x3400	; 0x3400 <CLCD_WriteInes>
}
    38fa:	cf 91       	pop	r28
    38fc:	df 91       	pop	r29
    38fe:	08 95       	ret

00003900 <ConvertNumToASCII>:

u8 ConvertNumToASCII(u8 Input){
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	0f 92       	push	r0
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
    390a:	89 83       	std	Y+1, r24	; 0x01
	return Input+0x30;
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	80 5d       	subi	r24, 0xD0	; 208
}
    3910:	0f 90       	pop	r0
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	08 95       	ret

00003918 <CLCD_ReverseNumber>:

s32 CLCD_ReverseNumber(s32 NUM){
    3918:	ef 92       	push	r14
    391a:	ff 92       	push	r15
    391c:	0f 93       	push	r16
    391e:	1f 93       	push	r17
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	28 97       	sbiw	r28, 0x08	; 8
    392a:	0f b6       	in	r0, 0x3f	; 63
    392c:	f8 94       	cli
    392e:	de bf       	out	0x3e, r29	; 62
    3930:	0f be       	out	0x3f, r0	; 63
    3932:	cd bf       	out	0x3d, r28	; 61
    3934:	6d 83       	std	Y+5, r22	; 0x05
    3936:	7e 83       	std	Y+6, r23	; 0x06
    3938:	8f 83       	std	Y+7, r24	; 0x07
    393a:	98 87       	std	Y+8, r25	; 0x08
	u32 reverse=1;
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	a0 e0       	ldi	r26, 0x00	; 0
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	89 83       	std	Y+1, r24	; 0x01
    3946:	9a 83       	std	Y+2, r25	; 0x02
    3948:	ab 83       	std	Y+3, r26	; 0x03
    394a:	bc 83       	std	Y+4, r27	; 0x04
    394c:	36 c0       	rjmp	.+108    	; 0x39ba <CLCD_ReverseNumber+0xa2>
	while(NUM!=0)
	{
		reverse=(reverse*10)+(NUM%10);
    394e:	89 81       	ldd	r24, Y+1	; 0x01
    3950:	9a 81       	ldd	r25, Y+2	; 0x02
    3952:	ab 81       	ldd	r26, Y+3	; 0x03
    3954:	bc 81       	ldd	r27, Y+4	; 0x04
    3956:	2a e0       	ldi	r18, 0x0A	; 10
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	50 e0       	ldi	r21, 0x00	; 0
    395e:	bc 01       	movw	r22, r24
    3960:	cd 01       	movw	r24, r26
    3962:	0e 94 9e 24 	call	0x493c	; 0x493c <__mulsi3>
    3966:	7b 01       	movw	r14, r22
    3968:	8c 01       	movw	r16, r24
    396a:	8d 81       	ldd	r24, Y+5	; 0x05
    396c:	9e 81       	ldd	r25, Y+6	; 0x06
    396e:	af 81       	ldd	r26, Y+7	; 0x07
    3970:	b8 85       	ldd	r27, Y+8	; 0x08
    3972:	2a e0       	ldi	r18, 0x0A	; 10
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e0       	ldi	r20, 0x00	; 0
    3978:	50 e0       	ldi	r21, 0x00	; 0
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	0e 94 c9 24 	call	0x4992	; 0x4992 <__divmodsi4>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	8e 0d       	add	r24, r14
    3988:	9f 1d       	adc	r25, r15
    398a:	a0 1f       	adc	r26, r16
    398c:	b1 1f       	adc	r27, r17
    398e:	89 83       	std	Y+1, r24	; 0x01
    3990:	9a 83       	std	Y+2, r25	; 0x02
    3992:	ab 83       	std	Y+3, r26	; 0x03
    3994:	bc 83       	std	Y+4, r27	; 0x04
		NUM/=10;
    3996:	8d 81       	ldd	r24, Y+5	; 0x05
    3998:	9e 81       	ldd	r25, Y+6	; 0x06
    399a:	af 81       	ldd	r26, Y+7	; 0x07
    399c:	b8 85       	ldd	r27, Y+8	; 0x08
    399e:	2a e0       	ldi	r18, 0x0A	; 10
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	50 e0       	ldi	r21, 0x00	; 0
    39a6:	bc 01       	movw	r22, r24
    39a8:	cd 01       	movw	r24, r26
    39aa:	0e 94 c9 24 	call	0x4992	; 0x4992 <__divmodsi4>
    39ae:	da 01       	movw	r26, r20
    39b0:	c9 01       	movw	r24, r18
    39b2:	8d 83       	std	Y+5, r24	; 0x05
    39b4:	9e 83       	std	Y+6, r25	; 0x06
    39b6:	af 83       	std	Y+7, r26	; 0x07
    39b8:	b8 87       	std	Y+8, r27	; 0x08
	return Input+0x30;
}

s32 CLCD_ReverseNumber(s32 NUM){
	u32 reverse=1;
	while(NUM!=0)
    39ba:	8d 81       	ldd	r24, Y+5	; 0x05
    39bc:	9e 81       	ldd	r25, Y+6	; 0x06
    39be:	af 81       	ldd	r26, Y+7	; 0x07
    39c0:	b8 85       	ldd	r27, Y+8	; 0x08
    39c2:	00 97       	sbiw	r24, 0x00	; 0
    39c4:	a1 05       	cpc	r26, r1
    39c6:	b1 05       	cpc	r27, r1
    39c8:	11 f6       	brne	.-124    	; 0x394e <CLCD_ReverseNumber+0x36>
	{
		reverse=(reverse*10)+(NUM%10);
		NUM/=10;
	}
	return reverse;
    39ca:	89 81       	ldd	r24, Y+1	; 0x01
    39cc:	9a 81       	ldd	r25, Y+2	; 0x02
    39ce:	ab 81       	ldd	r26, Y+3	; 0x03
    39d0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    39d2:	bc 01       	movw	r22, r24
    39d4:	cd 01       	movw	r24, r26
    39d6:	28 96       	adiw	r28, 0x08	; 8
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	cd bf       	out	0x3d, r28	; 61
    39e2:	cf 91       	pop	r28
    39e4:	df 91       	pop	r29
    39e6:	1f 91       	pop	r17
    39e8:	0f 91       	pop	r16
    39ea:	ff 90       	pop	r15
    39ec:	ef 90       	pop	r14
    39ee:	08 95       	ret

000039f0 <CLCD_WriteNum>:

void CLCD_WriteNum(u64 NUM) {
    39f0:	af 92       	push	r10
    39f2:	bf 92       	push	r11
    39f4:	cf 92       	push	r12
    39f6:	df 92       	push	r13
    39f8:	ef 92       	push	r14
    39fa:	ff 92       	push	r15
    39fc:	0f 93       	push	r16
    39fe:	1f 93       	push	r17
    3a00:	df 93       	push	r29
    3a02:	cf 93       	push	r28
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
    3a08:	60 97       	sbiw	r28, 0x10	; 16
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	29 87       	std	Y+9, r18	; 0x09
    3a16:	3a 87       	std	Y+10, r19	; 0x0a
    3a18:	4b 87       	std	Y+11, r20	; 0x0b
    3a1a:	5c 87       	std	Y+12, r21	; 0x0c
    3a1c:	6d 87       	std	Y+13, r22	; 0x0d
    3a1e:	7e 87       	std	Y+14, r23	; 0x0e
    3a20:	8f 87       	std	Y+15, r24	; 0x0f
    3a22:	98 8b       	std	Y+16, r25	; 0x10
	if (NUM == 0){
    3a24:	89 85       	ldd	r24, Y+9	; 0x09
    3a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a28:	89 2b       	or	r24, r25
    3a2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a2c:	89 2b       	or	r24, r25
    3a2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a30:	89 2b       	or	r24, r25
    3a32:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a34:	89 2b       	or	r24, r25
    3a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a38:	89 2b       	or	r24, r25
    3a3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a3c:	89 2b       	or	r24, r25
    3a3e:	98 89       	ldd	r25, Y+16	; 0x10
    3a40:	89 2b       	or	r24, r25
    3a42:	88 23       	and	r24, r24
    3a44:	91 f5       	brne	.+100    	; 0x3aaa <CLCD_WriteNum+0xba>
		CLCD_WriteData((NUM%10)+48);
    3a46:	a9 84       	ldd	r10, Y+9	; 0x09
    3a48:	ba 84       	ldd	r11, Y+10	; 0x0a
    3a4a:	cb 84       	ldd	r12, Y+11	; 0x0b
    3a4c:	dc 84       	ldd	r13, Y+12	; 0x0c
    3a4e:	ed 84       	ldd	r14, Y+13	; 0x0d
    3a50:	fe 84       	ldd	r15, Y+14	; 0x0e
    3a52:	0f 85       	ldd	r16, Y+15	; 0x0f
    3a54:	18 89       	ldd	r17, Y+16	; 0x10
    3a56:	2a 2d       	mov	r18, r10
    3a58:	3b 2d       	mov	r19, r11
    3a5a:	4c 2d       	mov	r20, r12
    3a5c:	5d 2d       	mov	r21, r13
    3a5e:	6e 2d       	mov	r22, r14
    3a60:	7f 2d       	mov	r23, r15
    3a62:	80 2f       	mov	r24, r16
    3a64:	91 2f       	mov	r25, r17
    3a66:	0f 2e       	mov	r0, r31
    3a68:	fa e0       	ldi	r31, 0x0A	; 10
    3a6a:	af 2e       	mov	r10, r31
    3a6c:	f0 2d       	mov	r31, r0
    3a6e:	bb 24       	eor	r11, r11
    3a70:	cc 24       	eor	r12, r12
    3a72:	dd 24       	eor	r13, r13
    3a74:	ee 24       	eor	r14, r14
    3a76:	ff 24       	eor	r15, r15
    3a78:	00 e0       	ldi	r16, 0x00	; 0
    3a7a:	10 e0       	ldi	r17, 0x00	; 0
    3a7c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__umoddi3>
    3a80:	a2 2e       	mov	r10, r18
    3a82:	b3 2e       	mov	r11, r19
    3a84:	c4 2e       	mov	r12, r20
    3a86:	d5 2e       	mov	r13, r21
    3a88:	e6 2e       	mov	r14, r22
    3a8a:	f7 2e       	mov	r15, r23
    3a8c:	08 2f       	mov	r16, r24
    3a8e:	19 2f       	mov	r17, r25
    3a90:	2a 2d       	mov	r18, r10
    3a92:	3b 2d       	mov	r19, r11
    3a94:	4c 2d       	mov	r20, r12
    3a96:	5d 2d       	mov	r21, r13
    3a98:	6e 2d       	mov	r22, r14
    3a9a:	7f 2d       	mov	r23, r15
    3a9c:	80 2f       	mov	r24, r16
    3a9e:	91 2f       	mov	r25, r17
    3aa0:	82 2f       	mov	r24, r18
    3aa2:	80 5d       	subi	r24, 0xD0	; 208
    3aa4:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
    3aa8:	9e c0       	rjmp	.+316    	; 0x3be6 <CLCD_WriteNum+0x1f6>
	}
	else{
		u64 reverse=1;
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	89 83       	std	Y+1, r24	; 0x01
    3aae:	1a 82       	std	Y+2, r1	; 0x02
    3ab0:	1b 82       	std	Y+3, r1	; 0x03
    3ab2:	1c 82       	std	Y+4, r1	; 0x04
    3ab4:	1d 82       	std	Y+5, r1	; 0x05
    3ab6:	1e 82       	std	Y+6, r1	; 0x06
    3ab8:	1f 82       	std	Y+7, r1	; 0x07
    3aba:	18 86       	std	Y+8, r1	; 0x08
		reverse = CLCD_ReverseNumber(NUM);
    3abc:	89 85       	ldd	r24, Y+9	; 0x09
    3abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac0:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ac2:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ac4:	bc 01       	movw	r22, r24
    3ac6:	cd 01       	movw	r24, r26
    3ac8:	0e 94 8c 1c 	call	0x3918	; 0x3918 <CLCD_ReverseNumber>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	89 83       	std	Y+1, r24	; 0x01
    3ad2:	9a 83       	std	Y+2, r25	; 0x02
    3ad4:	ab 83       	std	Y+3, r26	; 0x03
    3ad6:	bc 83       	std	Y+4, r27	; 0x04
    3ad8:	bb 0f       	add	r27, r27
    3ada:	88 0b       	sbc	r24, r24
    3adc:	98 2f       	mov	r25, r24
    3ade:	dc 01       	movw	r26, r24
    3ae0:	8d 83       	std	Y+5, r24	; 0x05
    3ae2:	8e 83       	std	Y+6, r24	; 0x06
    3ae4:	8f 83       	std	Y+7, r24	; 0x07
    3ae6:	88 87       	std	Y+8, r24	; 0x08
    3ae8:	5e c0       	rjmp	.+188    	; 0x3ba6 <CLCD_WriteNum+0x1b6>
		while(reverse!=1)
		{
			CLCD_WriteData((reverse%10)+48);
    3aea:	a9 80       	ldd	r10, Y+1	; 0x01
    3aec:	ba 80       	ldd	r11, Y+2	; 0x02
    3aee:	cb 80       	ldd	r12, Y+3	; 0x03
    3af0:	dc 80       	ldd	r13, Y+4	; 0x04
    3af2:	ed 80       	ldd	r14, Y+5	; 0x05
    3af4:	fe 80       	ldd	r15, Y+6	; 0x06
    3af6:	0f 81       	ldd	r16, Y+7	; 0x07
    3af8:	18 85       	ldd	r17, Y+8	; 0x08
    3afa:	2a 2d       	mov	r18, r10
    3afc:	3b 2d       	mov	r19, r11
    3afe:	4c 2d       	mov	r20, r12
    3b00:	5d 2d       	mov	r21, r13
    3b02:	6e 2d       	mov	r22, r14
    3b04:	7f 2d       	mov	r23, r15
    3b06:	80 2f       	mov	r24, r16
    3b08:	91 2f       	mov	r25, r17
    3b0a:	0f 2e       	mov	r0, r31
    3b0c:	fa e0       	ldi	r31, 0x0A	; 10
    3b0e:	af 2e       	mov	r10, r31
    3b10:	f0 2d       	mov	r31, r0
    3b12:	bb 24       	eor	r11, r11
    3b14:	cc 24       	eor	r12, r12
    3b16:	dd 24       	eor	r13, r13
    3b18:	ee 24       	eor	r14, r14
    3b1a:	ff 24       	eor	r15, r15
    3b1c:	00 e0       	ldi	r16, 0x00	; 0
    3b1e:	10 e0       	ldi	r17, 0x00	; 0
    3b20:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__umoddi3>
    3b24:	a2 2e       	mov	r10, r18
    3b26:	b3 2e       	mov	r11, r19
    3b28:	c4 2e       	mov	r12, r20
    3b2a:	d5 2e       	mov	r13, r21
    3b2c:	e6 2e       	mov	r14, r22
    3b2e:	f7 2e       	mov	r15, r23
    3b30:	08 2f       	mov	r16, r24
    3b32:	19 2f       	mov	r17, r25
    3b34:	2a 2d       	mov	r18, r10
    3b36:	3b 2d       	mov	r19, r11
    3b38:	4c 2d       	mov	r20, r12
    3b3a:	5d 2d       	mov	r21, r13
    3b3c:	6e 2d       	mov	r22, r14
    3b3e:	7f 2d       	mov	r23, r15
    3b40:	80 2f       	mov	r24, r16
    3b42:	91 2f       	mov	r25, r17
    3b44:	82 2f       	mov	r24, r18
    3b46:	80 5d       	subi	r24, 0xD0	; 208
    3b48:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
			reverse/=10;
    3b4c:	a9 80       	ldd	r10, Y+1	; 0x01
    3b4e:	ba 80       	ldd	r11, Y+2	; 0x02
    3b50:	cb 80       	ldd	r12, Y+3	; 0x03
    3b52:	dc 80       	ldd	r13, Y+4	; 0x04
    3b54:	ed 80       	ldd	r14, Y+5	; 0x05
    3b56:	fe 80       	ldd	r15, Y+6	; 0x06
    3b58:	0f 81       	ldd	r16, Y+7	; 0x07
    3b5a:	18 85       	ldd	r17, Y+8	; 0x08
    3b5c:	2a 2d       	mov	r18, r10
    3b5e:	3b 2d       	mov	r19, r11
    3b60:	4c 2d       	mov	r20, r12
    3b62:	5d 2d       	mov	r21, r13
    3b64:	6e 2d       	mov	r22, r14
    3b66:	7f 2d       	mov	r23, r15
    3b68:	80 2f       	mov	r24, r16
    3b6a:	91 2f       	mov	r25, r17
    3b6c:	0f 2e       	mov	r0, r31
    3b6e:	fa e0       	ldi	r31, 0x0A	; 10
    3b70:	af 2e       	mov	r10, r31
    3b72:	f0 2d       	mov	r31, r0
    3b74:	bb 24       	eor	r11, r11
    3b76:	cc 24       	eor	r12, r12
    3b78:	dd 24       	eor	r13, r13
    3b7a:	ee 24       	eor	r14, r14
    3b7c:	ff 24       	eor	r15, r15
    3b7e:	00 e0       	ldi	r16, 0x00	; 0
    3b80:	10 e0       	ldi	r17, 0x00	; 0
    3b82:	0e 94 75 00 	call	0xea	; 0xea <__udivdi3>
    3b86:	a2 2e       	mov	r10, r18
    3b88:	b3 2e       	mov	r11, r19
    3b8a:	c4 2e       	mov	r12, r20
    3b8c:	d5 2e       	mov	r13, r21
    3b8e:	e6 2e       	mov	r14, r22
    3b90:	f7 2e       	mov	r15, r23
    3b92:	08 2f       	mov	r16, r24
    3b94:	19 2f       	mov	r17, r25
    3b96:	a9 82       	std	Y+1, r10	; 0x01
    3b98:	ba 82       	std	Y+2, r11	; 0x02
    3b9a:	cb 82       	std	Y+3, r12	; 0x03
    3b9c:	dc 82       	std	Y+4, r13	; 0x04
    3b9e:	ed 82       	std	Y+5, r14	; 0x05
    3ba0:	fe 82       	std	Y+6, r15	; 0x06
    3ba2:	0f 83       	std	Y+7, r16	; 0x07
    3ba4:	18 87       	std	Y+8, r17	; 0x08
		CLCD_WriteData((NUM%10)+48);
	}
	else{
		u64 reverse=1;
		reverse = CLCD_ReverseNumber(NUM);
		while(reverse!=1)
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	81 30       	cpi	r24, 0x01	; 1
    3baa:	09 f0       	breq	.+2      	; 0x3bae <CLCD_WriteNum+0x1be>
    3bac:	9e cf       	rjmp	.-196    	; 0x3aea <CLCD_WriteNum+0xfa>
    3bae:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb0:	88 23       	and	r24, r24
    3bb2:	09 f0       	breq	.+2      	; 0x3bb6 <CLCD_WriteNum+0x1c6>
    3bb4:	9a cf       	rjmp	.-204    	; 0x3aea <CLCD_WriteNum+0xfa>
    3bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb8:	88 23       	and	r24, r24
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <CLCD_WriteNum+0x1ce>
    3bbc:	96 cf       	rjmp	.-212    	; 0x3aea <CLCD_WriteNum+0xfa>
    3bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3bc0:	88 23       	and	r24, r24
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <CLCD_WriteNum+0x1d6>
    3bc4:	92 cf       	rjmp	.-220    	; 0x3aea <CLCD_WriteNum+0xfa>
    3bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc8:	88 23       	and	r24, r24
    3bca:	09 f0       	breq	.+2      	; 0x3bce <CLCD_WriteNum+0x1de>
    3bcc:	8e cf       	rjmp	.-228    	; 0x3aea <CLCD_WriteNum+0xfa>
    3bce:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd0:	88 23       	and	r24, r24
    3bd2:	09 f0       	breq	.+2      	; 0x3bd6 <CLCD_WriteNum+0x1e6>
    3bd4:	8a cf       	rjmp	.-236    	; 0x3aea <CLCD_WriteNum+0xfa>
    3bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    3bd8:	88 23       	and	r24, r24
    3bda:	09 f0       	breq	.+2      	; 0x3bde <CLCD_WriteNum+0x1ee>
    3bdc:	86 cf       	rjmp	.-244    	; 0x3aea <CLCD_WriteNum+0xfa>
    3bde:	88 85       	ldd	r24, Y+8	; 0x08
    3be0:	88 23       	and	r24, r24
    3be2:	09 f0       	breq	.+2      	; 0x3be6 <CLCD_WriteNum+0x1f6>
    3be4:	82 cf       	rjmp	.-252    	; 0x3aea <CLCD_WriteNum+0xfa>
		{
			CLCD_WriteData((reverse%10)+48);
			reverse/=10;
		}
	}
}
    3be6:	60 96       	adiw	r28, 0x10	; 16
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	1f 91       	pop	r17
    3bf8:	0f 91       	pop	r16
    3bfa:	ff 90       	pop	r15
    3bfc:	ef 90       	pop	r14
    3bfe:	df 90       	pop	r13
    3c00:	cf 90       	pop	r12
    3c02:	bf 90       	pop	r11
    3c04:	af 90       	pop	r10
    3c06:	08 95       	ret

00003c08 <CLCD_PrintBinary>:

void CLCD_PrintBinary(u8 num){
    3c08:	df 93       	push	r29
    3c0a:	cf 93       	push	r28
    3c0c:	00 d0       	rcall	.+0      	; 0x3c0e <CLCD_PrintBinary+0x6>
    3c0e:	0f 92       	push	r0
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
    3c14:	8a 83       	std	Y+2, r24	; 0x02
	for(s8 i=7; i>=0; i--){
    3c16:	87 e0       	ldi	r24, 0x07	; 7
    3c18:	89 83       	std	Y+1, r24	; 0x01
    3c1a:	1d c0       	rjmp	.+58     	; 0x3c56 <CLCD_PrintBinary+0x4e>
		CLCD_WriteData(GET_BIT(num,i)?'1':'0');
    3c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1e:	28 2f       	mov	r18, r24
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	99 27       	eor	r25, r25
    3c26:	87 fd       	sbrc	r24, 7
    3c28:	90 95       	com	r25
    3c2a:	a9 01       	movw	r20, r18
    3c2c:	02 c0       	rjmp	.+4      	; 0x3c32 <CLCD_PrintBinary+0x2a>
    3c2e:	55 95       	asr	r21
    3c30:	47 95       	ror	r20
    3c32:	8a 95       	dec	r24
    3c34:	e2 f7       	brpl	.-8      	; 0x3c2e <CLCD_PrintBinary+0x26>
    3c36:	ca 01       	movw	r24, r20
    3c38:	81 70       	andi	r24, 0x01	; 1
    3c3a:	90 70       	andi	r25, 0x00	; 0
    3c3c:	88 23       	and	r24, r24
    3c3e:	19 f0       	breq	.+6      	; 0x3c46 <CLCD_PrintBinary+0x3e>
    3c40:	51 e3       	ldi	r21, 0x31	; 49
    3c42:	5b 83       	std	Y+3, r21	; 0x03
    3c44:	02 c0       	rjmp	.+4      	; 0x3c4a <CLCD_PrintBinary+0x42>
    3c46:	80 e3       	ldi	r24, 0x30	; 48
    3c48:	8b 83       	std	Y+3, r24	; 0x03
    3c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4c:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
		}
	}
}

void CLCD_PrintBinary(u8 num){
	for(s8 i=7; i>=0; i--){
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	81 50       	subi	r24, 0x01	; 1
    3c54:	89 83       	std	Y+1, r24	; 0x01
    3c56:	89 81       	ldd	r24, Y+1	; 0x01
    3c58:	88 23       	and	r24, r24
    3c5a:	04 f7       	brge	.-64     	; 0x3c1c <CLCD_PrintBinary+0x14>
		CLCD_WriteData(GET_BIT(num,i)?'1':'0');
	}
}
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	cf 91       	pop	r28
    3c64:	df 91       	pop	r29
    3c66:	08 95       	ret

00003c68 <CLCD_Draw_Char>:
  0x10,
  0x10,
  0x10
};

void CLCD_Draw_Char(u8 Address_Data, u8* charArray) {
    3c68:	df 93       	push	r29
    3c6a:	cf 93       	push	r28
    3c6c:	00 d0       	rcall	.+0      	; 0x3c6e <CLCD_Draw_Char+0x6>
    3c6e:	00 d0       	rcall	.+0      	; 0x3c70 <CLCD_Draw_Char+0x8>
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62
    3c74:	8a 83       	std	Y+2, r24	; 0x02
    3c76:	7c 83       	std	Y+4, r23	; 0x04
    3c78:	6b 83       	std	Y+3, r22	; 0x03
    CLCD_WriteInes(0x40 | (Address_Data * 8)); // Set CGRAM address
    3c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7c:	88 2f       	mov	r24, r24
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	88 0f       	add	r24, r24
    3c82:	99 1f       	adc	r25, r25
    3c84:	88 0f       	add	r24, r24
    3c86:	99 1f       	adc	r25, r25
    3c88:	88 0f       	add	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	80 64       	ori	r24, 0x40	; 64
    3c8e:	0e 94 00 1a 	call	0x3400	; 0x3400 <CLCD_WriteInes>
    for (u8 j = 0; j < 8; j++) {
    3c92:	19 82       	std	Y+1, r1	; 0x01
    3c94:	0e c0       	rjmp	.+28     	; 0x3cb2 <CLCD_Draw_Char+0x4a>
        CLCD_WriteData(charArray[j]);
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	28 2f       	mov	r18, r24
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	e2 0f       	add	r30, r18
    3ca4:	f3 1f       	adc	r31, r19
    3ca6:	80 81       	ld	r24, Z
    3ca8:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
  0x10
};

void CLCD_Draw_Char(u8 Address_Data, u8* charArray) {
    CLCD_WriteInes(0x40 | (Address_Data * 8)); // Set CGRAM address
    for (u8 j = 0; j < 8; j++) {
    3cac:	89 81       	ldd	r24, Y+1	; 0x01
    3cae:	8f 5f       	subi	r24, 0xFF	; 255
    3cb0:	89 83       	std	Y+1, r24	; 0x01
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	88 30       	cpi	r24, 0x08	; 8
    3cb6:	78 f3       	brcs	.-34     	; 0x3c96 <CLCD_Draw_Char+0x2e>
        CLCD_WriteData(charArray[j]);
    }
    CLCD_WriteInes(0x80); // Set DDRAM address to return to the display area
    3cb8:	80 e8       	ldi	r24, 0x80	; 128
    3cba:	0e 94 00 1a 	call	0x3400	; 0x3400 <CLCD_WriteInes>
}
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	cf 91       	pop	r28
    3cc8:	df 91       	pop	r29
    3cca:	08 95       	ret

00003ccc <CLCD_printHEXNum>:

void CLCD_printHEXNum(u8 num){
    3ccc:	af 92       	push	r10
    3cce:	bf 92       	push	r11
    3cd0:	cf 92       	push	r12
    3cd2:	df 92       	push	r13
    3cd4:	ef 92       	push	r14
    3cd6:	ff 92       	push	r15
    3cd8:	0f 93       	push	r16
    3cda:	1f 93       	push	r17
    3cdc:	df 93       	push	r29
    3cde:	cf 93       	push	r28
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62
    3ce4:	a5 97       	sbiw	r28, 0x25	; 37
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	cd bf       	out	0x3d, r28	; 61
    3cf0:	8e 8b       	std	Y+22, r24	; 0x16
	u8 decimalS[] = "Decimal: ";
    3cf2:	ce 01       	movw	r24, r28
    3cf4:	03 96       	adiw	r24, 0x03	; 3
    3cf6:	98 8f       	std	Y+24, r25	; 0x18
    3cf8:	8f 8b       	std	Y+23, r24	; 0x17
    3cfa:	e0 e6       	ldi	r30, 0x60	; 96
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	fa 8f       	std	Y+26, r31	; 0x1a
    3d00:	e9 8f       	std	Y+25, r30	; 0x19
    3d02:	fa e0       	ldi	r31, 0x0A	; 10
    3d04:	fb 8f       	std	Y+27, r31	; 0x1b
    3d06:	e9 8d       	ldd	r30, Y+25	; 0x19
    3d08:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3d0a:	00 80       	ld	r0, Z
    3d0c:	89 8d       	ldd	r24, Y+25	; 0x19
    3d0e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d10:	01 96       	adiw	r24, 0x01	; 1
    3d12:	9a 8f       	std	Y+26, r25	; 0x1a
    3d14:	89 8f       	std	Y+25, r24	; 0x19
    3d16:	ef 89       	ldd	r30, Y+23	; 0x17
    3d18:	f8 8d       	ldd	r31, Y+24	; 0x18
    3d1a:	00 82       	st	Z, r0
    3d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d20:	01 96       	adiw	r24, 0x01	; 1
    3d22:	98 8f       	std	Y+24, r25	; 0x18
    3d24:	8f 8b       	std	Y+23, r24	; 0x17
    3d26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d28:	91 50       	subi	r25, 0x01	; 1
    3d2a:	9b 8f       	std	Y+27, r25	; 0x1b
    3d2c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3d2e:	ee 23       	and	r30, r30
    3d30:	51 f7       	brne	.-44     	; 0x3d06 <CLCD_printHEXNum+0x3a>
	u8 hexS[] = 	"Hex: ";
    3d32:	ce 01       	movw	r24, r28
    3d34:	0d 96       	adiw	r24, 0x0d	; 13
    3d36:	9d 8f       	std	Y+29, r25	; 0x1d
    3d38:	8c 8f       	std	Y+28, r24	; 0x1c
    3d3a:	ea e6       	ldi	r30, 0x6A	; 106
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
    3d3e:	ff 8f       	std	Y+31, r31	; 0x1f
    3d40:	ee 8f       	std	Y+30, r30	; 0x1e
    3d42:	f6 e0       	ldi	r31, 0x06	; 6
    3d44:	f8 a3       	std	Y+32, r31	; 0x20
    3d46:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3d48:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3d4a:	00 80       	ld	r0, Z
    3d4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d50:	01 96       	adiw	r24, 0x01	; 1
    3d52:	9f 8f       	std	Y+31, r25	; 0x1f
    3d54:	8e 8f       	std	Y+30, r24	; 0x1e
    3d56:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3d58:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3d5a:	00 82       	st	Z, r0
    3d5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d60:	01 96       	adiw	r24, 0x01	; 1
    3d62:	9d 8f       	std	Y+29, r25	; 0x1d
    3d64:	8c 8f       	std	Y+28, r24	; 0x1c
    3d66:	98 a1       	ldd	r25, Y+32	; 0x20
    3d68:	91 50       	subi	r25, 0x01	; 1
    3d6a:	98 a3       	std	Y+32, r25	; 0x20
    3d6c:	e8 a1       	ldd	r30, Y+32	; 0x20
    3d6e:	ee 23       	and	r30, r30
    3d70:	51 f7       	brne	.-44     	; 0x3d46 <CLCD_printHEXNum+0x7a>
	u8 st[] = "0x";
    3d72:	ce 01       	movw	r24, r28
    3d74:	43 96       	adiw	r24, 0x13	; 19
    3d76:	9a a3       	std	Y+34, r25	; 0x22
    3d78:	89 a3       	std	Y+33, r24	; 0x21
    3d7a:	e0 e7       	ldi	r30, 0x70	; 112
    3d7c:	f0 e0       	ldi	r31, 0x00	; 0
    3d7e:	fc a3       	std	Y+36, r31	; 0x24
    3d80:	eb a3       	std	Y+35, r30	; 0x23
    3d82:	f3 e0       	ldi	r31, 0x03	; 3
    3d84:	fd a3       	std	Y+37, r31	; 0x25
    3d86:	eb a1       	ldd	r30, Y+35	; 0x23
    3d88:	fc a1       	ldd	r31, Y+36	; 0x24
    3d8a:	00 80       	ld	r0, Z
    3d8c:	8b a1       	ldd	r24, Y+35	; 0x23
    3d8e:	9c a1       	ldd	r25, Y+36	; 0x24
    3d90:	01 96       	adiw	r24, 0x01	; 1
    3d92:	9c a3       	std	Y+36, r25	; 0x24
    3d94:	8b a3       	std	Y+35, r24	; 0x23
    3d96:	e9 a1       	ldd	r30, Y+33	; 0x21
    3d98:	fa a1       	ldd	r31, Y+34	; 0x22
    3d9a:	00 82       	st	Z, r0
    3d9c:	89 a1       	ldd	r24, Y+33	; 0x21
    3d9e:	9a a1       	ldd	r25, Y+34	; 0x22
    3da0:	01 96       	adiw	r24, 0x01	; 1
    3da2:	9a a3       	std	Y+34, r25	; 0x22
    3da4:	89 a3       	std	Y+33, r24	; 0x21
    3da6:	9d a1       	ldd	r25, Y+37	; 0x25
    3da8:	91 50       	subi	r25, 0x01	; 1
    3daa:	9d a3       	std	Y+37, r25	; 0x25
    3dac:	ed a1       	ldd	r30, Y+37	; 0x25
    3dae:	ee 23       	and	r30, r30
    3db0:	51 f7       	brne	.-44     	; 0x3d86 <CLCD_printHEXNum+0xba>
	u8 Upper =0 , Lower = 0;
    3db2:	1a 82       	std	Y+2, r1	; 0x02
    3db4:	19 82       	std	Y+1, r1	; 0x01
	Upper = num >>4;
    3db6:	8e 89       	ldd	r24, Y+22	; 0x16
    3db8:	82 95       	swap	r24
    3dba:	8f 70       	andi	r24, 0x0F	; 15
    3dbc:	8a 83       	std	Y+2, r24	; 0x02
	Lower = num &0x0f;
    3dbe:	8e 89       	ldd	r24, Y+22	; 0x16
    3dc0:	8f 70       	andi	r24, 0x0F	; 15
    3dc2:	89 83       	std	Y+1, r24	; 0x01

	CLCD_WriteString(decimalS);
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	03 96       	adiw	r24, 0x03	; 3
    3dc8:	0e 94 2d 1c 	call	0x385a	; 0x385a <CLCD_WriteString>
	CLCD_WriteNum(num);
    3dcc:	8e 89       	ldd	r24, Y+22	; 0x16
    3dce:	a8 2e       	mov	r10, r24
    3dd0:	bb 24       	eor	r11, r11
    3dd2:	cc 24       	eor	r12, r12
    3dd4:	dd 24       	eor	r13, r13
    3dd6:	ee 24       	eor	r14, r14
    3dd8:	ff 24       	eor	r15, r15
    3dda:	87 01       	movw	r16, r14
    3ddc:	2a 2d       	mov	r18, r10
    3dde:	3b 2d       	mov	r19, r11
    3de0:	4c 2d       	mov	r20, r12
    3de2:	5d 2d       	mov	r21, r13
    3de4:	6e 2d       	mov	r22, r14
    3de6:	7f 2d       	mov	r23, r15
    3de8:	80 2f       	mov	r24, r16
    3dea:	91 2f       	mov	r25, r17
    3dec:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <CLCD_WriteNum>
	CLCD_GoTo(2,1);
    3df0:	82 e0       	ldi	r24, 0x02	; 2
    3df2:	61 e0       	ldi	r22, 0x01	; 1
    3df4:	0e 94 49 1c 	call	0x3892	; 0x3892 <CLCD_GoTo>
	CLCD_WriteString(hexS);
    3df8:	ce 01       	movw	r24, r28
    3dfa:	0d 96       	adiw	r24, 0x0d	; 13
    3dfc:	0e 94 2d 1c 	call	0x385a	; 0x385a <CLCD_WriteString>
	CLCD_WriteString(st);
    3e00:	ce 01       	movw	r24, r28
    3e02:	43 96       	adiw	r24, 0x13	; 19
    3e04:	0e 94 2d 1c 	call	0x385a	; 0x385a <CLCD_WriteString>

	if (Upper < 10){
    3e08:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0a:	8a 30       	cpi	r24, 0x0A	; 10
    3e0c:	48 f4       	brcc	.+18     	; 0x3e20 <CLCD_printHEXNum+0x154>
		CLCD_GoTo(2,8);
    3e0e:	82 e0       	ldi	r24, 0x02	; 2
    3e10:	68 e0       	ldi	r22, 0x08	; 8
    3e12:	0e 94 49 1c 	call	0x3892	; 0x3892 <CLCD_GoTo>
		CLCD_WriteData(Upper + '0');
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	80 5d       	subi	r24, 0xD0	; 208
    3e1a:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
    3e1e:	08 c0       	rjmp	.+16     	; 0x3e30 <CLCD_printHEXNum+0x164>
	}
	else {
		CLCD_GoTo(2,8);
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	68 e0       	ldi	r22, 0x08	; 8
    3e24:	0e 94 49 1c 	call	0x3892	; 0x3892 <CLCD_GoTo>
		CLCD_WriteData(Upper + 'A'-10);
    3e28:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2a:	89 5c       	subi	r24, 0xC9	; 201
    3e2c:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
	}
	if (Lower < 10){
    3e30:	89 81       	ldd	r24, Y+1	; 0x01
    3e32:	8a 30       	cpi	r24, 0x0A	; 10
    3e34:	48 f4       	brcc	.+18     	; 0x3e48 <CLCD_printHEXNum+0x17c>
		CLCD_GoTo(2,9);
    3e36:	82 e0       	ldi	r24, 0x02	; 2
    3e38:	69 e0       	ldi	r22, 0x09	; 9
    3e3a:	0e 94 49 1c 	call	0x3892	; 0x3892 <CLCD_GoTo>
		CLCD_WriteData(Lower + '0');
    3e3e:	89 81       	ldd	r24, Y+1	; 0x01
    3e40:	80 5d       	subi	r24, 0xD0	; 208
    3e42:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
    3e46:	08 c0       	rjmp	.+16     	; 0x3e58 <CLCD_printHEXNum+0x18c>
	}
	else {
		CLCD_GoTo(2,9);
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	69 e0       	ldi	r22, 0x09	; 9
    3e4c:	0e 94 49 1c 	call	0x3892	; 0x3892 <CLCD_GoTo>
		CLCD_WriteData(Lower + 'A'-10);
    3e50:	89 81       	ldd	r24, Y+1	; 0x01
    3e52:	89 5c       	subi	r24, 0xC9	; 201
    3e54:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
	}
}
    3e58:	a5 96       	adiw	r28, 0x25	; 37
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	cf 91       	pop	r28
    3e66:	df 91       	pop	r29
    3e68:	1f 91       	pop	r17
    3e6a:	0f 91       	pop	r16
    3e6c:	ff 90       	pop	r15
    3e6e:	ef 90       	pop	r14
    3e70:	df 90       	pop	r13
    3e72:	cf 90       	pop	r12
    3e74:	bf 90       	pop	r11
    3e76:	af 90       	pop	r10
    3e78:	08 95       	ret

00003e7a <CLCD_WriteData_Pos>:

void CLCD_WriteData_Pos(u8 Data, u8 Row, u8 Col){
    3e7a:	df 93       	push	r29
    3e7c:	cf 93       	push	r28
    3e7e:	00 d0       	rcall	.+0      	; 0x3e80 <CLCD_WriteData_Pos+0x6>
    3e80:	0f 92       	push	r0
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	89 83       	std	Y+1, r24	; 0x01
    3e88:	6a 83       	std	Y+2, r22	; 0x02
    3e8a:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_GoTo(Row,Col);
    3e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8e:	6b 81       	ldd	r22, Y+3	; 0x03
    3e90:	0e 94 49 1c 	call	0x3892	; 0x3892 <CLCD_GoTo>
	CLCD_WriteData(Data);
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	0e 94 10 1b 	call	0x3620	; 0x3620 <CLCD_WriteData>
}
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	cf 91       	pop	r28
    3ea2:	df 91       	pop	r29
    3ea4:	08 95       	ret

00003ea6 <CLCD_WriteString_Pos>:

void CLCD_WriteString_Pos(u8 *String, u8 Row, u8 Col){
    3ea6:	df 93       	push	r29
    3ea8:	cf 93       	push	r28
    3eaa:	00 d0       	rcall	.+0      	; 0x3eac <CLCD_WriteString_Pos+0x6>
    3eac:	00 d0       	rcall	.+0      	; 0x3eae <CLCD_WriteString_Pos+0x8>
    3eae:	cd b7       	in	r28, 0x3d	; 61
    3eb0:	de b7       	in	r29, 0x3e	; 62
    3eb2:	9a 83       	std	Y+2, r25	; 0x02
    3eb4:	89 83       	std	Y+1, r24	; 0x01
    3eb6:	6b 83       	std	Y+3, r22	; 0x03
    3eb8:	4c 83       	std	Y+4, r20	; 0x04
	CLCD_GoTo(Row,Col);
    3eba:	8b 81       	ldd	r24, Y+3	; 0x03
    3ebc:	6c 81       	ldd	r22, Y+4	; 0x04
    3ebe:	0e 94 49 1c 	call	0x3892	; 0x3892 <CLCD_GoTo>
	CLCD_WriteString(String);
    3ec2:	89 81       	ldd	r24, Y+1	; 0x01
    3ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec6:	0e 94 2d 1c 	call	0x385a	; 0x385a <CLCD_WriteString>
}
    3eca:	0f 90       	pop	r0
    3ecc:	0f 90       	pop	r0
    3ece:	0f 90       	pop	r0
    3ed0:	0f 90       	pop	r0
    3ed2:	cf 91       	pop	r28
    3ed4:	df 91       	pop	r29
    3ed6:	08 95       	ret

00003ed8 <CLCD_WriteNum_Pos>:

void CLCD_WriteNum_Pos(u64 Num, u8 Row, u8 Col){
    3ed8:	af 92       	push	r10
    3eda:	bf 92       	push	r11
    3edc:	cf 92       	push	r12
    3ede:	df 92       	push	r13
    3ee0:	ef 92       	push	r14
    3ee2:	ff 92       	push	r15
    3ee4:	0f 93       	push	r16
    3ee6:	1f 93       	push	r17
    3ee8:	df 93       	push	r29
    3eea:	cf 93       	push	r28
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
    3ef0:	2a 97       	sbiw	r28, 0x0a	; 10
    3ef2:	0f b6       	in	r0, 0x3f	; 63
    3ef4:	f8 94       	cli
    3ef6:	de bf       	out	0x3e, r29	; 62
    3ef8:	0f be       	out	0x3f, r0	; 63
    3efa:	cd bf       	out	0x3d, r28	; 61
    3efc:	29 83       	std	Y+1, r18	; 0x01
    3efe:	3a 83       	std	Y+2, r19	; 0x02
    3f00:	4b 83       	std	Y+3, r20	; 0x03
    3f02:	5c 83       	std	Y+4, r21	; 0x04
    3f04:	6d 83       	std	Y+5, r22	; 0x05
    3f06:	7e 83       	std	Y+6, r23	; 0x06
    3f08:	8f 83       	std	Y+7, r24	; 0x07
    3f0a:	98 87       	std	Y+8, r25	; 0x08
    3f0c:	09 87       	std	Y+9, r16	; 0x09
    3f0e:	ea 86       	std	Y+10, r14	; 0x0a
	CLCD_GoTo(Row,Col);
    3f10:	89 85       	ldd	r24, Y+9	; 0x09
    3f12:	6a 85       	ldd	r22, Y+10	; 0x0a
    3f14:	0e 94 49 1c 	call	0x3892	; 0x3892 <CLCD_GoTo>
	CLCD_WriteNum(Num);
    3f18:	a9 80       	ldd	r10, Y+1	; 0x01
    3f1a:	ba 80       	ldd	r11, Y+2	; 0x02
    3f1c:	cb 80       	ldd	r12, Y+3	; 0x03
    3f1e:	dc 80       	ldd	r13, Y+4	; 0x04
    3f20:	ed 80       	ldd	r14, Y+5	; 0x05
    3f22:	fe 80       	ldd	r15, Y+6	; 0x06
    3f24:	0f 81       	ldd	r16, Y+7	; 0x07
    3f26:	18 85       	ldd	r17, Y+8	; 0x08
    3f28:	2a 2d       	mov	r18, r10
    3f2a:	3b 2d       	mov	r19, r11
    3f2c:	4c 2d       	mov	r20, r12
    3f2e:	5d 2d       	mov	r21, r13
    3f30:	6e 2d       	mov	r22, r14
    3f32:	7f 2d       	mov	r23, r15
    3f34:	80 2f       	mov	r24, r16
    3f36:	91 2f       	mov	r25, r17
    3f38:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <CLCD_WriteNum>
}
    3f3c:	2a 96       	adiw	r28, 0x0a	; 10
    3f3e:	0f b6       	in	r0, 0x3f	; 63
    3f40:	f8 94       	cli
    3f42:	de bf       	out	0x3e, r29	; 62
    3f44:	0f be       	out	0x3f, r0	; 63
    3f46:	cd bf       	out	0x3d, r28	; 61
    3f48:	cf 91       	pop	r28
    3f4a:	df 91       	pop	r29
    3f4c:	1f 91       	pop	r17
    3f4e:	0f 91       	pop	r16
    3f50:	ff 90       	pop	r15
    3f52:	ef 90       	pop	r14
    3f54:	df 90       	pop	r13
    3f56:	cf 90       	pop	r12
    3f58:	bf 90       	pop	r11
    3f5a:	af 90       	pop	r10
    3f5c:	08 95       	ret

00003f5e <BushButton_voidInit>:
 *      Author: hp
 */

#include "BushButton_Interface.h"

void BushButton_voidInit(Button *button){
    3f5e:	df 93       	push	r29
    3f60:	cf 93       	push	r28
    3f62:	00 d0       	rcall	.+0      	; 0x3f64 <BushButton_voidInit+0x6>
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	9a 83       	std	Y+2, r25	; 0x02
    3f6a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(BUSHBUTTON_PORT, button->button_pin, DIO_u8INPUT);
    3f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f70:	90 81       	ld	r25, Z
    3f72:	84 e0       	ldi	r24, 0x04	; 4
    3f74:	69 2f       	mov	r22, r25
    3f76:	40 e0       	ldi	r20, 0x00	; 0
    3f78:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(BUSHBUTTON_PORT, button->button_pin, DIO_u8HIGH);
    3f7c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f7e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f80:	90 81       	ld	r25, Z
    3f82:	84 e0       	ldi	r24, 0x04	; 4
    3f84:	69 2f       	mov	r22, r25
    3f86:	41 e0       	ldi	r20, 0x01	; 1
    3f88:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
}
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	cf 91       	pop	r28
    3f92:	df 91       	pop	r29
    3f94:	08 95       	ret

00003f96 <BushButton_voidRead>:

u8 BushButton_voidRead(Button *button){
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	61 97       	sbiw	r28, 0x11	; 17
    3fa0:	0f b6       	in	r0, 0x3f	; 63
    3fa2:	f8 94       	cli
    3fa4:	de bf       	out	0x3e, r29	; 62
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	99 8b       	std	Y+17, r25	; 0x11
    3fac:	88 8b       	std	Y+16, r24	; 0x10
	u8 local_u8Read = DIO_u8GetPinValue(BUSHBUTTON_PORT, button->button_pin);
    3fae:	e8 89       	ldd	r30, Y+16	; 0x10
    3fb0:	f9 89       	ldd	r31, Y+17	; 0x11
    3fb2:	90 81       	ld	r25, Z
    3fb4:	84 e0       	ldi	r24, 0x04	; 4
    3fb6:	69 2f       	mov	r22, r25
    3fb8:	0e 94 76 16 	call	0x2cec	; 0x2cec <DIO_u8GetPinValue>
    3fbc:	8f 87       	std	Y+15, r24	; 0x0f
	if (local_u8Read == 0){
    3fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fc0:	88 23       	and	r24, r24
    3fc2:	09 f0       	breq	.+2      	; 0x3fc6 <BushButton_voidRead+0x30>
    3fc4:	79 c0       	rjmp	.+242    	; 0x40b8 <BushButton_voidRead+0x122>
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	a6 e1       	ldi	r26, 0x16	; 22
    3fcc:	b3 e4       	ldi	r27, 0x43	; 67
    3fce:	8b 87       	std	Y+11, r24	; 0x0b
    3fd0:	9c 87       	std	Y+12, r25	; 0x0c
    3fd2:	ad 87       	std	Y+13, r26	; 0x0d
    3fd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	4a ef       	ldi	r20, 0xFA	; 250
    3fe4:	54 e4       	ldi	r21, 0x44	; 68
    3fe6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	8f 83       	std	Y+7, r24	; 0x07
    3ff0:	98 87       	std	Y+8, r25	; 0x08
    3ff2:	a9 87       	std	Y+9, r26	; 0x09
    3ff4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff8:	78 85       	ldd	r23, Y+8	; 0x08
    3ffa:	89 85       	ldd	r24, Y+9	; 0x09
    3ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	40 e8       	ldi	r20, 0x80	; 128
    4004:	5f e3       	ldi	r21, 0x3F	; 63
    4006:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    400a:	88 23       	and	r24, r24
    400c:	2c f4       	brge	.+10     	; 0x4018 <BushButton_voidRead+0x82>
		__ticks = 1;
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	9e 83       	std	Y+6, r25	; 0x06
    4014:	8d 83       	std	Y+5, r24	; 0x05
    4016:	3f c0       	rjmp	.+126    	; 0x4096 <BushButton_voidRead+0x100>
	else if (__tmp > 65535)
    4018:	6f 81       	ldd	r22, Y+7	; 0x07
    401a:	78 85       	ldd	r23, Y+8	; 0x08
    401c:	89 85       	ldd	r24, Y+9	; 0x09
    401e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	3f ef       	ldi	r19, 0xFF	; 255
    4024:	4f e7       	ldi	r20, 0x7F	; 127
    4026:	57 e4       	ldi	r21, 0x47	; 71
    4028:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    402c:	18 16       	cp	r1, r24
    402e:	4c f5       	brge	.+82     	; 0x4082 <BushButton_voidRead+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4030:	6b 85       	ldd	r22, Y+11	; 0x0b
    4032:	7c 85       	ldd	r23, Y+12	; 0x0c
    4034:	8d 85       	ldd	r24, Y+13	; 0x0d
    4036:	9e 85       	ldd	r25, Y+14	; 0x0e
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	40 e2       	ldi	r20, 0x20	; 32
    403e:	51 e4       	ldi	r21, 0x41	; 65
    4040:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	bc 01       	movw	r22, r24
    404a:	cd 01       	movw	r24, r26
    404c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4050:	dc 01       	movw	r26, r24
    4052:	cb 01       	movw	r24, r22
    4054:	9e 83       	std	Y+6, r25	; 0x06
    4056:	8d 83       	std	Y+5, r24	; 0x05
    4058:	0f c0       	rjmp	.+30     	; 0x4078 <BushButton_voidRead+0xe2>
    405a:	88 ec       	ldi	r24, 0xC8	; 200
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	9c 83       	std	Y+4, r25	; 0x04
    4060:	8b 83       	std	Y+3, r24	; 0x03
    4062:	8b 81       	ldd	r24, Y+3	; 0x03
    4064:	9c 81       	ldd	r25, Y+4	; 0x04
    4066:	01 97       	sbiw	r24, 0x01	; 1
    4068:	f1 f7       	brne	.-4      	; 0x4066 <BushButton_voidRead+0xd0>
    406a:	9c 83       	std	Y+4, r25	; 0x04
    406c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    406e:	8d 81       	ldd	r24, Y+5	; 0x05
    4070:	9e 81       	ldd	r25, Y+6	; 0x06
    4072:	01 97       	sbiw	r24, 0x01	; 1
    4074:	9e 83       	std	Y+6, r25	; 0x06
    4076:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4078:	8d 81       	ldd	r24, Y+5	; 0x05
    407a:	9e 81       	ldd	r25, Y+6	; 0x06
    407c:	00 97       	sbiw	r24, 0x00	; 0
    407e:	69 f7       	brne	.-38     	; 0x405a <BushButton_voidRead+0xc4>
    4080:	14 c0       	rjmp	.+40     	; 0x40aa <BushButton_voidRead+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4082:	6f 81       	ldd	r22, Y+7	; 0x07
    4084:	78 85       	ldd	r23, Y+8	; 0x08
    4086:	89 85       	ldd	r24, Y+9	; 0x09
    4088:	9a 85       	ldd	r25, Y+10	; 0x0a
    408a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	9e 83       	std	Y+6, r25	; 0x06
    4094:	8d 83       	std	Y+5, r24	; 0x05
    4096:	8d 81       	ldd	r24, Y+5	; 0x05
    4098:	9e 81       	ldd	r25, Y+6	; 0x06
    409a:	9a 83       	std	Y+2, r25	; 0x02
    409c:	89 83       	std	Y+1, r24	; 0x01
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	9a 81       	ldd	r25, Y+2	; 0x02
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	f1 f7       	brne	.-4      	; 0x40a2 <BushButton_voidRead+0x10c>
    40a6:	9a 83       	std	Y+2, r25	; 0x02
    40a8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(150);
		if (local_u8Read == 0){
    40aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ac:	88 23       	and	r24, r24
    40ae:	59 f4       	brne	.+22     	; 0x40c6 <BushButton_voidRead+0x130>
			button->button = Button_PRESSESD;
    40b0:	e8 89       	ldd	r30, Y+16	; 0x10
    40b2:	f9 89       	ldd	r31, Y+17	; 0x11
    40b4:	11 82       	std	Z+1, r1	; 0x01
    40b6:	07 c0       	rjmp	.+14     	; 0x40c6 <BushButton_voidRead+0x130>
		}
	}else if (local_u8Read == 1){
    40b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ba:	81 30       	cpi	r24, 0x01	; 1
    40bc:	21 f4       	brne	.+8      	; 0x40c6 <BushButton_voidRead+0x130>
		button->button = Button_RELEASED;
    40be:	e8 89       	ldd	r30, Y+16	; 0x10
    40c0:	f9 89       	ldd	r31, Y+17	; 0x11
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	81 83       	std	Z+1, r24	; 0x01
	}
	return button->button;
    40c6:	e8 89       	ldd	r30, Y+16	; 0x10
    40c8:	f9 89       	ldd	r31, Y+17	; 0x11
    40ca:	81 81       	ldd	r24, Z+1	; 0x01
}
    40cc:	61 96       	adiw	r28, 0x11	; 17
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	f8 94       	cli
    40d2:	de bf       	out	0x3e, r29	; 62
    40d4:	0f be       	out	0x3f, r0	; 63
    40d6:	cd bf       	out	0x3d, r28	; 61
    40d8:	cf 91       	pop	r28
    40da:	df 91       	pop	r29
    40dc:	08 95       	ret

000040de <SevenSegment_voidInit>:
#include "SEVEN_SEGMENT_Interface.h"
#include "util/delay.h"

u32 SSD_Arr[10] = {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};

void SevenSegment_voidInit(){
    40de:	df 93       	push	r29
    40e0:	cf 93       	push	r28
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(SEVEN_SEGMENT_PORT, 0xff);
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	6f ef       	ldi	r22, 0xFF	; 255
    40ea:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <DIO_voidSetPortDirection>
	DIO_voidSetPortDirection(SEVEN_SEGMENT_PORT2, 0xff);
    40ee:	82 e0       	ldi	r24, 0x02	; 2
    40f0:	6f ef       	ldi	r22, 0xFF	; 255
    40f2:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <DIO_voidSetPortDirection>
}
    40f6:	cf 91       	pop	r28
    40f8:	df 91       	pop	r29
    40fa:	08 95       	ret

000040fc <SevenSegment_voidDispaly>:

void SevenSegment_voidDispaly(u8 Copy_u8Seconds){
    40fc:	df 93       	push	r29
    40fe:	cf 93       	push	r28
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	a0 97       	sbiw	r28, 0x20	; 32
    4106:	0f b6       	in	r0, 0x3f	; 63
    4108:	f8 94       	cli
    410a:	de bf       	out	0x3e, r29	; 62
    410c:	0f be       	out	0x3f, r0	; 63
    410e:	cd bf       	out	0x3d, r28	; 61
    4110:	88 a3       	std	Y+32, r24	; 0x20
	u8 i;
	if (Copy_u8Seconds < 10){
    4112:	88 a1       	ldd	r24, Y+32	; 0x20
    4114:	8a 30       	cpi	r24, 0x0A	; 10
    4116:	08 f0       	brcs	.+2      	; 0x411a <SevenSegment_voidDispaly+0x1e>
    4118:	90 c0       	rjmp	.+288    	; 0x423a <SevenSegment_voidDispaly+0x13e>
		for(i = Copy_u8Seconds; i > 0; i--)
    411a:	88 a1       	ldd	r24, Y+32	; 0x20
    411c:	8f 8f       	std	Y+31, r24	; 0x1f
    411e:	88 c0       	rjmp	.+272    	; 0x4230 <SevenSegment_voidDispaly+0x134>
		{
			DIO_voidSetPortValue(SEVEN_SEGMENT_PORT, SSD_Arr[i]);
    4120:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4122:	88 2f       	mov	r24, r24
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	88 0f       	add	r24, r24
    4128:	99 1f       	adc	r25, r25
    412a:	88 0f       	add	r24, r24
    412c:	99 1f       	adc	r25, r25
    412e:	fc 01       	movw	r30, r24
    4130:	ed 56       	subi	r30, 0x6D	; 109
    4132:	fe 4f       	sbci	r31, 0xFE	; 254
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	a2 81       	ldd	r26, Z+2	; 0x02
    413a:	b3 81       	ldd	r27, Z+3	; 0x03
    413c:	98 2f       	mov	r25, r24
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	69 2f       	mov	r22, r25
    4142:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <DIO_voidSetPortValue>
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	aa ef       	ldi	r26, 0xFA	; 250
    414c:	b3 e4       	ldi	r27, 0x43	; 67
    414e:	89 8f       	std	Y+25, r24	; 0x19
    4150:	9a 8f       	std	Y+26, r25	; 0x1a
    4152:	ab 8f       	std	Y+27, r26	; 0x1b
    4154:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4156:	69 8d       	ldd	r22, Y+25	; 0x19
    4158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    415a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    415c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	4a ef       	ldi	r20, 0xFA	; 250
    4164:	54 e4       	ldi	r21, 0x44	; 68
    4166:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	8d 8b       	std	Y+21, r24	; 0x15
    4170:	9e 8b       	std	Y+22, r25	; 0x16
    4172:	af 8b       	std	Y+23, r26	; 0x17
    4174:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4176:	6d 89       	ldd	r22, Y+21	; 0x15
    4178:	7e 89       	ldd	r23, Y+22	; 0x16
    417a:	8f 89       	ldd	r24, Y+23	; 0x17
    417c:	98 8d       	ldd	r25, Y+24	; 0x18
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e8       	ldi	r20, 0x80	; 128
    4184:	5f e3       	ldi	r21, 0x3F	; 63
    4186:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    418a:	88 23       	and	r24, r24
    418c:	2c f4       	brge	.+10     	; 0x4198 <SevenSegment_voidDispaly+0x9c>
		__ticks = 1;
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	9c 8b       	std	Y+20, r25	; 0x14
    4194:	8b 8b       	std	Y+19, r24	; 0x13
    4196:	3f c0       	rjmp	.+126    	; 0x4216 <SevenSegment_voidDispaly+0x11a>
	else if (__tmp > 65535)
    4198:	6d 89       	ldd	r22, Y+21	; 0x15
    419a:	7e 89       	ldd	r23, Y+22	; 0x16
    419c:	8f 89       	ldd	r24, Y+23	; 0x17
    419e:	98 8d       	ldd	r25, Y+24	; 0x18
    41a0:	20 e0       	ldi	r18, 0x00	; 0
    41a2:	3f ef       	ldi	r19, 0xFF	; 255
    41a4:	4f e7       	ldi	r20, 0x7F	; 127
    41a6:	57 e4       	ldi	r21, 0x47	; 71
    41a8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    41ac:	18 16       	cp	r1, r24
    41ae:	4c f5       	brge	.+82     	; 0x4202 <SevenSegment_voidDispaly+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b0:	69 8d       	ldd	r22, Y+25	; 0x19
    41b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	40 e2       	ldi	r20, 0x20	; 32
    41be:	51 e4       	ldi	r21, 0x41	; 65
    41c0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	bc 01       	movw	r22, r24
    41ca:	cd 01       	movw	r24, r26
    41cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d0:	dc 01       	movw	r26, r24
    41d2:	cb 01       	movw	r24, r22
    41d4:	9c 8b       	std	Y+20, r25	; 0x14
    41d6:	8b 8b       	std	Y+19, r24	; 0x13
    41d8:	0f c0       	rjmp	.+30     	; 0x41f8 <SevenSegment_voidDispaly+0xfc>
    41da:	88 ec       	ldi	r24, 0xC8	; 200
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	9a 8b       	std	Y+18, r25	; 0x12
    41e0:	89 8b       	std	Y+17, r24	; 0x11
    41e2:	89 89       	ldd	r24, Y+17	; 0x11
    41e4:	9a 89       	ldd	r25, Y+18	; 0x12
    41e6:	01 97       	sbiw	r24, 0x01	; 1
    41e8:	f1 f7       	brne	.-4      	; 0x41e6 <SevenSegment_voidDispaly+0xea>
    41ea:	9a 8b       	std	Y+18, r25	; 0x12
    41ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ee:	8b 89       	ldd	r24, Y+19	; 0x13
    41f0:	9c 89       	ldd	r25, Y+20	; 0x14
    41f2:	01 97       	sbiw	r24, 0x01	; 1
    41f4:	9c 8b       	std	Y+20, r25	; 0x14
    41f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f8:	8b 89       	ldd	r24, Y+19	; 0x13
    41fa:	9c 89       	ldd	r25, Y+20	; 0x14
    41fc:	00 97       	sbiw	r24, 0x00	; 0
    41fe:	69 f7       	brne	.-38     	; 0x41da <SevenSegment_voidDispaly+0xde>
    4200:	14 c0       	rjmp	.+40     	; 0x422a <SevenSegment_voidDispaly+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4202:	6d 89       	ldd	r22, Y+21	; 0x15
    4204:	7e 89       	ldd	r23, Y+22	; 0x16
    4206:	8f 89       	ldd	r24, Y+23	; 0x17
    4208:	98 8d       	ldd	r25, Y+24	; 0x18
    420a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	9c 8b       	std	Y+20, r25	; 0x14
    4214:	8b 8b       	std	Y+19, r24	; 0x13
    4216:	8b 89       	ldd	r24, Y+19	; 0x13
    4218:	9c 89       	ldd	r25, Y+20	; 0x14
    421a:	98 8b       	std	Y+16, r25	; 0x10
    421c:	8f 87       	std	Y+15, r24	; 0x0f
    421e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4220:	98 89       	ldd	r25, Y+16	; 0x10
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	f1 f7       	brne	.-4      	; 0x4222 <SevenSegment_voidDispaly+0x126>
    4226:	98 8b       	std	Y+16, r25	; 0x10
    4228:	8f 87       	std	Y+15, r24	; 0x0f
}

void SevenSegment_voidDispaly(u8 Copy_u8Seconds){
	u8 i;
	if (Copy_u8Seconds < 10){
		for(i = Copy_u8Seconds; i > 0; i--)
    422a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    422c:	81 50       	subi	r24, 0x01	; 1
    422e:	8f 8f       	std	Y+31, r24	; 0x1f
    4230:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4232:	88 23       	and	r24, r24
    4234:	09 f0       	breq	.+2      	; 0x4238 <SevenSegment_voidDispaly+0x13c>
    4236:	74 cf       	rjmp	.-280    	; 0x4120 <SevenSegment_voidDispaly+0x24>
    4238:	b3 c0       	rjmp	.+358    	; 0x43a0 <SevenSegment_voidDispaly+0x2a4>
		{
			DIO_voidSetPortValue(SEVEN_SEGMENT_PORT, SSD_Arr[i]);
			_delay_ms(500);
		}
	} else if (Copy_u8Seconds < 99){
    423a:	88 a1       	ldd	r24, Y+32	; 0x20
    423c:	83 36       	cpi	r24, 0x63	; 99
    423e:	08 f0       	brcs	.+2      	; 0x4242 <SevenSegment_voidDispaly+0x146>
    4240:	af c0       	rjmp	.+350    	; 0x43a0 <SevenSegment_voidDispaly+0x2a4>
		u8 fnum,snum;
		for(i = Copy_u8Seconds; i > 0; i--)
    4242:	88 a1       	ldd	r24, Y+32	; 0x20
    4244:	8f 8f       	std	Y+31, r24	; 0x1f
    4246:	a8 c0       	rjmp	.+336    	; 0x4398 <SevenSegment_voidDispaly+0x29c>
		{
			fnum = i/10;
    4248:	8f 8d       	ldd	r24, Y+31	; 0x1f
    424a:	9a e0       	ldi	r25, 0x0A	; 10
    424c:	69 2f       	mov	r22, r25
    424e:	0e 94 bd 24 	call	0x497a	; 0x497a <__udivmodqi4>
    4252:	8e 8f       	std	Y+30, r24	; 0x1e
			snum = i%10;
    4254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4256:	9a e0       	ldi	r25, 0x0A	; 10
    4258:	69 2f       	mov	r22, r25
    425a:	0e 94 bd 24 	call	0x497a	; 0x497a <__udivmodqi4>
    425e:	89 2f       	mov	r24, r25
    4260:	8d 8f       	std	Y+29, r24	; 0x1d
			DIO_voidSetPortValue(SEVEN_SEGMENT_PORT, SSD_Arr[fnum]);
    4262:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4264:	88 2f       	mov	r24, r24
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	88 0f       	add	r24, r24
    426a:	99 1f       	adc	r25, r25
    426c:	88 0f       	add	r24, r24
    426e:	99 1f       	adc	r25, r25
    4270:	fc 01       	movw	r30, r24
    4272:	ed 56       	subi	r30, 0x6D	; 109
    4274:	fe 4f       	sbci	r31, 0xFE	; 254
    4276:	80 81       	ld	r24, Z
    4278:	91 81       	ldd	r25, Z+1	; 0x01
    427a:	a2 81       	ldd	r26, Z+2	; 0x02
    427c:	b3 81       	ldd	r27, Z+3	; 0x03
    427e:	98 2f       	mov	r25, r24
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	69 2f       	mov	r22, r25
    4284:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <DIO_voidSetPortValue>
			DIO_voidSetPortValue(SEVEN_SEGMENT_PORT2, SSD_Arr[snum]);
    4288:	8d 8d       	ldd	r24, Y+29	; 0x1d
    428a:	88 2f       	mov	r24, r24
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	88 0f       	add	r24, r24
    4290:	99 1f       	adc	r25, r25
    4292:	88 0f       	add	r24, r24
    4294:	99 1f       	adc	r25, r25
    4296:	fc 01       	movw	r30, r24
    4298:	ed 56       	subi	r30, 0x6D	; 109
    429a:	fe 4f       	sbci	r31, 0xFE	; 254
    429c:	80 81       	ld	r24, Z
    429e:	91 81       	ldd	r25, Z+1	; 0x01
    42a0:	a2 81       	ldd	r26, Z+2	; 0x02
    42a2:	b3 81       	ldd	r27, Z+3	; 0x03
    42a4:	98 2f       	mov	r25, r24
    42a6:	82 e0       	ldi	r24, 0x02	; 2
    42a8:	69 2f       	mov	r22, r25
    42aa:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <DIO_voidSetPortValue>
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	aa ef       	ldi	r26, 0xFA	; 250
    42b4:	b3 e4       	ldi	r27, 0x43	; 67
    42b6:	8b 87       	std	Y+11, r24	; 0x0b
    42b8:	9c 87       	std	Y+12, r25	; 0x0c
    42ba:	ad 87       	std	Y+13, r26	; 0x0d
    42bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42be:	6b 85       	ldd	r22, Y+11	; 0x0b
    42c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    42c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    42c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	4a ef       	ldi	r20, 0xFA	; 250
    42cc:	54 e4       	ldi	r21, 0x44	; 68
    42ce:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	8f 83       	std	Y+7, r24	; 0x07
    42d8:	98 87       	std	Y+8, r25	; 0x08
    42da:	a9 87       	std	Y+9, r26	; 0x09
    42dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42de:	6f 81       	ldd	r22, Y+7	; 0x07
    42e0:	78 85       	ldd	r23, Y+8	; 0x08
    42e2:	89 85       	ldd	r24, Y+9	; 0x09
    42e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	40 e8       	ldi	r20, 0x80	; 128
    42ec:	5f e3       	ldi	r21, 0x3F	; 63
    42ee:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    42f2:	88 23       	and	r24, r24
    42f4:	2c f4       	brge	.+10     	; 0x4300 <SevenSegment_voidDispaly+0x204>
		__ticks = 1;
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	9e 83       	std	Y+6, r25	; 0x06
    42fc:	8d 83       	std	Y+5, r24	; 0x05
    42fe:	3f c0       	rjmp	.+126    	; 0x437e <SevenSegment_voidDispaly+0x282>
	else if (__tmp > 65535)
    4300:	6f 81       	ldd	r22, Y+7	; 0x07
    4302:	78 85       	ldd	r23, Y+8	; 0x08
    4304:	89 85       	ldd	r24, Y+9	; 0x09
    4306:	9a 85       	ldd	r25, Y+10	; 0x0a
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	3f ef       	ldi	r19, 0xFF	; 255
    430c:	4f e7       	ldi	r20, 0x7F	; 127
    430e:	57 e4       	ldi	r21, 0x47	; 71
    4310:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    4314:	18 16       	cp	r1, r24
    4316:	4c f5       	brge	.+82     	; 0x436a <SevenSegment_voidDispaly+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4318:	6b 85       	ldd	r22, Y+11	; 0x0b
    431a:	7c 85       	ldd	r23, Y+12	; 0x0c
    431c:	8d 85       	ldd	r24, Y+13	; 0x0d
    431e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4320:	20 e0       	ldi	r18, 0x00	; 0
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	40 e2       	ldi	r20, 0x20	; 32
    4326:	51 e4       	ldi	r21, 0x41	; 65
    4328:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    432c:	dc 01       	movw	r26, r24
    432e:	cb 01       	movw	r24, r22
    4330:	bc 01       	movw	r22, r24
    4332:	cd 01       	movw	r24, r26
    4334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	9e 83       	std	Y+6, r25	; 0x06
    433e:	8d 83       	std	Y+5, r24	; 0x05
    4340:	0f c0       	rjmp	.+30     	; 0x4360 <SevenSegment_voidDispaly+0x264>
    4342:	88 ec       	ldi	r24, 0xC8	; 200
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	9c 83       	std	Y+4, r25	; 0x04
    4348:	8b 83       	std	Y+3, r24	; 0x03
    434a:	8b 81       	ldd	r24, Y+3	; 0x03
    434c:	9c 81       	ldd	r25, Y+4	; 0x04
    434e:	01 97       	sbiw	r24, 0x01	; 1
    4350:	f1 f7       	brne	.-4      	; 0x434e <SevenSegment_voidDispaly+0x252>
    4352:	9c 83       	std	Y+4, r25	; 0x04
    4354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4356:	8d 81       	ldd	r24, Y+5	; 0x05
    4358:	9e 81       	ldd	r25, Y+6	; 0x06
    435a:	01 97       	sbiw	r24, 0x01	; 1
    435c:	9e 83       	std	Y+6, r25	; 0x06
    435e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4360:	8d 81       	ldd	r24, Y+5	; 0x05
    4362:	9e 81       	ldd	r25, Y+6	; 0x06
    4364:	00 97       	sbiw	r24, 0x00	; 0
    4366:	69 f7       	brne	.-38     	; 0x4342 <SevenSegment_voidDispaly+0x246>
    4368:	14 c0       	rjmp	.+40     	; 0x4392 <SevenSegment_voidDispaly+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    436a:	6f 81       	ldd	r22, Y+7	; 0x07
    436c:	78 85       	ldd	r23, Y+8	; 0x08
    436e:	89 85       	ldd	r24, Y+9	; 0x09
    4370:	9a 85       	ldd	r25, Y+10	; 0x0a
    4372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	9e 83       	std	Y+6, r25	; 0x06
    437c:	8d 83       	std	Y+5, r24	; 0x05
    437e:	8d 81       	ldd	r24, Y+5	; 0x05
    4380:	9e 81       	ldd	r25, Y+6	; 0x06
    4382:	9a 83       	std	Y+2, r25	; 0x02
    4384:	89 83       	std	Y+1, r24	; 0x01
    4386:	89 81       	ldd	r24, Y+1	; 0x01
    4388:	9a 81       	ldd	r25, Y+2	; 0x02
    438a:	01 97       	sbiw	r24, 0x01	; 1
    438c:	f1 f7       	brne	.-4      	; 0x438a <SevenSegment_voidDispaly+0x28e>
    438e:	9a 83       	std	Y+2, r25	; 0x02
    4390:	89 83       	std	Y+1, r24	; 0x01
			DIO_voidSetPortValue(SEVEN_SEGMENT_PORT, SSD_Arr[i]);
			_delay_ms(500);
		}
	} else if (Copy_u8Seconds < 99){
		u8 fnum,snum;
		for(i = Copy_u8Seconds; i > 0; i--)
    4392:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4394:	81 50       	subi	r24, 0x01	; 1
    4396:	8f 8f       	std	Y+31, r24	; 0x1f
    4398:	8f 8d       	ldd	r24, Y+31	; 0x1f
    439a:	88 23       	and	r24, r24
    439c:	09 f0       	breq	.+2      	; 0x43a0 <SevenSegment_voidDispaly+0x2a4>
    439e:	54 cf       	rjmp	.-344    	; 0x4248 <SevenSegment_voidDispaly+0x14c>
			DIO_voidSetPortValue(SEVEN_SEGMENT_PORT, SSD_Arr[fnum]);
			DIO_voidSetPortValue(SEVEN_SEGMENT_PORT2, SSD_Arr[snum]);
			_delay_ms(500);
		}
	}
}
    43a0:	a0 96       	adiw	r28, 0x20	; 32
    43a2:	0f b6       	in	r0, 0x3f	; 63
    43a4:	f8 94       	cli
    43a6:	de bf       	out	0x3e, r29	; 62
    43a8:	0f be       	out	0x3f, r0	; 63
    43aa:	cd bf       	out	0x3d, r28	; 61
    43ac:	cf 91       	pop	r28
    43ae:	df 91       	pop	r29
    43b0:	08 95       	ret

000043b2 <LED_voidInit>:

#include "../../01-LIB/STD_TYPES.h"
#include "../../04-MCAL/01-DIO/DIO_Interface.h"
#include "../01-LED/LED_Interface.h"

void LED_voidInit(u8 u8PinNum){
    43b2:	df 93       	push	r29
    43b4:	cf 93       	push	r28
    43b6:	0f 92       	push	r0
    43b8:	cd b7       	in	r28, 0x3d	; 61
    43ba:	de b7       	in	r29, 0x3e	; 62
    43bc:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(LED_PORT, u8PinNum, DIO_u8OUTPUT);
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	69 81       	ldd	r22, Y+1	; 0x01
    43c2:	41 e0       	ldi	r20, 0x01	; 1
    43c4:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_voidSetPinDirection>
}
    43c8:	0f 90       	pop	r0
    43ca:	cf 91       	pop	r28
    43cc:	df 91       	pop	r29
    43ce:	08 95       	ret

000043d0 <LEDs_voidInit>:

void LEDs_voidInit(u8 u8PinNum){
    43d0:	df 93       	push	r29
    43d2:	cf 93       	push	r28
    43d4:	0f 92       	push	r0
    43d6:	cd b7       	in	r28, 0x3d	; 61
    43d8:	de b7       	in	r29, 0x3e	; 62
    43da:	89 83       	std	Y+1, r24	; 0x01
	//DDRC = 0b00000111; //output(C0,C1,C2)
	DIO_voidSetPortDirection(LED_PORT, u8PinNum);
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	69 81       	ldd	r22, Y+1	; 0x01
    43e0:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <DIO_voidSetPortDirection>
}
    43e4:	0f 90       	pop	r0
    43e6:	cf 91       	pop	r28
    43e8:	df 91       	pop	r29
    43ea:	08 95       	ret

000043ec <LED_voidON>:

void LED_voidON(u8 u8PinNum){
    43ec:	df 93       	push	r29
    43ee:	cf 93       	push	r28
    43f0:	0f 92       	push	r0
    43f2:	cd b7       	in	r28, 0x3d	; 61
    43f4:	de b7       	in	r29, 0x3e	; 62
    43f6:	89 83       	std	Y+1, r24	; 0x01
	//PORTC = 0b00000001; //high(C0,C1,C2)
	DIO_voidSetPinValue(LED_PORT, u8PinNum, DIO_u8HIGH);
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	69 81       	ldd	r22, Y+1	; 0x01
    43fc:	41 e0       	ldi	r20, 0x01	; 1
    43fe:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
}
    4402:	0f 90       	pop	r0
    4404:	cf 91       	pop	r28
    4406:	df 91       	pop	r29
    4408:	08 95       	ret

0000440a <LEDs_voidON>:

void LEDs_voidON(u8 u8PinNum){
    440a:	df 93       	push	r29
    440c:	cf 93       	push	r28
    440e:	0f 92       	push	r0
    4410:	cd b7       	in	r28, 0x3d	; 61
    4412:	de b7       	in	r29, 0x3e	; 62
    4414:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortValue(LED_PORT, u8PinNum);
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	69 81       	ldd	r22, Y+1	; 0x01
    441a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <DIO_voidSetPortValue>
}
    441e:	0f 90       	pop	r0
    4420:	cf 91       	pop	r28
    4422:	df 91       	pop	r29
    4424:	08 95       	ret

00004426 <LED_voidOFF>:

void LED_voidOFF(u8 u8PinNum){
    4426:	df 93       	push	r29
    4428:	cf 93       	push	r28
    442a:	0f 92       	push	r0
    442c:	cd b7       	in	r28, 0x3d	; 61
    442e:	de b7       	in	r29, 0x3e	; 62
    4430:	89 83       	std	Y+1, r24	; 0x01
	//PORTC = 0b00000000; //low(C0,C1,C2)
	DIO_voidSetPinValue(LED_PORT, u8PinNum, DIO_u8LOW);
    4432:	81 e0       	ldi	r24, 0x01	; 1
    4434:	69 81       	ldd	r22, Y+1	; 0x01
    4436:	40 e0       	ldi	r20, 0x00	; 0
    4438:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinValue>
}
    443c:	0f 90       	pop	r0
    443e:	cf 91       	pop	r28
    4440:	df 91       	pop	r29
    4442:	08 95       	ret

00004444 <LEDs_voidOFF>:

void LEDs_voidOFF(u8 u8PinNum){
    4444:	df 93       	push	r29
    4446:	cf 93       	push	r28
    4448:	0f 92       	push	r0
    444a:	cd b7       	in	r28, 0x3d	; 61
    444c:	de b7       	in	r29, 0x3e	; 62
    444e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortValue(LED_PORT, u8PinNum);
    4450:	81 e0       	ldi	r24, 0x01	; 1
    4452:	69 81       	ldd	r22, Y+1	; 0x01
    4454:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <DIO_voidSetPortValue>
}
    4458:	0f 90       	pop	r0
    445a:	cf 91       	pop	r28
    445c:	df 91       	pop	r29
    445e:	08 95       	ret

00004460 <DC_MOTOR_TOGGLE_byFlag>:
#include "util/delay.h"

volatile u8 flag =1;

//Toggle motor by just flag
void DC_MOTOR_TOGGLE_byFlag(void){
    4460:	df 93       	push	r29
    4462:	cf 93       	push	r28
    4464:	cd b7       	in	r28, 0x3d	; 61
    4466:	de b7       	in	r29, 0x3e	; 62
    4468:	63 97       	sbiw	r28, 0x13	; 19
    446a:	0f b6       	in	r0, 0x3f	; 63
    446c:	f8 94       	cli
    446e:	de bf       	out	0x3e, r29	; 62
    4470:	0f be       	out	0x3f, r0	; 63
    4472:	cd bf       	out	0x3d, r28	; 61
	Motor motor;
	motor.motor_port = DIO_u8PORTA;
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	8f 87       	std	Y+15, r24	; 0x0f
	motor.motor_pin1 = DIO_U8PIN1;
    4478:	81 e0       	ldi	r24, 0x01	; 1
    447a:	88 8b       	std	Y+16, r24	; 0x10
	motor.motor_pin2 = DIO_U8PIN2;
    447c:	82 e0       	ldi	r24, 0x02	; 2
    447e:	89 8b       	std	Y+17, r24	; 0x11
	motor.motor_pin3 = DIO_U8PIN3;
    4480:	83 e0       	ldi	r24, 0x03	; 3
    4482:	8a 8b       	std	Y+18, r24	; 0x12
	motor.motor_pin4 = DIO_U8PIN4;
    4484:	84 e0       	ldi	r24, 0x04	; 4
    4486:	8b 8b       	std	Y+19, r24	; 0x13

	if(flag % 2 != 0){ //odd
    4488:	80 91 bb 01 	lds	r24, 0x01BB
    448c:	88 2f       	mov	r24, r24
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	81 70       	andi	r24, 0x01	; 1
    4492:	90 70       	andi	r25, 0x00	; 0
    4494:	88 23       	and	r24, r24
    4496:	29 f0       	breq	.+10     	; 0x44a2 <DC_MOTOR_TOGGLE_byFlag+0x42>
		DCMotor_SetCW(&motor);
    4498:	ce 01       	movw	r24, r28
    449a:	0f 96       	adiw	r24, 0x0f	; 15
    449c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DCMotor_SetCW>
    44a0:	0c c0       	rjmp	.+24     	; 0x44ba <DC_MOTOR_TOGGLE_byFlag+0x5a>
	}else if(flag % 2 == 0){ //even
    44a2:	80 91 bb 01 	lds	r24, 0x01BB
    44a6:	88 2f       	mov	r24, r24
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	81 70       	andi	r24, 0x01	; 1
    44ac:	90 70       	andi	r25, 0x00	; 0
    44ae:	00 97       	sbiw	r24, 0x00	; 0
    44b0:	21 f4       	brne	.+8      	; 0x44ba <DC_MOTOR_TOGGLE_byFlag+0x5a>
		DCMotor_SetCCW(&motor);
    44b2:	ce 01       	movw	r24, r28
    44b4:	0f 96       	adiw	r24, 0x0f	; 15
    44b6:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <DCMotor_SetCCW>
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	90 e8       	ldi	r25, 0x80	; 128
    44be:	ab e3       	ldi	r26, 0x3B	; 59
    44c0:	b5 e4       	ldi	r27, 0x45	; 69
    44c2:	8b 87       	std	Y+11, r24	; 0x0b
    44c4:	9c 87       	std	Y+12, r25	; 0x0c
    44c6:	ad 87       	std	Y+13, r26	; 0x0d
    44c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    44cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    44ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    44d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	4a ef       	ldi	r20, 0xFA	; 250
    44d8:	54 e4       	ldi	r21, 0x44	; 68
    44da:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	8f 83       	std	Y+7, r24	; 0x07
    44e4:	98 87       	std	Y+8, r25	; 0x08
    44e6:	a9 87       	std	Y+9, r26	; 0x09
    44e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44ea:	6f 81       	ldd	r22, Y+7	; 0x07
    44ec:	78 85       	ldd	r23, Y+8	; 0x08
    44ee:	89 85       	ldd	r24, Y+9	; 0x09
    44f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e8       	ldi	r20, 0x80	; 128
    44f8:	5f e3       	ldi	r21, 0x3F	; 63
    44fa:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    44fe:	88 23       	and	r24, r24
    4500:	2c f4       	brge	.+10     	; 0x450c <DC_MOTOR_TOGGLE_byFlag+0xac>
		__ticks = 1;
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	9e 83       	std	Y+6, r25	; 0x06
    4508:	8d 83       	std	Y+5, r24	; 0x05
    450a:	3f c0       	rjmp	.+126    	; 0x458a <DC_MOTOR_TOGGLE_byFlag+0x12a>
	else if (__tmp > 65535)
    450c:	6f 81       	ldd	r22, Y+7	; 0x07
    450e:	78 85       	ldd	r23, Y+8	; 0x08
    4510:	89 85       	ldd	r24, Y+9	; 0x09
    4512:	9a 85       	ldd	r25, Y+10	; 0x0a
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	3f ef       	ldi	r19, 0xFF	; 255
    4518:	4f e7       	ldi	r20, 0x7F	; 127
    451a:	57 e4       	ldi	r21, 0x47	; 71
    451c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    4520:	18 16       	cp	r1, r24
    4522:	4c f5       	brge	.+82     	; 0x4576 <DC_MOTOR_TOGGLE_byFlag+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4524:	6b 85       	ldd	r22, Y+11	; 0x0b
    4526:	7c 85       	ldd	r23, Y+12	; 0x0c
    4528:	8d 85       	ldd	r24, Y+13	; 0x0d
    452a:	9e 85       	ldd	r25, Y+14	; 0x0e
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	40 e2       	ldi	r20, 0x20	; 32
    4532:	51 e4       	ldi	r21, 0x41	; 65
    4534:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	bc 01       	movw	r22, r24
    453e:	cd 01       	movw	r24, r26
    4540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	9e 83       	std	Y+6, r25	; 0x06
    454a:	8d 83       	std	Y+5, r24	; 0x05
    454c:	0f c0       	rjmp	.+30     	; 0x456c <DC_MOTOR_TOGGLE_byFlag+0x10c>
    454e:	88 ec       	ldi	r24, 0xC8	; 200
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	9c 83       	std	Y+4, r25	; 0x04
    4554:	8b 83       	std	Y+3, r24	; 0x03
    4556:	8b 81       	ldd	r24, Y+3	; 0x03
    4558:	9c 81       	ldd	r25, Y+4	; 0x04
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	f1 f7       	brne	.-4      	; 0x455a <DC_MOTOR_TOGGLE_byFlag+0xfa>
    455e:	9c 83       	std	Y+4, r25	; 0x04
    4560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4562:	8d 81       	ldd	r24, Y+5	; 0x05
    4564:	9e 81       	ldd	r25, Y+6	; 0x06
    4566:	01 97       	sbiw	r24, 0x01	; 1
    4568:	9e 83       	std	Y+6, r25	; 0x06
    456a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456c:	8d 81       	ldd	r24, Y+5	; 0x05
    456e:	9e 81       	ldd	r25, Y+6	; 0x06
    4570:	00 97       	sbiw	r24, 0x00	; 0
    4572:	69 f7       	brne	.-38     	; 0x454e <DC_MOTOR_TOGGLE_byFlag+0xee>
    4574:	14 c0       	rjmp	.+40     	; 0x459e <DC_MOTOR_TOGGLE_byFlag+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4576:	6f 81       	ldd	r22, Y+7	; 0x07
    4578:	78 85       	ldd	r23, Y+8	; 0x08
    457a:	89 85       	ldd	r24, Y+9	; 0x09
    457c:	9a 85       	ldd	r25, Y+10	; 0x0a
    457e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4582:	dc 01       	movw	r26, r24
    4584:	cb 01       	movw	r24, r22
    4586:	9e 83       	std	Y+6, r25	; 0x06
    4588:	8d 83       	std	Y+5, r24	; 0x05
    458a:	8d 81       	ldd	r24, Y+5	; 0x05
    458c:	9e 81       	ldd	r25, Y+6	; 0x06
    458e:	9a 83       	std	Y+2, r25	; 0x02
    4590:	89 83       	std	Y+1, r24	; 0x01
    4592:	89 81       	ldd	r24, Y+1	; 0x01
    4594:	9a 81       	ldd	r25, Y+2	; 0x02
    4596:	01 97       	sbiw	r24, 0x01	; 1
    4598:	f1 f7       	brne	.-4      	; 0x4596 <DC_MOTOR_TOGGLE_byFlag+0x136>
    459a:	9a 83       	std	Y+2, r25	; 0x02
    459c:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(3000);
	flag++;
    459e:	80 91 bb 01 	lds	r24, 0x01BB
    45a2:	8f 5f       	subi	r24, 0xFF	; 255
    45a4:	80 93 bb 01 	sts	0x01BB, r24
}
    45a8:	63 96       	adiw	r28, 0x13	; 19
    45aa:	0f b6       	in	r0, 0x3f	; 63
    45ac:	f8 94       	cli
    45ae:	de bf       	out	0x3e, r29	; 62
    45b0:	0f be       	out	0x3f, r0	; 63
    45b2:	cd bf       	out	0x3d, r28	; 61
    45b4:	cf 91       	pop	r28
    45b6:	df 91       	pop	r29
    45b8:	08 95       	ret

000045ba <DC_MOTOR_TOGGLE_byFlagAndFun>:

//Toggle motor by flag and function DCMotor_Toggle()
void DC_MOTOR_TOGGLE_byFlagAndFun(void){
    45ba:	df 93       	push	r29
    45bc:	cf 93       	push	r28
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	63 97       	sbiw	r28, 0x13	; 19
    45c4:	0f b6       	in	r0, 0x3f	; 63
    45c6:	f8 94       	cli
    45c8:	de bf       	out	0x3e, r29	; 62
    45ca:	0f be       	out	0x3f, r0	; 63
    45cc:	cd bf       	out	0x3d, r28	; 61
	Motor motor;
	motor.motor_port = DIO_u8PORTA;
    45ce:	81 e0       	ldi	r24, 0x01	; 1
    45d0:	8f 87       	std	Y+15, r24	; 0x0f
	motor.motor_pin1 = DIO_U8PIN1;
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	88 8b       	std	Y+16, r24	; 0x10
	motor.motor_pin2 = DIO_U8PIN2;
    45d6:	82 e0       	ldi	r24, 0x02	; 2
    45d8:	89 8b       	std	Y+17, r24	; 0x11
	motor.motor_pin3 = DIO_U8PIN3;
    45da:	83 e0       	ldi	r24, 0x03	; 3
    45dc:	8a 8b       	std	Y+18, r24	; 0x12
	motor.motor_pin4 = DIO_U8PIN4;
    45de:	84 e0       	ldi	r24, 0x04	; 4
    45e0:	8b 8b       	std	Y+19, r24	; 0x13

	if (flag == 1){
    45e2:	80 91 bb 01 	lds	r24, 0x01BB
    45e6:	81 30       	cpi	r24, 0x01	; 1
    45e8:	51 f4       	brne	.+20     	; 0x45fe <DC_MOTOR_TOGGLE_byFlagAndFun+0x44>
		DCMotor_SetCW(&motor);
    45ea:	ce 01       	movw	r24, r28
    45ec:	0f 96       	adiw	r24, 0x0f	; 15
    45ee:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <DCMotor_SetCW>
		flag++;
    45f2:	80 91 bb 01 	lds	r24, 0x01BB
    45f6:	8f 5f       	subi	r24, 0xFF	; 255
    45f8:	80 93 bb 01 	sts	0x01BB, r24
    45fc:	0d c0       	rjmp	.+26     	; 0x4618 <DC_MOTOR_TOGGLE_byFlagAndFun+0x5e>
	}
	else if (flag == 2){
    45fe:	80 91 bb 01 	lds	r24, 0x01BB
    4602:	82 30       	cpi	r24, 0x02	; 2
    4604:	49 f4       	brne	.+18     	; 0x4618 <DC_MOTOR_TOGGLE_byFlagAndFun+0x5e>
		DCMotor_Toggle(&motor);
    4606:	ce 01       	movw	r24, r28
    4608:	0f 96       	adiw	r24, 0x0f	; 15
    460a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <DCMotor_Toggle>
		flag--;
    460e:	80 91 bb 01 	lds	r24, 0x01BB
    4612:	81 50       	subi	r24, 0x01	; 1
    4614:	80 93 bb 01 	sts	0x01BB, r24
    4618:	80 e0       	ldi	r24, 0x00	; 0
    461a:	90 e8       	ldi	r25, 0x80	; 128
    461c:	ab e3       	ldi	r26, 0x3B	; 59
    461e:	b5 e4       	ldi	r27, 0x45	; 69
    4620:	8b 87       	std	Y+11, r24	; 0x0b
    4622:	9c 87       	std	Y+12, r25	; 0x0c
    4624:	ad 87       	std	Y+13, r26	; 0x0d
    4626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4628:	6b 85       	ldd	r22, Y+11	; 0x0b
    462a:	7c 85       	ldd	r23, Y+12	; 0x0c
    462c:	8d 85       	ldd	r24, Y+13	; 0x0d
    462e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4630:	20 e0       	ldi	r18, 0x00	; 0
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	4a ef       	ldi	r20, 0xFA	; 250
    4636:	54 e4       	ldi	r21, 0x44	; 68
    4638:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	8f 83       	std	Y+7, r24	; 0x07
    4642:	98 87       	std	Y+8, r25	; 0x08
    4644:	a9 87       	std	Y+9, r26	; 0x09
    4646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4648:	6f 81       	ldd	r22, Y+7	; 0x07
    464a:	78 85       	ldd	r23, Y+8	; 0x08
    464c:	89 85       	ldd	r24, Y+9	; 0x09
    464e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	40 e8       	ldi	r20, 0x80	; 128
    4656:	5f e3       	ldi	r21, 0x3F	; 63
    4658:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    465c:	88 23       	and	r24, r24
    465e:	2c f4       	brge	.+10     	; 0x466a <DC_MOTOR_TOGGLE_byFlagAndFun+0xb0>
		__ticks = 1;
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	9e 83       	std	Y+6, r25	; 0x06
    4666:	8d 83       	std	Y+5, r24	; 0x05
    4668:	3f c0       	rjmp	.+126    	; 0x46e8 <DC_MOTOR_TOGGLE_byFlagAndFun+0x12e>
	else if (__tmp > 65535)
    466a:	6f 81       	ldd	r22, Y+7	; 0x07
    466c:	78 85       	ldd	r23, Y+8	; 0x08
    466e:	89 85       	ldd	r24, Y+9	; 0x09
    4670:	9a 85       	ldd	r25, Y+10	; 0x0a
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	3f ef       	ldi	r19, 0xFF	; 255
    4676:	4f e7       	ldi	r20, 0x7F	; 127
    4678:	57 e4       	ldi	r21, 0x47	; 71
    467a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    467e:	18 16       	cp	r1, r24
    4680:	4c f5       	brge	.+82     	; 0x46d4 <DC_MOTOR_TOGGLE_byFlagAndFun+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4682:	6b 85       	ldd	r22, Y+11	; 0x0b
    4684:	7c 85       	ldd	r23, Y+12	; 0x0c
    4686:	8d 85       	ldd	r24, Y+13	; 0x0d
    4688:	9e 85       	ldd	r25, Y+14	; 0x0e
    468a:	20 e0       	ldi	r18, 0x00	; 0
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	40 e2       	ldi	r20, 0x20	; 32
    4690:	51 e4       	ldi	r21, 0x41	; 65
    4692:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	bc 01       	movw	r22, r24
    469c:	cd 01       	movw	r24, r26
    469e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	9e 83       	std	Y+6, r25	; 0x06
    46a8:	8d 83       	std	Y+5, r24	; 0x05
    46aa:	0f c0       	rjmp	.+30     	; 0x46ca <DC_MOTOR_TOGGLE_byFlagAndFun+0x110>
    46ac:	88 ec       	ldi	r24, 0xC8	; 200
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	9c 83       	std	Y+4, r25	; 0x04
    46b2:	8b 83       	std	Y+3, r24	; 0x03
    46b4:	8b 81       	ldd	r24, Y+3	; 0x03
    46b6:	9c 81       	ldd	r25, Y+4	; 0x04
    46b8:	01 97       	sbiw	r24, 0x01	; 1
    46ba:	f1 f7       	brne	.-4      	; 0x46b8 <DC_MOTOR_TOGGLE_byFlagAndFun+0xfe>
    46bc:	9c 83       	std	Y+4, r25	; 0x04
    46be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c0:	8d 81       	ldd	r24, Y+5	; 0x05
    46c2:	9e 81       	ldd	r25, Y+6	; 0x06
    46c4:	01 97       	sbiw	r24, 0x01	; 1
    46c6:	9e 83       	std	Y+6, r25	; 0x06
    46c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ca:	8d 81       	ldd	r24, Y+5	; 0x05
    46cc:	9e 81       	ldd	r25, Y+6	; 0x06
    46ce:	00 97       	sbiw	r24, 0x00	; 0
    46d0:	69 f7       	brne	.-38     	; 0x46ac <DC_MOTOR_TOGGLE_byFlagAndFun+0xf2>
    46d2:	14 c0       	rjmp	.+40     	; 0x46fc <DC_MOTOR_TOGGLE_byFlagAndFun+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d4:	6f 81       	ldd	r22, Y+7	; 0x07
    46d6:	78 85       	ldd	r23, Y+8	; 0x08
    46d8:	89 85       	ldd	r24, Y+9	; 0x09
    46da:	9a 85       	ldd	r25, Y+10	; 0x0a
    46dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	9e 83       	std	Y+6, r25	; 0x06
    46e6:	8d 83       	std	Y+5, r24	; 0x05
    46e8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ea:	9e 81       	ldd	r25, Y+6	; 0x06
    46ec:	9a 83       	std	Y+2, r25	; 0x02
    46ee:	89 83       	std	Y+1, r24	; 0x01
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
    46f2:	9a 81       	ldd	r25, Y+2	; 0x02
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	f1 f7       	brne	.-4      	; 0x46f4 <DC_MOTOR_TOGGLE_byFlagAndFun+0x13a>
    46f8:	9a 83       	std	Y+2, r25	; 0x02
    46fa:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(3000);

}
    46fc:	63 96       	adiw	r28, 0x13	; 19
    46fe:	0f b6       	in	r0, 0x3f	; 63
    4700:	f8 94       	cli
    4702:	de bf       	out	0x3e, r29	; 62
    4704:	0f be       	out	0x3f, r0	; 63
    4706:	cd bf       	out	0x3d, r28	; 61
    4708:	cf 91       	pop	r28
    470a:	df 91       	pop	r29
    470c:	08 95       	ret

0000470e <main>:

int main(void){
    470e:	df 93       	push	r29
    4710:	cf 93       	push	r28
    4712:	cd b7       	in	r28, 0x3d	; 61
    4714:	de b7       	in	r29, 0x3e	; 62
    4716:	a3 97       	sbiw	r28, 0x23	; 35
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	f8 94       	cli
    471c:	de bf       	out	0x3e, r29	; 62
    471e:	0f be       	out	0x3f, r0	; 63
    4720:	cd bf       	out	0x3d, r28	; 61
	//SW
	Button button;
	button.button_pin = DIO_U8PIN2;
    4722:	82 e0       	ldi	r24, 0x02	; 2
    4724:	8d 8f       	std	Y+29, r24	; 0x1d
	BushButton_voidInit(&button);
    4726:	ce 01       	movw	r24, r28
    4728:	4d 96       	adiw	r24, 0x1d	; 29
    472a:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <BushButton_voidInit>

	//EXTI
	EXTI_init();
    472e:	0e 94 88 12 	call	0x2510	; 0x2510 <EXTI_init>
	//EXTI_SetCallBack(DC_MOTOR_TOGGLE_byFlag, 0);
	EXTI_SetCallBack(DC_MOTOR_TOGGLE_byFlagAndFun, 0);
    4732:	8d ed       	ldi	r24, 0xDD	; 221
    4734:	92 e2       	ldi	r25, 0x22	; 34
    4736:	60 e0       	ldi	r22, 0x00	; 0
    4738:	0e 94 ab 12 	call	0x2556	; 0x2556 <EXTI_SetCallBack>

	//DC-Motor_PIN
	Motor motor;
	motor.motor_port = DIO_u8PORTA;
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	8f 8f       	std	Y+31, r24	; 0x1f
	motor.motor_pin1 = DIO_U8PIN1;
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	88 a3       	std	Y+32, r24	; 0x20
	motor.motor_pin2 = DIO_U8PIN2;
    4744:	82 e0       	ldi	r24, 0x02	; 2
    4746:	89 a3       	std	Y+33, r24	; 0x21
	motor.motor_pin3 = DIO_U8PIN3;
    4748:	83 e0       	ldi	r24, 0x03	; 3
    474a:	8a a3       	std	Y+34, r24	; 0x22
	motor.motor_pin4 = DIO_U8PIN4;
    474c:	84 e0       	ldi	r24, 0x04	; 4
    474e:	8b a3       	std	Y+35, r24	; 0x23
	DCMotor_init(&motor);
    4750:	ce 01       	movw	r24, r28
    4752:	4f 96       	adiw	r24, 0x1f	; 31
    4754:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <DCMotor_init>

	//LED
	LED_voidInit(DIO_U8PIN0);
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <LED_voidInit>

	while(1){
		DCMotor_OFF(&motor);
    475e:	ce 01       	movw	r24, r28
    4760:	4f 96       	adiw	r24, 0x1f	; 31
    4762:	0e 94 24 17 	call	0x2e48	; 0x2e48 <DCMotor_OFF>
		LED_voidON(DIO_U8PIN0);
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	0e 94 f6 21 	call	0x43ec	; 0x43ec <LED_voidON>
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	aa ef       	ldi	r26, 0xFA	; 250
    4772:	b3 e4       	ldi	r27, 0x43	; 67
    4774:	89 8f       	std	Y+25, r24	; 0x19
    4776:	9a 8f       	std	Y+26, r25	; 0x1a
    4778:	ab 8f       	std	Y+27, r26	; 0x1b
    477a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    477c:	69 8d       	ldd	r22, Y+25	; 0x19
    477e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4782:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	4a ef       	ldi	r20, 0xFA	; 250
    478a:	54 e4       	ldi	r21, 0x44	; 68
    478c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4790:	dc 01       	movw	r26, r24
    4792:	cb 01       	movw	r24, r22
    4794:	8d 8b       	std	Y+21, r24	; 0x15
    4796:	9e 8b       	std	Y+22, r25	; 0x16
    4798:	af 8b       	std	Y+23, r26	; 0x17
    479a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    479c:	6d 89       	ldd	r22, Y+21	; 0x15
    479e:	7e 89       	ldd	r23, Y+22	; 0x16
    47a0:	8f 89       	ldd	r24, Y+23	; 0x17
    47a2:	98 8d       	ldd	r25, Y+24	; 0x18
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	40 e8       	ldi	r20, 0x80	; 128
    47aa:	5f e3       	ldi	r21, 0x3F	; 63
    47ac:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    47b0:	88 23       	and	r24, r24
    47b2:	2c f4       	brge	.+10     	; 0x47be <main+0xb0>
		__ticks = 1;
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	9c 8b       	std	Y+20, r25	; 0x14
    47ba:	8b 8b       	std	Y+19, r24	; 0x13
    47bc:	3f c0       	rjmp	.+126    	; 0x483c <main+0x12e>
	else if (__tmp > 65535)
    47be:	6d 89       	ldd	r22, Y+21	; 0x15
    47c0:	7e 89       	ldd	r23, Y+22	; 0x16
    47c2:	8f 89       	ldd	r24, Y+23	; 0x17
    47c4:	98 8d       	ldd	r25, Y+24	; 0x18
    47c6:	20 e0       	ldi	r18, 0x00	; 0
    47c8:	3f ef       	ldi	r19, 0xFF	; 255
    47ca:	4f e7       	ldi	r20, 0x7F	; 127
    47cc:	57 e4       	ldi	r21, 0x47	; 71
    47ce:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    47d2:	18 16       	cp	r1, r24
    47d4:	4c f5       	brge	.+82     	; 0x4828 <main+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d6:	69 8d       	ldd	r22, Y+25	; 0x19
    47d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	40 e2       	ldi	r20, 0x20	; 32
    47e4:	51 e4       	ldi	r21, 0x41	; 65
    47e6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22
    47ee:	bc 01       	movw	r22, r24
    47f0:	cd 01       	movw	r24, r26
    47f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	9c 8b       	std	Y+20, r25	; 0x14
    47fc:	8b 8b       	std	Y+19, r24	; 0x13
    47fe:	0f c0       	rjmp	.+30     	; 0x481e <main+0x110>
    4800:	88 ec       	ldi	r24, 0xC8	; 200
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	9a 8b       	std	Y+18, r25	; 0x12
    4806:	89 8b       	std	Y+17, r24	; 0x11
    4808:	89 89       	ldd	r24, Y+17	; 0x11
    480a:	9a 89       	ldd	r25, Y+18	; 0x12
    480c:	01 97       	sbiw	r24, 0x01	; 1
    480e:	f1 f7       	brne	.-4      	; 0x480c <main+0xfe>
    4810:	9a 8b       	std	Y+18, r25	; 0x12
    4812:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4814:	8b 89       	ldd	r24, Y+19	; 0x13
    4816:	9c 89       	ldd	r25, Y+20	; 0x14
    4818:	01 97       	sbiw	r24, 0x01	; 1
    481a:	9c 8b       	std	Y+20, r25	; 0x14
    481c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    481e:	8b 89       	ldd	r24, Y+19	; 0x13
    4820:	9c 89       	ldd	r25, Y+20	; 0x14
    4822:	00 97       	sbiw	r24, 0x00	; 0
    4824:	69 f7       	brne	.-38     	; 0x4800 <main+0xf2>
    4826:	14 c0       	rjmp	.+40     	; 0x4850 <main+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4828:	6d 89       	ldd	r22, Y+21	; 0x15
    482a:	7e 89       	ldd	r23, Y+22	; 0x16
    482c:	8f 89       	ldd	r24, Y+23	; 0x17
    482e:	98 8d       	ldd	r25, Y+24	; 0x18
    4830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4834:	dc 01       	movw	r26, r24
    4836:	cb 01       	movw	r24, r22
    4838:	9c 8b       	std	Y+20, r25	; 0x14
    483a:	8b 8b       	std	Y+19, r24	; 0x13
    483c:	8b 89       	ldd	r24, Y+19	; 0x13
    483e:	9c 89       	ldd	r25, Y+20	; 0x14
    4840:	98 8b       	std	Y+16, r25	; 0x10
    4842:	8f 87       	std	Y+15, r24	; 0x0f
    4844:	8f 85       	ldd	r24, Y+15	; 0x0f
    4846:	98 89       	ldd	r25, Y+16	; 0x10
    4848:	01 97       	sbiw	r24, 0x01	; 1
    484a:	f1 f7       	brne	.-4      	; 0x4848 <main+0x13a>
    484c:	98 8b       	std	Y+16, r25	; 0x10
    484e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LED_voidOFF(DIO_U8PIN0);
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	0e 94 13 22 	call	0x4426	; 0x4426 <LED_voidOFF>
    4856:	80 e0       	ldi	r24, 0x00	; 0
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	aa ef       	ldi	r26, 0xFA	; 250
    485c:	b3 e4       	ldi	r27, 0x43	; 67
    485e:	8b 87       	std	Y+11, r24	; 0x0b
    4860:	9c 87       	std	Y+12, r25	; 0x0c
    4862:	ad 87       	std	Y+13, r26	; 0x0d
    4864:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4866:	6b 85       	ldd	r22, Y+11	; 0x0b
    4868:	7c 85       	ldd	r23, Y+12	; 0x0c
    486a:	8d 85       	ldd	r24, Y+13	; 0x0d
    486c:	9e 85       	ldd	r25, Y+14	; 0x0e
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	4a ef       	ldi	r20, 0xFA	; 250
    4874:	54 e4       	ldi	r21, 0x44	; 68
    4876:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	8f 83       	std	Y+7, r24	; 0x07
    4880:	98 87       	std	Y+8, r25	; 0x08
    4882:	a9 87       	std	Y+9, r26	; 0x09
    4884:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4886:	6f 81       	ldd	r22, Y+7	; 0x07
    4888:	78 85       	ldd	r23, Y+8	; 0x08
    488a:	89 85       	ldd	r24, Y+9	; 0x09
    488c:	9a 85       	ldd	r25, Y+10	; 0x0a
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	40 e8       	ldi	r20, 0x80	; 128
    4894:	5f e3       	ldi	r21, 0x3F	; 63
    4896:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    489a:	88 23       	and	r24, r24
    489c:	2c f4       	brge	.+10     	; 0x48a8 <main+0x19a>
		__ticks = 1;
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	9e 83       	std	Y+6, r25	; 0x06
    48a4:	8d 83       	std	Y+5, r24	; 0x05
    48a6:	3f c0       	rjmp	.+126    	; 0x4926 <main+0x218>
	else if (__tmp > 65535)
    48a8:	6f 81       	ldd	r22, Y+7	; 0x07
    48aa:	78 85       	ldd	r23, Y+8	; 0x08
    48ac:	89 85       	ldd	r24, Y+9	; 0x09
    48ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	3f ef       	ldi	r19, 0xFF	; 255
    48b4:	4f e7       	ldi	r20, 0x7F	; 127
    48b6:	57 e4       	ldi	r21, 0x47	; 71
    48b8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    48bc:	18 16       	cp	r1, r24
    48be:	4c f5       	brge	.+82     	; 0x4912 <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    48c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    48c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    48c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	40 e2       	ldi	r20, 0x20	; 32
    48ce:	51 e4       	ldi	r21, 0x41	; 65
    48d0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    48d4:	dc 01       	movw	r26, r24
    48d6:	cb 01       	movw	r24, r22
    48d8:	bc 01       	movw	r22, r24
    48da:	cd 01       	movw	r24, r26
    48dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	9e 83       	std	Y+6, r25	; 0x06
    48e6:	8d 83       	std	Y+5, r24	; 0x05
    48e8:	0f c0       	rjmp	.+30     	; 0x4908 <main+0x1fa>
    48ea:	88 ec       	ldi	r24, 0xC8	; 200
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	9c 83       	std	Y+4, r25	; 0x04
    48f0:	8b 83       	std	Y+3, r24	; 0x03
    48f2:	8b 81       	ldd	r24, Y+3	; 0x03
    48f4:	9c 81       	ldd	r25, Y+4	; 0x04
    48f6:	01 97       	sbiw	r24, 0x01	; 1
    48f8:	f1 f7       	brne	.-4      	; 0x48f6 <main+0x1e8>
    48fa:	9c 83       	std	Y+4, r25	; 0x04
    48fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4900:	9e 81       	ldd	r25, Y+6	; 0x06
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	9e 83       	std	Y+6, r25	; 0x06
    4906:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4908:	8d 81       	ldd	r24, Y+5	; 0x05
    490a:	9e 81       	ldd	r25, Y+6	; 0x06
    490c:	00 97       	sbiw	r24, 0x00	; 0
    490e:	69 f7       	brne	.-38     	; 0x48ea <main+0x1dc>
    4910:	26 cf       	rjmp	.-436    	; 0x475e <main+0x50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4912:	6f 81       	ldd	r22, Y+7	; 0x07
    4914:	78 85       	ldd	r23, Y+8	; 0x08
    4916:	89 85       	ldd	r24, Y+9	; 0x09
    4918:	9a 85       	ldd	r25, Y+10	; 0x0a
    491a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491e:	dc 01       	movw	r26, r24
    4920:	cb 01       	movw	r24, r22
    4922:	9e 83       	std	Y+6, r25	; 0x06
    4924:	8d 83       	std	Y+5, r24	; 0x05
    4926:	8d 81       	ldd	r24, Y+5	; 0x05
    4928:	9e 81       	ldd	r25, Y+6	; 0x06
    492a:	9a 83       	std	Y+2, r25	; 0x02
    492c:	89 83       	std	Y+1, r24	; 0x01
    492e:	89 81       	ldd	r24, Y+1	; 0x01
    4930:	9a 81       	ldd	r25, Y+2	; 0x02
    4932:	01 97       	sbiw	r24, 0x01	; 1
    4934:	f1 f7       	brne	.-4      	; 0x4932 <main+0x224>
    4936:	9a 83       	std	Y+2, r25	; 0x02
    4938:	89 83       	std	Y+1, r24	; 0x01
    493a:	11 cf       	rjmp	.-478    	; 0x475e <main+0x50>

0000493c <__mulsi3>:
    493c:	62 9f       	mul	r22, r18
    493e:	d0 01       	movw	r26, r0
    4940:	73 9f       	mul	r23, r19
    4942:	f0 01       	movw	r30, r0
    4944:	82 9f       	mul	r24, r18
    4946:	e0 0d       	add	r30, r0
    4948:	f1 1d       	adc	r31, r1
    494a:	64 9f       	mul	r22, r20
    494c:	e0 0d       	add	r30, r0
    494e:	f1 1d       	adc	r31, r1
    4950:	92 9f       	mul	r25, r18
    4952:	f0 0d       	add	r31, r0
    4954:	83 9f       	mul	r24, r19
    4956:	f0 0d       	add	r31, r0
    4958:	74 9f       	mul	r23, r20
    495a:	f0 0d       	add	r31, r0
    495c:	65 9f       	mul	r22, r21
    495e:	f0 0d       	add	r31, r0
    4960:	99 27       	eor	r25, r25
    4962:	72 9f       	mul	r23, r18
    4964:	b0 0d       	add	r27, r0
    4966:	e1 1d       	adc	r30, r1
    4968:	f9 1f       	adc	r31, r25
    496a:	63 9f       	mul	r22, r19
    496c:	b0 0d       	add	r27, r0
    496e:	e1 1d       	adc	r30, r1
    4970:	f9 1f       	adc	r31, r25
    4972:	bd 01       	movw	r22, r26
    4974:	cf 01       	movw	r24, r30
    4976:	11 24       	eor	r1, r1
    4978:	08 95       	ret

0000497a <__udivmodqi4>:
    497a:	99 1b       	sub	r25, r25
    497c:	79 e0       	ldi	r23, 0x09	; 9
    497e:	04 c0       	rjmp	.+8      	; 0x4988 <__udivmodqi4_ep>

00004980 <__udivmodqi4_loop>:
    4980:	99 1f       	adc	r25, r25
    4982:	96 17       	cp	r25, r22
    4984:	08 f0       	brcs	.+2      	; 0x4988 <__udivmodqi4_ep>
    4986:	96 1b       	sub	r25, r22

00004988 <__udivmodqi4_ep>:
    4988:	88 1f       	adc	r24, r24
    498a:	7a 95       	dec	r23
    498c:	c9 f7       	brne	.-14     	; 0x4980 <__udivmodqi4_loop>
    498e:	80 95       	com	r24
    4990:	08 95       	ret

00004992 <__divmodsi4>:
    4992:	97 fb       	bst	r25, 7
    4994:	09 2e       	mov	r0, r25
    4996:	05 26       	eor	r0, r21
    4998:	0e d0       	rcall	.+28     	; 0x49b6 <__divmodsi4_neg1>
    499a:	57 fd       	sbrc	r21, 7
    499c:	04 d0       	rcall	.+8      	; 0x49a6 <__divmodsi4_neg2>
    499e:	14 d0       	rcall	.+40     	; 0x49c8 <__udivmodsi4>
    49a0:	0a d0       	rcall	.+20     	; 0x49b6 <__divmodsi4_neg1>
    49a2:	00 1c       	adc	r0, r0
    49a4:	38 f4       	brcc	.+14     	; 0x49b4 <__divmodsi4_exit>

000049a6 <__divmodsi4_neg2>:
    49a6:	50 95       	com	r21
    49a8:	40 95       	com	r20
    49aa:	30 95       	com	r19
    49ac:	21 95       	neg	r18
    49ae:	3f 4f       	sbci	r19, 0xFF	; 255
    49b0:	4f 4f       	sbci	r20, 0xFF	; 255
    49b2:	5f 4f       	sbci	r21, 0xFF	; 255

000049b4 <__divmodsi4_exit>:
    49b4:	08 95       	ret

000049b6 <__divmodsi4_neg1>:
    49b6:	f6 f7       	brtc	.-4      	; 0x49b4 <__divmodsi4_exit>
    49b8:	90 95       	com	r25
    49ba:	80 95       	com	r24
    49bc:	70 95       	com	r23
    49be:	61 95       	neg	r22
    49c0:	7f 4f       	sbci	r23, 0xFF	; 255
    49c2:	8f 4f       	sbci	r24, 0xFF	; 255
    49c4:	9f 4f       	sbci	r25, 0xFF	; 255
    49c6:	08 95       	ret

000049c8 <__udivmodsi4>:
    49c8:	a1 e2       	ldi	r26, 0x21	; 33
    49ca:	1a 2e       	mov	r1, r26
    49cc:	aa 1b       	sub	r26, r26
    49ce:	bb 1b       	sub	r27, r27
    49d0:	fd 01       	movw	r30, r26
    49d2:	0d c0       	rjmp	.+26     	; 0x49ee <__udivmodsi4_ep>

000049d4 <__udivmodsi4_loop>:
    49d4:	aa 1f       	adc	r26, r26
    49d6:	bb 1f       	adc	r27, r27
    49d8:	ee 1f       	adc	r30, r30
    49da:	ff 1f       	adc	r31, r31
    49dc:	a2 17       	cp	r26, r18
    49de:	b3 07       	cpc	r27, r19
    49e0:	e4 07       	cpc	r30, r20
    49e2:	f5 07       	cpc	r31, r21
    49e4:	20 f0       	brcs	.+8      	; 0x49ee <__udivmodsi4_ep>
    49e6:	a2 1b       	sub	r26, r18
    49e8:	b3 0b       	sbc	r27, r19
    49ea:	e4 0b       	sbc	r30, r20
    49ec:	f5 0b       	sbc	r31, r21

000049ee <__udivmodsi4_ep>:
    49ee:	66 1f       	adc	r22, r22
    49f0:	77 1f       	adc	r23, r23
    49f2:	88 1f       	adc	r24, r24
    49f4:	99 1f       	adc	r25, r25
    49f6:	1a 94       	dec	r1
    49f8:	69 f7       	brne	.-38     	; 0x49d4 <__udivmodsi4_loop>
    49fa:	60 95       	com	r22
    49fc:	70 95       	com	r23
    49fe:	80 95       	com	r24
    4a00:	90 95       	com	r25
    4a02:	9b 01       	movw	r18, r22
    4a04:	ac 01       	movw	r20, r24
    4a06:	bd 01       	movw	r22, r26
    4a08:	cf 01       	movw	r24, r30
    4a0a:	08 95       	ret

00004a0c <__prologue_saves__>:
    4a0c:	2f 92       	push	r2
    4a0e:	3f 92       	push	r3
    4a10:	4f 92       	push	r4
    4a12:	5f 92       	push	r5
    4a14:	6f 92       	push	r6
    4a16:	7f 92       	push	r7
    4a18:	8f 92       	push	r8
    4a1a:	9f 92       	push	r9
    4a1c:	af 92       	push	r10
    4a1e:	bf 92       	push	r11
    4a20:	cf 92       	push	r12
    4a22:	df 92       	push	r13
    4a24:	ef 92       	push	r14
    4a26:	ff 92       	push	r15
    4a28:	0f 93       	push	r16
    4a2a:	1f 93       	push	r17
    4a2c:	cf 93       	push	r28
    4a2e:	df 93       	push	r29
    4a30:	cd b7       	in	r28, 0x3d	; 61
    4a32:	de b7       	in	r29, 0x3e	; 62
    4a34:	ca 1b       	sub	r28, r26
    4a36:	db 0b       	sbc	r29, r27
    4a38:	0f b6       	in	r0, 0x3f	; 63
    4a3a:	f8 94       	cli
    4a3c:	de bf       	out	0x3e, r29	; 62
    4a3e:	0f be       	out	0x3f, r0	; 63
    4a40:	cd bf       	out	0x3d, r28	; 61
    4a42:	09 94       	ijmp

00004a44 <__epilogue_restores__>:
    4a44:	2a 88       	ldd	r2, Y+18	; 0x12
    4a46:	39 88       	ldd	r3, Y+17	; 0x11
    4a48:	48 88       	ldd	r4, Y+16	; 0x10
    4a4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a50:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a52:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a54:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a56:	b9 84       	ldd	r11, Y+9	; 0x09
    4a58:	c8 84       	ldd	r12, Y+8	; 0x08
    4a5a:	df 80       	ldd	r13, Y+7	; 0x07
    4a5c:	ee 80       	ldd	r14, Y+6	; 0x06
    4a5e:	fd 80       	ldd	r15, Y+5	; 0x05
    4a60:	0c 81       	ldd	r16, Y+4	; 0x04
    4a62:	1b 81       	ldd	r17, Y+3	; 0x03
    4a64:	aa 81       	ldd	r26, Y+2	; 0x02
    4a66:	b9 81       	ldd	r27, Y+1	; 0x01
    4a68:	ce 0f       	add	r28, r30
    4a6a:	d1 1d       	adc	r29, r1
    4a6c:	0f b6       	in	r0, 0x3f	; 63
    4a6e:	f8 94       	cli
    4a70:	de bf       	out	0x3e, r29	; 62
    4a72:	0f be       	out	0x3f, r0	; 63
    4a74:	cd bf       	out	0x3d, r28	; 61
    4a76:	ed 01       	movw	r28, r26
    4a78:	08 95       	ret

00004a7a <_exit>:
    4a7a:	f8 94       	cli

00004a7c <__stop_program>:
    4a7c:	ff cf       	rjmp	.-2      	; 0x4a7c <__stop_program>
